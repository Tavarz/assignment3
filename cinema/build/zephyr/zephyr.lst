
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	40 1d 00 20 e1 1d 00 00 d3 4f 00 00 b5 1d 00 00     @.. .....O......
  10:	b5 1d 00 00 b5 1d 00 00 b5 1d 00 00 00 00 00 00     ................
	...
  2c:	d5 1a 00 00 b5 1d 00 00 00 00 00 00 81 1a 00 00     ................
  3c:	b5 1d 00 00                                         ....

00000040 <_irq_vector_table>:
  40:	85 1b 00 00 85 1b 00 00 85 1b 00 00 85 1b 00 00     ................
  50:	85 1b 00 00 85 1b 00 00 85 1b 00 00 85 1b 00 00     ................
  60:	85 1b 00 00 85 1b 00 00 85 1b 00 00 85 1b 00 00     ................
  70:	85 1b 00 00 85 1b 00 00 85 1b 00 00 85 1b 00 00     ................
  80:	85 1b 00 00 85 1b 00 00 85 1b 00 00 85 1b 00 00     ................
  90:	85 1b 00 00 85 1b 00 00 85 1b 00 00 85 1b 00 00     ................
  a0:	85 1b 00 00 85 1b 00 00 85 1b 00 00 85 1b 00 00     ................
  b0:	85 1b 00 00 85 1b 00 00 85 1b 00 00 85 1b 00 00     ................
  c0:	85 1b 00 00 85 1b 00 00 85 1b 00 00 85 1b 00 00     ................
  d0:	85 1b 00 00 85 1b 00 00 85 1b 00 00 85 1b 00 00     ................
  e0:	85 1b 00 00 85 1b 00 00 85 1b 00 00 85 1b 00 00     ................
  f0:	85 1b 00 00 85 1b 00 00 85 1b 00 00 85 1b 00 00     ................

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f808 	bl	134 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <__udivmoddi4>:
     134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     138:	4686      	mov	lr, r0
     13a:	468c      	mov	ip, r1
     13c:	4608      	mov	r0, r1
     13e:	9e08      	ldr	r6, [sp, #32]
     140:	4615      	mov	r5, r2
     142:	4674      	mov	r4, lr
     144:	4619      	mov	r1, r3
     146:	2b00      	cmp	r3, #0
     148:	f040 80c2 	bne.w	2d0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x163>
     14c:	4285      	cmp	r5, r0
     14e:	fab2 f282 	clz	r2, r2
     152:	d945      	bls.n	1e0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x73>
     154:	b14a      	cbz	r2, 16a <CONFIG_IDLE_STACK_SIZE+0x2a>
     156:	f1c2 0320 	rsb	r3, r2, #32
     15a:	fa00 fc02 	lsl.w	ip, r0, r2
     15e:	fa2e f303 	lsr.w	r3, lr, r3
     162:	4095      	lsls	r5, r2
     164:	ea43 0c0c 	orr.w	ip, r3, ip
     168:	4094      	lsls	r4, r2
     16a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     16e:	b2a8      	uxth	r0, r5
     170:	fbbc f8fe 	udiv	r8, ip, lr
     174:	0c23      	lsrs	r3, r4, #16
     176:	fb0e cc18 	mls	ip, lr, r8, ip
     17a:	fb08 f900 	mul.w	r9, r8, r0
     17e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     182:	4599      	cmp	r9, r3
     184:	d928      	bls.n	1d8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x6b>
     186:	18eb      	adds	r3, r5, r3
     188:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
     18c:	d204      	bcs.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     18e:	4599      	cmp	r9, r3
     190:	d902      	bls.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     192:	f1a8 0702 	sub.w	r7, r8, #2
     196:	442b      	add	r3, r5
     198:	eba3 0309 	sub.w	r3, r3, r9
     19c:	b2a4      	uxth	r4, r4
     19e:	fbb3 fcfe 	udiv	ip, r3, lr
     1a2:	fb0e 331c 	mls	r3, lr, ip, r3
     1a6:	fb0c f000 	mul.w	r0, ip, r0
     1aa:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1ae:	42a0      	cmp	r0, r4
     1b0:	d914      	bls.n	1dc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x6f>
     1b2:	192c      	adds	r4, r5, r4
     1b4:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     1b8:	d204      	bcs.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1ba:	42a0      	cmp	r0, r4
     1bc:	d902      	bls.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1be:	f1ac 0302 	sub.w	r3, ip, #2
     1c2:	442c      	add	r4, r5
     1c4:	1a24      	subs	r4, r4, r0
     1c6:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
     1ca:	b11e      	cbz	r6, 1d4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x67>
     1cc:	40d4      	lsrs	r4, r2
     1ce:	2300      	movs	r3, #0
     1d0:	6034      	str	r4, [r6, #0]
     1d2:	6073      	str	r3, [r6, #4]
     1d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1d8:	4647      	mov	r7, r8
     1da:	e7dd      	b.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     1dc:	4663      	mov	r3, ip
     1de:	e7f1      	b.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1e0:	bb92      	cbnz	r2, 248 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xdb>
     1e2:	1b43      	subs	r3, r0, r5
     1e4:	2101      	movs	r1, #1
     1e6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1ea:	b2af      	uxth	r7, r5
     1ec:	fbb3 fcfe 	udiv	ip, r3, lr
     1f0:	0c20      	lsrs	r0, r4, #16
     1f2:	fb0e 331c 	mls	r3, lr, ip, r3
     1f6:	fb0c f807 	mul.w	r8, ip, r7
     1fa:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     1fe:	4598      	cmp	r8, r3
     200:	d962      	bls.n	2c8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x15b>
     202:	18eb      	adds	r3, r5, r3
     204:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     208:	d204      	bcs.n	214 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xa7>
     20a:	4598      	cmp	r8, r3
     20c:	d902      	bls.n	214 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xa7>
     20e:	f1ac 0002 	sub.w	r0, ip, #2
     212:	442b      	add	r3, r5
     214:	eba3 0308 	sub.w	r3, r3, r8
     218:	b2a4      	uxth	r4, r4
     21a:	fbb3 fcfe 	udiv	ip, r3, lr
     21e:	fb0e 331c 	mls	r3, lr, ip, r3
     222:	fb0c f707 	mul.w	r7, ip, r7
     226:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     22a:	42a7      	cmp	r7, r4
     22c:	d94e      	bls.n	2cc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x15f>
     22e:	192c      	adds	r4, r5, r4
     230:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     234:	d204      	bcs.n	240 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd3>
     236:	42a7      	cmp	r7, r4
     238:	d902      	bls.n	240 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd3>
     23a:	f1ac 0302 	sub.w	r3, ip, #2
     23e:	442c      	add	r4, r5
     240:	1be4      	subs	r4, r4, r7
     242:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     246:	e7c0      	b.n	1ca <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x5d>
     248:	f1c2 0320 	rsb	r3, r2, #32
     24c:	fa20 f103 	lsr.w	r1, r0, r3
     250:	4095      	lsls	r5, r2
     252:	4090      	lsls	r0, r2
     254:	fa2e f303 	lsr.w	r3, lr, r3
     258:	4303      	orrs	r3, r0
     25a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     25e:	b2af      	uxth	r7, r5
     260:	fbb1 fcfe 	udiv	ip, r1, lr
     264:	fb0e 101c 	mls	r0, lr, ip, r1
     268:	0c19      	lsrs	r1, r3, #16
     26a:	fb0c f807 	mul.w	r8, ip, r7
     26e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     272:	4588      	cmp	r8, r1
     274:	fa04 f402 	lsl.w	r4, r4, r2
     278:	d922      	bls.n	2c0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x153>
     27a:	1869      	adds	r1, r5, r1
     27c:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     280:	d204      	bcs.n	28c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x11f>
     282:	4588      	cmp	r8, r1
     284:	d902      	bls.n	28c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x11f>
     286:	f1ac 0002 	sub.w	r0, ip, #2
     28a:	4429      	add	r1, r5
     28c:	eba1 0108 	sub.w	r1, r1, r8
     290:	b29b      	uxth	r3, r3
     292:	fbb1 fcfe 	udiv	ip, r1, lr
     296:	fb0e 111c 	mls	r1, lr, ip, r1
     29a:	fb0c f707 	mul.w	r7, ip, r7
     29e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     2a2:	429f      	cmp	r7, r3
     2a4:	d90e      	bls.n	2c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x157>
     2a6:	18eb      	adds	r3, r5, r3
     2a8:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     2ac:	d204      	bcs.n	2b8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x14b>
     2ae:	429f      	cmp	r7, r3
     2b0:	d902      	bls.n	2b8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x14b>
     2b2:	f1ac 0102 	sub.w	r1, ip, #2
     2b6:	442b      	add	r3, r5
     2b8:	1bdb      	subs	r3, r3, r7
     2ba:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     2be:	e792      	b.n	1e6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x79>
     2c0:	4660      	mov	r0, ip
     2c2:	e7e3      	b.n	28c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x11f>
     2c4:	4661      	mov	r1, ip
     2c6:	e7f7      	b.n	2b8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x14b>
     2c8:	4660      	mov	r0, ip
     2ca:	e7a3      	b.n	214 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xa7>
     2cc:	4663      	mov	r3, ip
     2ce:	e7b7      	b.n	240 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd3>
     2d0:	4283      	cmp	r3, r0
     2d2:	d906      	bls.n	2e2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x175>
     2d4:	b916      	cbnz	r6, 2dc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x16f>
     2d6:	2100      	movs	r1, #0
     2d8:	4608      	mov	r0, r1
     2da:	e77b      	b.n	1d4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x67>
     2dc:	e9c6 e000 	strd	lr, r0, [r6]
     2e0:	e7f9      	b.n	2d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x169>
     2e2:	fab3 f783 	clz	r7, r3
     2e6:	b98f      	cbnz	r7, 30c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x19f>
     2e8:	4283      	cmp	r3, r0
     2ea:	d301      	bcc.n	2f0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x183>
     2ec:	4572      	cmp	r2, lr
     2ee:	d808      	bhi.n	302 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x195>
     2f0:	ebbe 0402 	subs.w	r4, lr, r2
     2f4:	eb60 0303 	sbc.w	r3, r0, r3
     2f8:	2001      	movs	r0, #1
     2fa:	469c      	mov	ip, r3
     2fc:	b91e      	cbnz	r6, 306 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x199>
     2fe:	2100      	movs	r1, #0
     300:	e768      	b.n	1d4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x67>
     302:	4638      	mov	r0, r7
     304:	e7fa      	b.n	2fc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x18f>
     306:	e9c6 4c00 	strd	r4, ip, [r6]
     30a:	e7f8      	b.n	2fe <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x191>
     30c:	f1c7 0c20 	rsb	ip, r7, #32
     310:	40bb      	lsls	r3, r7
     312:	fa22 f40c 	lsr.w	r4, r2, ip
     316:	431c      	orrs	r4, r3
     318:	fa2e f10c 	lsr.w	r1, lr, ip
     31c:	fa20 f30c 	lsr.w	r3, r0, ip
     320:	40b8      	lsls	r0, r7
     322:	4301      	orrs	r1, r0
     324:	ea4f 4914 	mov.w	r9, r4, lsr #16
     328:	fa0e f507 	lsl.w	r5, lr, r7
     32c:	fbb3 f8f9 	udiv	r8, r3, r9
     330:	fa1f fe84 	uxth.w	lr, r4
     334:	fb09 3018 	mls	r0, r9, r8, r3
     338:	0c0b      	lsrs	r3, r1, #16
     33a:	fb08 fa0e 	mul.w	sl, r8, lr
     33e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     342:	459a      	cmp	sl, r3
     344:	fa02 f207 	lsl.w	r2, r2, r7
     348:	d940      	bls.n	3cc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x25f>
     34a:	18e3      	adds	r3, r4, r3
     34c:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     350:	d204      	bcs.n	35c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1ef>
     352:	459a      	cmp	sl, r3
     354:	d902      	bls.n	35c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1ef>
     356:	f1a8 0002 	sub.w	r0, r8, #2
     35a:	4423      	add	r3, r4
     35c:	eba3 030a 	sub.w	r3, r3, sl
     360:	b289      	uxth	r1, r1
     362:	fbb3 f8f9 	udiv	r8, r3, r9
     366:	fb09 3318 	mls	r3, r9, r8, r3
     36a:	fb08 fe0e 	mul.w	lr, r8, lr
     36e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     372:	458e      	cmp	lr, r1
     374:	d92c      	bls.n	3d0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x263>
     376:	1861      	adds	r1, r4, r1
     378:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     37c:	d204      	bcs.n	388 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x21b>
     37e:	458e      	cmp	lr, r1
     380:	d902      	bls.n	388 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x21b>
     382:	f1a8 0302 	sub.w	r3, r8, #2
     386:	4421      	add	r1, r4
     388:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     38c:	fba0 9802 	umull	r9, r8, r0, r2
     390:	eba1 010e 	sub.w	r1, r1, lr
     394:	4541      	cmp	r1, r8
     396:	46ce      	mov	lr, r9
     398:	4643      	mov	r3, r8
     39a:	d302      	bcc.n	3a2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x235>
     39c:	d106      	bne.n	3ac <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x23f>
     39e:	454d      	cmp	r5, r9
     3a0:	d204      	bcs.n	3ac <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x23f>
     3a2:	ebb9 0e02 	subs.w	lr, r9, r2
     3a6:	eb68 0304 	sbc.w	r3, r8, r4
     3aa:	3801      	subs	r0, #1
     3ac:	2e00      	cmp	r6, #0
     3ae:	d0a6      	beq.n	2fe <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x191>
     3b0:	ebb5 020e 	subs.w	r2, r5, lr
     3b4:	eb61 0103 	sbc.w	r1, r1, r3
     3b8:	fa01 fc0c 	lsl.w	ip, r1, ip
     3bc:	fa22 f307 	lsr.w	r3, r2, r7
     3c0:	ea4c 0303 	orr.w	r3, ip, r3
     3c4:	40f9      	lsrs	r1, r7
     3c6:	e9c6 3100 	strd	r3, r1, [r6]
     3ca:	e798      	b.n	2fe <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x191>
     3cc:	4640      	mov	r0, r8
     3ce:	e7c5      	b.n	35c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1ef>
     3d0:	4643      	mov	r3, r8
     3d2:	e7d9      	b.n	388 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x21b>

000003d4 <button_pressed>:
    But6 = 0;
    But7 = 0;
    But8 = 0;
}

void button_pressed(const struct device *dev, struct gpio_callback *cb, uint32_t pins) {
     3d4:	b538      	push	{r3, r4, r5, lr}
     3d6:	4614      	mov	r4, r2
					       gpio_port_pins_t pins)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	return api->port_toggle_bits(port, pins);
     3d8:	4832      	ldr	r0, [pc, #200]	; (4a4 <CONFIG_FLASH_SIZE+0xa4>)
     3da:	6883      	ldr	r3, [r0, #8]
     3dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
     3e0:	695b      	ldr	r3, [r3, #20]
     3e2:	4798      	blx	r3

    /* Toggle led1 */
	gpio_pin_toggle(gpio0_dev,LED1_PIN);

	/* Identify the button(s) that was(ere) hit*/
	for(i=0; i<sizeof(buttons_pins); i++){		
     3e4:	4a30      	ldr	r2, [pc, #192]	; (4a8 <CONFIG_FLASH_SIZE+0xa8>)
     3e6:	2100      	movs	r1, #0
     3e8:	2001      	movs	r0, #1
		if(BIT(buttons_pins[i]) & pins) {
     3ea:	4613      	mov	r3, r2
     3ec:	f813 5b01 	ldrb.w	r5, [r3], #1
     3f0:	fa24 f505 	lsr.w	r5, r4, r5
     3f4:	07ed      	lsls	r5, r5, #31
     3f6:	d543      	bpl.n	480 <CONFIG_FLASH_SIZE+0x80>
			//printk("Button %d pressed\n\r",i+1);
            switch(i){
     3f8:	3901      	subs	r1, #1
     3fa:	2906      	cmp	r1, #6
     3fc:	d805      	bhi.n	40a <CONFIG_FLASH_SIZE+0xa>
     3fe:	e8df f001 	tbb	[pc, r1]
     402:	1109      	.short	0x1109
     404:	352c231a 	.word	0x352c231a
     408:	43          	.byte	0x43
     409:	00          	.byte	0x00
                case(0):
                    But1 = 1;
     40a:	4a28      	ldr	r2, [pc, #160]	; (4ac <CONFIG_FLASH_SIZE+0xac>)
	for(i=0; i<sizeof(buttons_pins); i++){		
     40c:	2101      	movs	r1, #1
                    But1 = 1;
     40e:	6010      	str	r0, [r2, #0]
void button_pressed(const struct device *dev, struct gpio_callback *cb, uint32_t pins) {
     410:	461a      	mov	r2, r3
     412:	e7ea      	b.n	3ea <button_pressed+0x16>
                break;

                case(1):
                    But2 = 1;
     414:	4926      	ldr	r1, [pc, #152]	; (4b0 <CONFIG_FLASH_SIZE+0xb0>)
     416:	6008      	str	r0, [r1, #0]
		if(BIT(buttons_pins[i]) & pins) {
     418:	7819      	ldrb	r1, [r3, #0]
     41a:	1c93      	adds	r3, r2, #2
     41c:	fa24 f201 	lsr.w	r2, r4, r1
     420:	07d5      	lsls	r5, r2, #31
     422:	d535      	bpl.n	490 <CONFIG_FLASH_SIZE+0x90>
                break;

                case(2):
                    But3 = 1;
     424:	4a23      	ldr	r2, [pc, #140]	; (4b4 <CONFIG_FLASH_SIZE+0xb4>)
     426:	2101      	movs	r1, #1
     428:	6011      	str	r1, [r2, #0]
		if(BIT(buttons_pins[i]) & pins) {
     42a:	f813 2b01 	ldrb.w	r2, [r3], #1
     42e:	fa24 f202 	lsr.w	r2, r4, r2
     432:	07d1      	lsls	r1, r2, #31
     434:	d52e      	bpl.n	494 <CONFIG_FLASH_SIZE+0x94>
                break;

                case(3):
                    But4 = 1;
     436:	4a20      	ldr	r2, [pc, #128]	; (4b8 <CONFIG_FLASH_SIZE+0xb8>)
     438:	2101      	movs	r1, #1
     43a:	6011      	str	r1, [r2, #0]
		if(BIT(buttons_pins[i]) & pins) {
     43c:	f813 2b01 	ldrb.w	r2, [r3], #1
     440:	fa24 f202 	lsr.w	r2, r4, r2
     444:	07d2      	lsls	r2, r2, #31
     446:	d527      	bpl.n	498 <CONFIG_FLASH_SIZE+0x98>
                break;

                case(4):
                    But5 = 1;
     448:	4a1c      	ldr	r2, [pc, #112]	; (4bc <CONFIG_FLASH_SIZE+0xbc>)
     44a:	2101      	movs	r1, #1
     44c:	6011      	str	r1, [r2, #0]
		if(BIT(buttons_pins[i]) & pins) {
     44e:	f813 2b01 	ldrb.w	r2, [r3], #1
     452:	fa24 f202 	lsr.w	r2, r4, r2
     456:	07d5      	lsls	r5, r2, #31
     458:	d520      	bpl.n	49c <CONFIG_FLASH_SIZE+0x9c>
                break;

                case(5):
                    But6 = 1;
     45a:	4a19      	ldr	r2, [pc, #100]	; (4c0 <CONFIG_FLASH_SIZE+0xc0>)
     45c:	2101      	movs	r1, #1
     45e:	6011      	str	r1, [r2, #0]
		if(BIT(buttons_pins[i]) & pins) {
     460:	f813 2b01 	ldrb.w	r2, [r3], #1
     464:	fa24 f202 	lsr.w	r2, r4, r2
     468:	07d1      	lsls	r1, r2, #31
     46a:	d519      	bpl.n	4a0 <CONFIG_FLASH_SIZE+0xa0>
                break;

                case(6):
                    But7 = 1;
     46c:	4a15      	ldr	r2, [pc, #84]	; (4c4 <CONFIG_FLASH_SIZE+0xc4>)
     46e:	2101      	movs	r1, #1
     470:	6011      	str	r1, [r2, #0]
		if(BIT(buttons_pins[i]) & pins) {
     472:	781a      	ldrb	r2, [r3, #0]
     474:	fa24 f202 	lsr.w	r2, r4, r2
     478:	07d2      	lsls	r2, r2, #31
     47a:	d405      	bmi.n	488 <CONFIG_FLASH_SIZE+0x88>
     47c:	440b      	add	r3, r1
	for(i=0; i<sizeof(buttons_pins); i++){		
     47e:	2107      	movs	r1, #7
     480:	3101      	adds	r1, #1
     482:	2908      	cmp	r1, #8
     484:	d1c4      	bne.n	410 <CONFIG_FLASH_SIZE+0x10>
     486:	e002      	b.n	48e <CONFIG_FLASH_SIZE+0x8e>
                break;

                case(7):
                    But8 = 1;
     488:	4b0f      	ldr	r3, [pc, #60]	; (4c8 <CONFIG_FLASH_SIZE+0xc8>)
     48a:	2201      	movs	r2, #1
     48c:	601a      	str	r2, [r3, #0]
                break;
            }
		}
	}

}
     48e:	bd38      	pop	{r3, r4, r5, pc}
	for(i=0; i<sizeof(buttons_pins); i++){		
     490:	2102      	movs	r1, #2
     492:	e7f5      	b.n	480 <CONFIG_FLASH_SIZE+0x80>
     494:	2103      	movs	r1, #3
     496:	e7f3      	b.n	480 <CONFIG_FLASH_SIZE+0x80>
     498:	2104      	movs	r1, #4
     49a:	e7f1      	b.n	480 <CONFIG_FLASH_SIZE+0x80>
     49c:	2105      	movs	r1, #5
     49e:	e7ef      	b.n	480 <CONFIG_FLASH_SIZE+0x80>
     4a0:	2106      	movs	r1, #6
     4a2:	e7ed      	b.n	480 <CONFIG_FLASH_SIZE+0x80>
     4a4:	000059b0 	.word	0x000059b0
     4a8:	00006743 	.word	0x00006743
     4ac:	200002ec 	.word	0x200002ec
     4b0:	200002e8 	.word	0x200002e8
     4b4:	200002e4 	.word	0x200002e4
     4b8:	200002e0 	.word	0x200002e0
     4bc:	200002dc 	.word	0x200002dc
     4c0:	200002d8 	.word	0x200002d8
     4c4:	200002d4 	.word	0x200002d4
     4c8:	200002d0 	.word	0x200002d0

000004cc <reset_Buttons>:
    But1 = 0;
     4cc:	4a08      	ldr	r2, [pc, #32]	; (4f0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8>)
     4ce:	2300      	movs	r3, #0
     4d0:	6013      	str	r3, [r2, #0]
    But2 = 0;
     4d2:	4a08      	ldr	r2, [pc, #32]	; (4f4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc>)
     4d4:	6013      	str	r3, [r2, #0]
    But3 = 0;
     4d6:	4a08      	ldr	r2, [pc, #32]	; (4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>)
     4d8:	6013      	str	r3, [r2, #0]
    But4 = 0;
     4da:	4a08      	ldr	r2, [pc, #32]	; (4fc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x14>)
     4dc:	6013      	str	r3, [r2, #0]
    But5 = 0;
     4de:	4a08      	ldr	r2, [pc, #32]	; (500 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x18>)
     4e0:	6013      	str	r3, [r2, #0]
    But6 = 0;
     4e2:	4a08      	ldr	r2, [pc, #32]	; (504 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c>)
     4e4:	6013      	str	r3, [r2, #0]
    But7 = 0;
     4e6:	4a08      	ldr	r2, [pc, #32]	; (508 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x20>)
     4e8:	6013      	str	r3, [r2, #0]
    But8 = 0;
     4ea:	4a08      	ldr	r2, [pc, #32]	; (50c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x24>)
     4ec:	6013      	str	r3, [r2, #0]
}
     4ee:	4770      	bx	lr
     4f0:	200002ec 	.word	0x200002ec
     4f4:	200002e8 	.word	0x200002e8
     4f8:	200002e4 	.word	0x200002e4
     4fc:	200002e0 	.word	0x200002e0
     500:	200002dc 	.word	0x200002dc
     504:	200002d8 	.word	0x200002d8
     508:	200002d4 	.word	0x200002d4
     50c:	200002d0 	.word	0x200002d0

00000510 <config>:

void config(void) {
     510:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    
	int ret, i;
	uint32_t pinmask = 0; /* Mask for setting the pins that shall generate interrupts */
	
	/* Welcome message */
	printk("Digital IO accessing IO pins not set via DT (external buttons in the case) \n\r");
     514:	4848      	ldr	r0, [pc, #288]	; (638 <config+0x128>)
     516:	f004 fc1e 	bl	4d56 <printk>
	printk("Hit buttons 1-8 (1...4 internal, 5-8 external connected to A0...A3). Led toggles and button ID printed at console \n\r");
     51a:	4848      	ldr	r0, [pc, #288]	; (63c <config+0x12c>)
     51c:	f004 fc1b 	bl	4d56 <printk>
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     520:	f8df b11c 	ldr.w	fp, [pc, #284]	; 640 <config+0x130>
     524:	4658      	mov	r0, fp
     526:	f005 f883 	bl	5630 <z_device_is_ready>

	/* Check if gpio0 device is ready */
	if (!device_is_ready(gpio0_dev)) {
     52a:	b928      	cbnz	r0, 538 <config+0x28>
		printk("Error: gpio0 device is not ready\n");
     52c:	4845      	ldr	r0, [pc, #276]	; (644 <config+0x134>)
    gpio_init_callback(&button_cb_data, button_pressed, pinmask); 	
	
	/* Add the callback function by calling gpio_add_callback()   */
	gpio_add_callback(gpio0_dev, &button_cb_data);

}
     52e:	b001      	add	sp, #4
     530:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printk("Error: gpio0 device is not ready\n");
     534:	f004 bc0f 	b.w	4d56 <printk>
		printk("Success: gpio0 device is ready\n");
     538:	4843      	ldr	r0, [pc, #268]	; (648 <config+0x138>)
     53a:	f004 fc0c 	bl	4d56 <printk>
	struct gpio_driver_data *data =
     53e:	f8db 2010 	ldr.w	r2, [fp, #16]
	const struct gpio_driver_api *api =
     542:	f8db 1008 	ldr.w	r1, [fp, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
     546:	6813      	ldr	r3, [r2, #0]
     548:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
     54c:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
     54e:	4658      	mov	r0, fp
     550:	680b      	ldr	r3, [r1, #0]
     552:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
     556:	210d      	movs	r1, #13
     558:	4798      	blx	r3
	if (ret < 0) {
     55a:	1e01      	subs	r1, r0, #0
     55c:	da05      	bge.n	56a <config+0x5a>
		printk("Error: gpio_pin_configure failed for led1, error:%d\n\r", ret);
     55e:	483b      	ldr	r0, [pc, #236]	; (64c <config+0x13c>)
}
     560:	b001      	add	sp, #4
     562:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printk("Error: gpio_pin_configure failed for led1, error:%d\n\r", ret);
     566:	f004 bbf6 	b.w	4d56 <printk>
     56a:	4e39      	ldr	r6, [pc, #228]	; (650 <config+0x140>)
     56c:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 654 <config+0x144>
	if (ret < 0) {
     570:	46b0      	mov	r8, r6
	for(i=0; i<sizeof(buttons_pins); i++) {
     572:	2400      	movs	r4, #0
		ret = gpio_pin_configure(gpio0_dev, buttons_pins[i], GPIO_INPUT | GPIO_PULL_UP);
     574:	f818 9b01 	ldrb.w	r9, [r8], #1
	struct gpio_driver_data *data =
     578:	f8db 7010 	ldr.w	r7, [fp, #16]
	const struct gpio_driver_api *api =
     57c:	f8db 5008 	ldr.w	r5, [fp, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
     580:	683b      	ldr	r3, [r7, #0]
     582:	2201      	movs	r2, #1
     584:	fa02 f209 	lsl.w	r2, r2, r9
     588:	ea23 0302 	bic.w	r3, r3, r2
     58c:	603b      	str	r3, [r7, #0]
	return api->pin_configure(port, pin, flags);
     58e:	4652      	mov	r2, sl
     590:	682b      	ldr	r3, [r5, #0]
     592:	4649      	mov	r1, r9
     594:	4658      	mov	r0, fp
     596:	4798      	blx	r3
			printk("Error: gpio_pin_configure failed for button %d/pin %d, error:%d\n\r", i+1,buttons_pins[i], ret);
     598:	3401      	adds	r4, #1
		if (ret < 0) {
     59a:	1e03      	subs	r3, r0, #0
			printk("Error: gpio_pin_configure failed for button %d/pin %d, error:%d\n\r", i+1,buttons_pins[i], ret);
     59c:	464a      	mov	r2, r9
     59e:	4621      	mov	r1, r4
		if (ret < 0) {
     5a0:	da05      	bge.n	5ae <config+0x9e>
			printk("Error: gpio_pin_configure failed for button %d/pin %d, error:%d\n\r", i+1,buttons_pins[i], ret);
     5a2:	482d      	ldr	r0, [pc, #180]	; (658 <config+0x148>)
}
     5a4:	b001      	add	sp, #4
     5a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			printk("Error: gpio_pin_interrupt_configure failed for button %d / pin %d, error:%d", i+1, buttons_pins[i], ret);
     5aa:	f004 bbd4 	b.w	4d56 <printk>
			printk("Success: gpio_pin_configure for button %d/pin %d\n\r", i+1,buttons_pins[i]);
     5ae:	482b      	ldr	r0, [pc, #172]	; (65c <config+0x14c>)
     5b0:	f004 fbd1 	bl	4d56 <printk>
	for(i=0; i<sizeof(buttons_pins); i++) {
     5b4:	2c08      	cmp	r4, #8
     5b6:	d1dd      	bne.n	574 <config+0x64>
     5b8:	4c25      	ldr	r4, [pc, #148]	; (650 <config+0x140>)
	return api->pin_interrupt_configure(port, pin, mode, trig);
     5ba:	f8df b084 	ldr.w	fp, [pc, #132]	; 640 <config+0x130>
	for(i=0; i<sizeof(buttons_pins); i++) {
     5be:	f04f 0800 	mov.w	r8, #0
		ret = gpio_pin_interrupt_configure(gpio0_dev, buttons_pins[i], GPIO_INT_EDGE_TO_ACTIVE );
     5c2:	f814 ab01 	ldrb.w	sl, [r4], #1
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
     5c6:	f04f 0901 	mov.w	r9, #1
     5ca:	683b      	ldr	r3, [r7, #0]
	return api->pin_interrupt_configure(port, pin, mode, trig);
     5cc:	f8d5 c018 	ldr.w	ip, [r5, #24]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
     5d0:	fa09 f20a 	lsl.w	r2, r9, sl
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
     5d4:	421a      	tst	r2, r3
	return api->pin_interrupt_configure(port, pin, mode, trig);
     5d6:	bf14      	ite	ne
     5d8:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
     5dc:	f04f 6380 	moveq.w	r3, #67108864	; 0x4000000
     5e0:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
     5e4:	4651      	mov	r1, sl
     5e6:	4658      	mov	r0, fp
     5e8:	47e0      	blx	ip
		if (ret < 0) {
     5ea:	1e03      	subs	r3, r0, #0
			printk("Error: gpio_pin_interrupt_configure failed for button %d / pin %d, error:%d", i+1, buttons_pins[i], ret);
     5ec:	44c8      	add	r8, r9
		if (ret < 0) {
     5ee:	da03      	bge.n	5f8 <config+0xe8>
			printk("Error: gpio_pin_interrupt_configure failed for button %d / pin %d, error:%d", i+1, buttons_pins[i], ret);
     5f0:	481b      	ldr	r0, [pc, #108]	; (660 <config+0x150>)
     5f2:	4652      	mov	r2, sl
     5f4:	4641      	mov	r1, r8
     5f6:	e7d5      	b.n	5a4 <config+0x94>
	for(i=0; i<sizeof(buttons_pins); i++) {
     5f8:	f1b8 0f08 	cmp.w	r8, #8
     5fc:	d1e1      	bne.n	5c2 <config+0xb2>
	printk("All devices initialized sucesfully!\n\r");
     5fe:	4819      	ldr	r0, [pc, #100]	; (664 <config+0x154>)
     600:	f004 fba9 	bl	4d56 <printk>
	pinmask=0;
     604:	2300      	movs	r3, #0
	for(i=0; i<sizeof(buttons_pins); i++) {
     606:	461a      	mov	r2, r3
		pinmask |= BIT(buttons_pins[i]);
     608:	f816 1b01 	ldrb.w	r1, [r6], #1
	for(i=0; i<sizeof(buttons_pins); i++) {
     60c:	3201      	adds	r2, #1
		pinmask |= BIT(buttons_pins[i]);
     60e:	fa09 f101 	lsl.w	r1, r9, r1
	for(i=0; i<sizeof(buttons_pins); i++) {
     612:	2a08      	cmp	r2, #8
		pinmask |= BIT(buttons_pins[i]);
     614:	ea43 0301 	orr.w	r3, r3, r1
	for(i=0; i<sizeof(buttons_pins); i++) {
     618:	d1f6      	bne.n	608 <config+0xf8>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
     61a:	4913      	ldr	r1, [pc, #76]	; (668 <config+0x158>)
     61c:	4a13      	ldr	r2, [pc, #76]	; (66c <config+0x15c>)
	callback->pin_mask = pin_mask;
     61e:	e9c1 2301 	strd	r2, r3, [r1, #4]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
     622:	69eb      	ldr	r3, [r5, #28]
     624:	b12b      	cbz	r3, 632 <config+0x122>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
     626:	4806      	ldr	r0, [pc, #24]	; (640 <config+0x130>)
     628:	2201      	movs	r2, #1
}
     62a:	b001      	add	sp, #4
     62c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     630:	4718      	bx	r3
     632:	b001      	add	sp, #4
     634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     638:	00005d8c 	.word	0x00005d8c
     63c:	00005dda 	.word	0x00005dda
     640:	000059b0 	.word	0x000059b0
     644:	00005e4f 	.word	0x00005e4f
     648:	00005e71 	.word	0x00005e71
     64c:	00005e91 	.word	0x00005e91
     650:	00006743 	.word	0x00006743
     654:	00010010 	.word	0x00010010
     658:	00005ec7 	.word	0x00005ec7
     65c:	00005f09 	.word	0x00005f09
     660:	00005f3c 	.word	0x00005f3c
     664:	00005f88 	.word	0x00005f88
     668:	200002f0 	.word	0x200002f0
     66c:	000003d5 	.word	0x000003d5

00000670 <StateMachine>:

void StateMachine(void) {
     670:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        {21,12}
    };
    
    int state = MENU;
    int saldo = 0;
    int select = 0;
     674:	2500      	movs	r5, #0
     676:	f8df 92a4 	ldr.w	r9, [pc, #676]	; 91c <CONFIG_ISR_STACK_SIZE+0x11c>
     67a:	4fa9      	ldr	r7, [pc, #676]	; (920 <CONFIG_ISR_STACK_SIZE+0x120>)
    int saldo = 0;
     67c:	462c      	mov	r4, r5
    int state = MENU;
     67e:	2602      	movs	r6, #2


    while(1) {
        k_msleep(SLEEP_TIME_MS);
     680:	f44f 7096 	mov.w	r0, #300	; 0x12c
     684:	f004 fb2e 	bl	4ce4 <k_msleep.isra.0>
        switch(state){
     688:	2e01      	cmp	r6, #1
     68a:	f8df 8298 	ldr.w	r8, [pc, #664]	; 924 <CONFIG_ISR_STACK_SIZE+0x124>
     68e:	f8df a298 	ldr.w	sl, [pc, #664]	; 928 <CONFIG_ISR_STACK_SIZE+0x128>
     692:	f8df b298 	ldr.w	fp, [pc, #664]	; 92c <CONFIG_ISR_STACK_SIZE+0x12c>
     696:	f000 81f9 	beq.w	a8c <CONFIG_ISR_STACK_SIZE+0x28c>
     69a:	2e02      	cmp	r6, #2
     69c:	d16b      	bne.n	776 <StateMachine+0x106>
            case MENU:
                printk("\033[2J\033[H");
     69e:	48a4      	ldr	r0, [pc, #656]	; (930 <CONFIG_ISR_STACK_SIZE+0x130>)
     6a0:	f004 fb59 	bl	4d56 <printk>
                if(select == 0) {   //menu filme A selecionado
     6a4:	2d00      	cmp	r5, #0
     6a6:	d13c      	bne.n	722 <StateMachine+0xb2>
                    printk("------------------------Cinema 3000------------------------\n\n\r -> Filme A\n\n\r    Filme B\n\n\r Saldo:%d euros\n\n\n\r",saldo);
     6a8:	48a2      	ldr	r0, [pc, #648]	; (934 <CONFIG_ISR_STACK_SIZE+0x134>)
     6aa:	4621      	mov	r1, r4
     6ac:	f004 fb53 	bl	4d56 <printk>
                }
                if(select == 1) {   //menu filme B selecionado
                    printk("------------------------Cinema 3000------------------------\n\n\r    Filme A\n\n\r -> Filme B\n\n\r Saldo:%d euros\n\n\n\r",saldo);
                }
                                
                if(But1) {          //UP mudar select
     6b0:	f8d9 3000 	ldr.w	r3, [r9]
     6b4:	2b00      	cmp	r3, #0
     6b6:	d156      	bne.n	766 <StateMachine+0xf6>
                    if(select == 1) {
                        select=0;
                    }
                    reset_Buttons();
                }
                if(But2) {          //DOWN mudar select
     6b8:	683b      	ldr	r3, [r7, #0]
     6ba:	2b00      	cmp	r3, #0
     6bc:	d159      	bne.n	772 <StateMachine+0x102>
                    if(select == 0) {
                        select=1;
                    }
                    reset_Buttons();
                }
                if(But3) {          //Select
     6be:	f8d8 3000 	ldr.w	r3, [r8]
     6c2:	2b00      	cmp	r3, #0
     6c4:	d03f      	beq.n	746 <StateMachine+0xd6>
                    if(select == 0){
     6c6:	1e2e      	subs	r6, r5, #0
     6c8:	bf18      	it	ne
     6ca:	2601      	movne	r6, #1
                        select = 0;
                    }else{
                        state = MOVIE_B;
                        select = 0;
                    }
                    reset_Buttons();
     6cc:	f7ff fefe 	bl	4cc <reset_Buttons>
     6d0:	2500      	movs	r5, #0
                }
                if(But4) {          //Return 
     6d2:	4b99      	ldr	r3, [pc, #612]	; (938 <CONFIG_ISR_STACK_SIZE+0x138>)
     6d4:	681b      	ldr	r3, [r3, #0]
     6d6:	b153      	cbz	r3, 6ee <StateMachine+0x7e>
                    printk("%d euros devolvidos",saldo);
     6d8:	4621      	mov	r1, r4
     6da:	4898      	ldr	r0, [pc, #608]	; (93c <CONFIG_ISR_STACK_SIZE+0x13c>)
     6dc:	f004 fb3b 	bl	4d56 <printk>
                    saldo = 0;
                    reset_Buttons();
                    k_msleep(SLEEP_TIME_MS*3);
     6e0:	f44f 7061 	mov.w	r0, #900	; 0x384
                    reset_Buttons();
     6e4:	f7ff fef2 	bl	4cc <reset_Buttons>
                    k_msleep(SLEEP_TIME_MS*3);
     6e8:	f004 fafc 	bl	4ce4 <k_msleep.isra.0>
                    saldo = 0;
     6ec:	2400      	movs	r4, #0
                }
                if(But5) {          //1 euro
     6ee:	4b94      	ldr	r3, [pc, #592]	; (940 <CONFIG_ISR_STACK_SIZE+0x140>)
     6f0:	681b      	ldr	r3, [r3, #0]
     6f2:	b113      	cbz	r3, 6fa <StateMachine+0x8a>
                    saldo++;
     6f4:	3401      	adds	r4, #1
                    reset_Buttons();
     6f6:	f7ff fee9 	bl	4cc <reset_Buttons>
                }
                if(But6) {          //2 euros
     6fa:	4b92      	ldr	r3, [pc, #584]	; (944 <CONFIG_ISR_STACK_SIZE+0x144>)
     6fc:	681b      	ldr	r3, [r3, #0]
     6fe:	b113      	cbz	r3, 706 <StateMachine+0x96>
                    saldo += 2;
     700:	3402      	adds	r4, #2
                    reset_Buttons();
     702:	f7ff fee3 	bl	4cc <reset_Buttons>
                }
                if(But7) {          //5 euros
     706:	f8da 3000 	ldr.w	r3, [sl]
     70a:	b113      	cbz	r3, 712 <StateMachine+0xa2>
                    saldo += 5;
     70c:	3405      	adds	r4, #5
                    reset_Buttons();
     70e:	f7ff fedd 	bl	4cc <reset_Buttons>
                }
                if(But8) {          //10 euros
     712:	f8db 3000 	ldr.w	r3, [fp]
     716:	2b00      	cmp	r3, #0
     718:	d0b2      	beq.n	680 <StateMachine+0x10>
                    saldo += 10;
     71a:	340a      	adds	r4, #10
                    reset_Buttons();
     71c:	f7ff fed6 	bl	4cc <reset_Buttons>
     720:	e7ae      	b.n	680 <StateMachine+0x10>
                if(select == 1) {   //menu filme B selecionado
     722:	2d01      	cmp	r5, #1
     724:	d111      	bne.n	74a <StateMachine+0xda>
                    printk("------------------------Cinema 3000------------------------\n\n\r    Filme A\n\n\r -> Filme B\n\n\r Saldo:%d euros\n\n\n\r",saldo);
     726:	4888      	ldr	r0, [pc, #544]	; (948 <CONFIG_ISR_STACK_SIZE+0x148>)
     728:	4621      	mov	r1, r4
     72a:	f004 fb14 	bl	4d56 <printk>
                if(But1) {          //UP mudar select
     72e:	f8d9 3000 	ldr.w	r3, [r9]
     732:	2b00      	cmp	r3, #0
     734:	d0c0      	beq.n	6b8 <StateMachine+0x48>
                    reset_Buttons();
     736:	f7ff fec9 	bl	4cc <reset_Buttons>
                if(But2) {          //DOWN mudar select
     73a:	683e      	ldr	r6, [r7, #0]
     73c:	b9ce      	cbnz	r6, 772 <StateMachine+0x102>
                if(But3) {          //Select
     73e:	f8d8 5000 	ldr.w	r5, [r8]
     742:	2d00      	cmp	r5, #0
     744:	d1c2      	bne.n	6cc <StateMachine+0x5c>
     746:	2602      	movs	r6, #2
     748:	e7c3      	b.n	6d2 <StateMachine+0x62>
                if(But1) {          //UP mudar select
     74a:	f8d9 3000 	ldr.w	r3, [r9]
     74e:	b96b      	cbnz	r3, 76c <StateMachine+0xfc>
                if(But2) {          //DOWN mudar select
     750:	683b      	ldr	r3, [r7, #0]
     752:	2b00      	cmp	r3, #0
     754:	d0b3      	beq.n	6be <StateMachine+0x4e>
                    reset_Buttons();
     756:	f7ff feb9 	bl	4cc <reset_Buttons>
                if(But3) {          //Select
     75a:	f8d8 3000 	ldr.w	r3, [r8]
     75e:	2b00      	cmp	r3, #0
     760:	d0f1      	beq.n	746 <StateMachine+0xd6>
                        state = MOVIE_B;
     762:	2601      	movs	r6, #1
     764:	e7b2      	b.n	6cc <StateMachine+0x5c>
                    reset_Buttons();
     766:	f7ff feb1 	bl	4cc <reset_Buttons>
     76a:	e7a5      	b.n	6b8 <StateMachine+0x48>
     76c:	f7ff feae 	bl	4cc <reset_Buttons>
     770:	e7ee      	b.n	750 <StateMachine+0xe0>
                        select=1;
     772:	2501      	movs	r5, #1
     774:	e7ef      	b.n	756 <StateMachine+0xe6>
                }

            break;

            case MOVIE_A:
                printk("\033[2J\033[H");
     776:	486e      	ldr	r0, [pc, #440]	; (930 <CONFIG_ISR_STACK_SIZE+0x130>)
     778:	f004 faed 	bl	4d56 <printk>
                if(select == 0) {   //menu filme A selecionado
     77c:	bb3d      	cbnz	r5, 7ce <StateMachine+0x15e>
                    printk("------------------------Cinema 3000------------------------\n\n\r  Filme A\n\n\r    Sessao : -> 19 horas  %d euros\n\n\r                21 horas  %d euros\n\n\r                23 horas  %d euros\n\n\r                Voltar atras\n\n\r Saldo:%d euros\n\n\n\r",movie_a[h_19].custo,movie_a[h_21].custo,movie_a[h_23].custo,saldo);
     77e:	2309      	movs	r3, #9
     780:	4619      	mov	r1, r3
     782:	4872      	ldr	r0, [pc, #456]	; (94c <CONFIG_ISR_STACK_SIZE+0x14c>)
     784:	9400      	str	r4, [sp, #0]
     786:	220b      	movs	r2, #11
     788:	f004 fae5 	bl	4d56 <printk>
                    printk("------------------------Cinema 3000------------------------\n\n\r  Filme A\n\n\r    Sessao :    19 horas  %d euros\n\n\r                21 horas  %d euros\n\n\r             -> 23 horas  %d euros\n\n\r                Voltar atras\n\n\r Saldo:%d euros\n\n\n\r",movie_a[h_19].custo,movie_a[h_21].custo,movie_a[h_23].custo,saldo);
                }
                if(select == 3) {
                    printk("------------------------Cinema 3000------------------------\n\n\r  Filme A\n\n\r    Sessao :    19 horas  %d euros\n\n\r                21 horas  %d euros\n\n\r                23 horas  %d euros\n\n\r             -> Voltar atras\n\n\r Saldo:%d euros\n\n\n\r",movie_a[h_19].custo,movie_a[h_21].custo,movie_a[h_23].custo,saldo);
                }
                if(But1) {          //UP mudar select
     78c:	f8d9 3000 	ldr.w	r3, [r9]
     790:	2b00      	cmp	r3, #0
     792:	f040 80a8 	bne.w	8e6 <CONFIG_ISR_STACK_SIZE+0xe6>
                    if((select == 1) || (select == 2) || (select == 3)) {
                        select--;
                    }
                    reset_Buttons();
                }
                if(But2) {          //DOWN mudar select
     796:	683d      	ldr	r5, [r7, #0]
     798:	2d00      	cmp	r5, #0
     79a:	f040 80b5 	bne.w	908 <CONFIG_ISR_STACK_SIZE+0x108>
                    if((select == 0) || (select == 1) || (select == 2))  {
                        select++;
                    }
                    reset_Buttons();
                }
                if(But3) {          //Select
     79e:	f8d8 6000 	ldr.w	r6, [r8]
     7a2:	2e00      	cmp	r6, #0
     7a4:	d04b      	beq.n	83e <CONFIG_ISR_STACK_SIZE+0x3e>
                    if(select == 0){
     7a6:	2d00      	cmp	r5, #0
     7a8:	f040 80dc 	bne.w	964 <CONFIG_ISR_STACK_SIZE+0x164>
                        if(saldo >= movie_a[h_19].custo){
     7ac:	2c08      	cmp	r4, #8
     7ae:	f340 80ad 	ble.w	90c <CONFIG_ISR_STACK_SIZE+0x10c>
                            saldo -= movie_a[h_19].custo;
     7b2:	3c09      	subs	r4, #9
                            state = 0;
                            state = MENU;
                            printk("Bilhete comprado para Filme A as %d horas.\n\rSaldo:%d\n\n\r",movie_a[h_19].horas, saldo);
     7b4:	4866      	ldr	r0, [pc, #408]	; (950 <CONFIG_ISR_STACK_SIZE+0x150>)
     7b6:	4622      	mov	r2, r4
     7b8:	2113      	movs	r1, #19
     7ba:	f004 facc 	bl	4d56 <printk>
                    }
                    if(select == 2){
                        if(saldo >= movie_a[h_23].custo){
                            saldo -= movie_a[h_23].custo;
                            select = 0;
                            state = MENU;
     7be:	2602      	movs	r6, #2
                            printk("Bilhete comprado para Filme A as %d horas.\n\rSaldo:%d\n\n\r",movie_a[h_23].horas, saldo);
                        }else{
                            printk("Saldo insuficiente. Inserir %d euros\n\n\r",(movie_a[h_23].custo-saldo));
                        }
                        k_msleep(SLEEP_TIME_MS*3);
     7c0:	f44f 7061 	mov.w	r0, #900	; 0x384
     7c4:	f004 fa8e 	bl	4ce4 <k_msleep.isra.0>
                    }
                    if(select == 3){
                        select = 0;
                        state = MENU;
                    }
                    reset_Buttons();
     7c8:	f7ff fe80 	bl	4cc <reset_Buttons>
     7cc:	e037      	b.n	83e <CONFIG_ISR_STACK_SIZE+0x3e>
                if(select == 1) {   //menu filme B selecionado
     7ce:	2d01      	cmp	r5, #1
     7d0:	d11e      	bne.n	810 <CONFIG_ISR_STACK_SIZE+0x10>
                    printk("------------------------Cinema 3000------------------------\n\n\r  Filme A\n\n\r    Sessao :    19 horas  %d euros\n\n\r             -> 21 horas  %d euros\n\n\r                23 horas  %d euros\n\n\r                Voltar atras\n\n\r Saldo:%d euros\n\n\n\r",movie_a[h_19].custo,movie_a[h_21].custo,movie_a[h_23].custo,saldo);
     7d2:	2309      	movs	r3, #9
     7d4:	4619      	mov	r1, r3
     7d6:	485f      	ldr	r0, [pc, #380]	; (954 <CONFIG_ISR_STACK_SIZE+0x154>)
     7d8:	9400      	str	r4, [sp, #0]
     7da:	220b      	movs	r2, #11
     7dc:	f004 fabb 	bl	4d56 <printk>
                if(But1) {          //UP mudar select
     7e0:	f8d9 3000 	ldr.w	r3, [r9]
     7e4:	bb03      	cbnz	r3, 828 <CONFIG_ISR_STACK_SIZE+0x28>
                if(But2) {          //DOWN mudar select
     7e6:	683b      	ldr	r3, [r7, #0]
     7e8:	2b00      	cmp	r3, #0
     7ea:	d0d8      	beq.n	79e <StateMachine+0x12e>
                    reset_Buttons();
     7ec:	f7ff fe6e 	bl	4cc <reset_Buttons>
                if(But3) {          //Select
     7f0:	f8d8 6000 	ldr.w	r6, [r8]
                        select++;
     7f4:	3501      	adds	r5, #1
                if(But3) {          //Select
     7f6:	b316      	cbz	r6, 83e <CONFIG_ISR_STACK_SIZE+0x3e>
                    if(select == 1){
     7f8:	2d01      	cmp	r5, #1
     7fa:	f000 80b5 	beq.w	968 <CONFIG_ISR_STACK_SIZE+0x168>
                    if(select == 2){
     7fe:	2d02      	cmp	r5, #2
     800:	d15d      	bne.n	8be <CONFIG_ISR_STACK_SIZE+0xbe>
                        if(saldo >= movie_a[h_23].custo){
     802:	2c08      	cmp	r4, #8
     804:	f340 80c5 	ble.w	992 <CONFIG_ISR_STACK_SIZE+0x192>
                            saldo -= movie_a[h_23].custo;
     808:	3c09      	subs	r4, #9
                            printk("Bilhete comprado para Filme A as %d horas.\n\rSaldo:%d\n\n\r",movie_a[h_23].horas, saldo);
     80a:	4622      	mov	r2, r4
     80c:	2117      	movs	r1, #23
     80e:	e0b0      	b.n	972 <CONFIG_ISR_STACK_SIZE+0x172>
                if(select == 2) {
     810:	2d02      	cmp	r5, #2
     812:	d13f      	bne.n	894 <CONFIG_ISR_STACK_SIZE+0x94>
                    printk("------------------------Cinema 3000------------------------\n\n\r  Filme A\n\n\r    Sessao :    19 horas  %d euros\n\n\r                21 horas  %d euros\n\n\r             -> 23 horas  %d euros\n\n\r                Voltar atras\n\n\r Saldo:%d euros\n\n\n\r",movie_a[h_19].custo,movie_a[h_21].custo,movie_a[h_23].custo,saldo);
     814:	2309      	movs	r3, #9
     816:	4619      	mov	r1, r3
     818:	484f      	ldr	r0, [pc, #316]	; (958 <CONFIG_ISR_STACK_SIZE+0x158>)
     81a:	9400      	str	r4, [sp, #0]
     81c:	220b      	movs	r2, #11
     81e:	f004 fa9a 	bl	4d56 <printk>
                if(But1) {          //UP mudar select
     822:	f8d9 3000 	ldr.w	r3, [r9]
     826:	b11b      	cbz	r3, 830 <CONFIG_ISR_STACK_SIZE+0x30>
                        select--;
     828:	3d01      	subs	r5, #1
                    reset_Buttons();
     82a:	f7ff fe4f 	bl	4cc <reset_Buttons>
                if(But2) {          //DOWN mudar select
     82e:	e7da      	b.n	7e6 <StateMachine+0x176>
     830:	683b      	ldr	r3, [r7, #0]
     832:	2b00      	cmp	r3, #0
     834:	d160      	bne.n	8f8 <CONFIG_ISR_STACK_SIZE+0xf8>
                if(But3) {          //Select
     836:	f8d8 6000 	ldr.w	r6, [r8]
     83a:	2e00      	cmp	r6, #0
     83c:	d1e1      	bne.n	802 <CONFIG_ISR_STACK_SIZE+0x2>
                }
                if(But4) {          //Return 
     83e:	4b3e      	ldr	r3, [pc, #248]	; (938 <CONFIG_ISR_STACK_SIZE+0x138>)
     840:	681b      	ldr	r3, [r3, #0]
     842:	b153      	cbz	r3, 85a <CONFIG_ISR_STACK_SIZE+0x5a>
                    printk("%d euros devolvidos",saldo);
     844:	4621      	mov	r1, r4
     846:	483d      	ldr	r0, [pc, #244]	; (93c <CONFIG_ISR_STACK_SIZE+0x13c>)
     848:	f004 fa85 	bl	4d56 <printk>
                    saldo = 0;
                    reset_Buttons();
                    k_msleep(SLEEP_TIME_MS*3);
     84c:	f44f 7061 	mov.w	r0, #900	; 0x384
                    reset_Buttons();
     850:	f7ff fe3c 	bl	4cc <reset_Buttons>
                    k_msleep(SLEEP_TIME_MS*3);
     854:	f004 fa46 	bl	4ce4 <k_msleep.isra.0>
                    saldo = 0;
     858:	2400      	movs	r4, #0
                }
                if(But5) {          //1 euro
     85a:	4b39      	ldr	r3, [pc, #228]	; (940 <CONFIG_ISR_STACK_SIZE+0x140>)
     85c:	681b      	ldr	r3, [r3, #0]
     85e:	b113      	cbz	r3, 866 <CONFIG_ISR_STACK_SIZE+0x66>
                    saldo++;
     860:	3401      	adds	r4, #1
                    reset_Buttons();
     862:	f7ff fe33 	bl	4cc <reset_Buttons>
                }
                if(But6) {          //2 euros
     866:	4b37      	ldr	r3, [pc, #220]	; (944 <CONFIG_ISR_STACK_SIZE+0x144>)
     868:	681b      	ldr	r3, [r3, #0]
     86a:	b113      	cbz	r3, 872 <CONFIG_ISR_STACK_SIZE+0x72>
                    saldo += 2;
     86c:	3402      	adds	r4, #2
                    reset_Buttons();
     86e:	f7ff fe2d 	bl	4cc <reset_Buttons>
                }
                if(But7) {          //5 euros
     872:	f8da 3000 	ldr.w	r3, [sl]
     876:	b113      	cbz	r3, 87e <CONFIG_ISR_STACK_SIZE+0x7e>
                    saldo += 5;
     878:	3405      	adds	r4, #5
                    reset_Buttons();
     87a:	f7ff fe27 	bl	4cc <reset_Buttons>
                }
                if(But8) {          //10 euros
     87e:	f8db 3000 	ldr.w	r3, [fp]
     882:	b113      	cbz	r3, 88a <CONFIG_ISR_STACK_SIZE+0x8a>
                    saldo += 10;
     884:	340a      	adds	r4, #10
                    reset_Buttons();
     886:	f7ff fe21 	bl	4cc <reset_Buttons>
        k_msleep(SLEEP_TIME_MS);
     88a:	f44f 7096 	mov.w	r0, #300	; 0x12c
     88e:	f004 fa29 	bl	4ce4 <k_msleep.isra.0>
        switch(state){
     892:	e702      	b.n	69a <StateMachine+0x2a>
                if(select == 3) {
     894:	2d03      	cmp	r5, #3
     896:	d115      	bne.n	8c4 <CONFIG_ISR_STACK_SIZE+0xc4>
                    printk("------------------------Cinema 3000------------------------\n\n\r  Filme A\n\n\r    Sessao :    19 horas  %d euros\n\n\r                21 horas  %d euros\n\n\r                23 horas  %d euros\n\n\r             -> Voltar atras\n\n\r Saldo:%d euros\n\n\n\r",movie_a[h_19].custo,movie_a[h_21].custo,movie_a[h_23].custo,saldo);
     898:	2309      	movs	r3, #9
     89a:	4830      	ldr	r0, [pc, #192]	; (95c <CONFIG_ISR_STACK_SIZE+0x15c>)
     89c:	9400      	str	r4, [sp, #0]
     89e:	220b      	movs	r2, #11
     8a0:	4619      	mov	r1, r3
     8a2:	f004 fa58 	bl	4d56 <printk>
                if(But1) {          //UP mudar select
     8a6:	f8d9 6000 	ldr.w	r6, [r9]
     8aa:	2e00      	cmp	r6, #0
     8ac:	d1bc      	bne.n	828 <CONFIG_ISR_STACK_SIZE+0x28>
                if(But2) {          //DOWN mudar select
     8ae:	683b      	ldr	r3, [r7, #0]
     8b0:	b10b      	cbz	r3, 8b6 <CONFIG_ISR_STACK_SIZE+0xb6>
                    reset_Buttons();
     8b2:	f7ff fe0b 	bl	4cc <reset_Buttons>
                if(But3) {          //Select
     8b6:	f8d8 3000 	ldr.w	r3, [r8]
     8ba:	2b00      	cmp	r3, #0
     8bc:	d0bf      	beq.n	83e <CONFIG_ISR_STACK_SIZE+0x3e>
                        select = 0;
     8be:	2500      	movs	r5, #0
                        state = MENU;
     8c0:	2602      	movs	r6, #2
     8c2:	e781      	b.n	7c8 <StateMachine+0x158>
                if(But1) {          //UP mudar select
     8c4:	f8d9 3000 	ldr.w	r3, [r9]
     8c8:	b96b      	cbnz	r3, 8e6 <CONFIG_ISR_STACK_SIZE+0xe6>
                if(But2) {          //DOWN mudar select
     8ca:	683b      	ldr	r3, [r7, #0]
     8cc:	2b00      	cmp	r3, #0
     8ce:	f43f af66 	beq.w	79e <StateMachine+0x12e>
                    reset_Buttons();
     8d2:	f7ff fdfb 	bl	4cc <reset_Buttons>
                if(But3) {          //Select
     8d6:	f8d8 6000 	ldr.w	r6, [r8]
     8da:	2e00      	cmp	r6, #0
     8dc:	d0af      	beq.n	83e <CONFIG_ISR_STACK_SIZE+0x3e>
                    if(select == 3){
     8de:	2d03      	cmp	r5, #3
     8e0:	d0ed      	beq.n	8be <CONFIG_ISR_STACK_SIZE+0xbe>
     8e2:	2600      	movs	r6, #0
     8e4:	e770      	b.n	7c8 <StateMachine+0x158>
                    reset_Buttons();
     8e6:	f7ff fdf1 	bl	4cc <reset_Buttons>
                if(But2) {          //DOWN mudar select
     8ea:	683b      	ldr	r3, [r7, #0]
     8ec:	2b00      	cmp	r3, #0
     8ee:	f43f af56 	beq.w	79e <StateMachine+0x12e>
                    if((select == 0) || (select == 1) || (select == 2))  {
     8f2:	2d02      	cmp	r5, #2
     8f4:	dced      	bgt.n	8d2 <CONFIG_ISR_STACK_SIZE+0xd2>
     8f6:	e779      	b.n	7ec <StateMachine+0x17c>
                    reset_Buttons();
     8f8:	f7ff fde8 	bl	4cc <reset_Buttons>
                if(But3) {          //Select
     8fc:	f8d8 6000 	ldr.w	r6, [r8]
     900:	2e00      	cmp	r6, #0
     902:	d1dc      	bne.n	8be <CONFIG_ISR_STACK_SIZE+0xbe>
                        select++;
     904:	2503      	movs	r5, #3
     906:	e79a      	b.n	83e <CONFIG_ISR_STACK_SIZE+0x3e>
                if(But2) {          //DOWN mudar select
     908:	461d      	mov	r5, r3
     90a:	e76f      	b.n	7ec <StateMachine+0x17c>
                            printk("Saldo insuficiente. Inserir %d euros\n\n\r",(movie_a[h_19].custo-saldo));
     90c:	4814      	ldr	r0, [pc, #80]	; (960 <CONFIG_ISR_STACK_SIZE+0x160>)
     90e:	f1c4 0109 	rsb	r1, r4, #9
     912:	f004 fa20 	bl	4d56 <printk>
                            printk("Saldo insuficiente. Inserir %d euros\n\n\r",(movie_a[h_23].custo-saldo));
     916:	2600      	movs	r6, #0
     918:	e752      	b.n	7c0 <StateMachine+0x150>
     91a:	bf00      	nop
     91c:	200002ec 	.word	0x200002ec
     920:	200002e8 	.word	0x200002e8
     924:	200002e4 	.word	0x200002e4
     928:	200002d4 	.word	0x200002d4
     92c:	200002d0 	.word	0x200002d0
     930:	00005fae 	.word	0x00005fae
     934:	00005fb6 	.word	0x00005fb6
     938:	200002e0 	.word	0x200002e0
     93c:	00006092 	.word	0x00006092
     940:	200002dc 	.word	0x200002dc
     944:	200002d8 	.word	0x200002d8
     948:	00006024 	.word	0x00006024
     94c:	000060a6 	.word	0x000060a6
     950:	00006456 	.word	0x00006456
     954:	00006192 	.word	0x00006192
     958:	0000627e 	.word	0x0000627e
     95c:	0000636a 	.word	0x0000636a
     960:	0000648e 	.word	0x0000648e
                    if(select == 1){
     964:	2d01      	cmp	r5, #1
     966:	d110      	bne.n	98a <CONFIG_ISR_STACK_SIZE+0x18a>
                        if(saldo >= movie_a[h_21].custo){
     968:	2c0a      	cmp	r4, #10
     96a:	dd07      	ble.n	97c <CONFIG_ISR_STACK_SIZE+0x17c>
                            saldo -= movie_a[h_21].custo;
     96c:	3c0b      	subs	r4, #11
                            printk("Bilhete comprado para Filme A as %d horas.\n\rSaldo:%d\n\n\r",movie_a[h_21].horas, saldo);
     96e:	4622      	mov	r2, r4
     970:	2115      	movs	r1, #21
                            printk("Bilhete comprado para Filme A as %d horas.\n\rSaldo:%d\n\n\r",movie_a[h_23].horas, saldo);
     972:	486a      	ldr	r0, [pc, #424]	; (b1c <CONFIG_ISR_STACK_SIZE+0x31c>)
     974:	f004 f9ef 	bl	4d56 <printk>
                            select = 0;
     978:	2500      	movs	r5, #0
     97a:	e720      	b.n	7be <StateMachine+0x14e>
                            printk("Saldo insuficiente. Inserir %d euros\n\n\r",(movie_a[h_21].custo-saldo));
     97c:	4868      	ldr	r0, [pc, #416]	; (b20 <CONFIG_ISR_STACK_SIZE+0x320>)
     97e:	f1c4 010b 	rsb	r1, r4, #11
     982:	f004 f9e8 	bl	4d56 <printk>
     986:	2501      	movs	r5, #1
     988:	e7c5      	b.n	916 <CONFIG_ISR_STACK_SIZE+0x116>
                    if(select == 2){
     98a:	2d02      	cmp	r5, #2
     98c:	f43f af39 	beq.w	802 <CONFIG_ISR_STACK_SIZE+0x2>
     990:	e7a5      	b.n	8de <CONFIG_ISR_STACK_SIZE+0xde>
                            printk("Saldo insuficiente. Inserir %d euros\n\n\r",(movie_a[h_23].custo-saldo));
     992:	4863      	ldr	r0, [pc, #396]	; (b20 <CONFIG_ISR_STACK_SIZE+0x320>)
     994:	f1c4 0109 	rsb	r1, r4, #9
     998:	f004 f9dd 	bl	4d56 <printk>
     99c:	2502      	movs	r5, #2
     99e:	e7ba      	b.n	916 <CONFIG_ISR_STACK_SIZE+0x116>
                
                printk("\033[2J\033[H");
                if(select == 0) {   //movie B sessao 19 horas
                    printk("------------------------Cinema 3000------------------------\n\n\r  Filme B\n\n\r    Sessao : -> 19 horas  %d euros\n\n\r                21 horas  %d euros\n\n\r                Voltar atras\n\n\r Saldo:%d euros\n\n\n\r",movie_b[h_19].custo,movie_b[h_21].custo,saldo);
                }
                if(select == 1) {   //movie B sessao 21 horas
     9a0:	2d01      	cmp	r5, #1
     9a2:	d118      	bne.n	9d6 <CONFIG_ISR_STACK_SIZE+0x1d6>
                    printk("------------------------Cinema 3000------------------------\n\n\r  Filme B\n\n\r    Sessao :    19 horas  %d euros\n\n\r             -> 21 horas  %d euros\n\n\r                Voltar atras\n\n\r Saldo:%d euros\n\n\n\r",movie_b[h_19].custo,movie_b[h_21].custo,saldo);
     9a4:	4623      	mov	r3, r4
     9a6:	485f      	ldr	r0, [pc, #380]	; (b24 <CONFIG_ISR_STACK_SIZE+0x324>)
     9a8:	220c      	movs	r2, #12
     9aa:	210a      	movs	r1, #10
     9ac:	f004 f9d3 	bl	4d56 <printk>
                }
                if(select == 2) {   //movie B voltar
                    printk("------------------------Cinema 3000------------------------\n\n\r  Filme B\n\n\r    Sessao :    19 horas  %d euros\n\n\r                21 horas  %d euros\n\n\r             -> Voltar atras\n\n\r Saldo:%d euros\n\n\n\r",movie_b[h_19].custo,movie_b[h_21].custo,saldo);
                }
                if(But1) {          //UP mudar select
     9b0:	f8d9 3000 	ldr.w	r3, [r9]
     9b4:	bb9b      	cbnz	r3, a1e <CONFIG_ISR_STACK_SIZE+0x21e>
                    if((select == 1) || (select == 2)) {
                        select--;
                    }
                    reset_Buttons();
                }
                if(But2) {          //DOWN mudar select
     9b6:	683b      	ldr	r3, [r7, #0]
     9b8:	bb9b      	cbnz	r3, a22 <CONFIG_ISR_STACK_SIZE+0x222>
                    if((select == 0) || (select == 1))  {
                        select++;
                    }
                    reset_Buttons();
                }
                if(But3) {          //Select
     9ba:	f8d8 3000 	ldr.w	r3, [r8]
     9be:	b363      	cbz	r3, a1a <CONFIG_ISR_STACK_SIZE+0x21a>
                            printk("Saldo insuficiente. Inserir %d euros\n\n\r",(movie_b[h_19].custo-saldo));
                        }
                        k_msleep(SLEEP_TIME_MS*3);
                    }
                    if(select == 1){
                        if(saldo >= movie_b[h_21].custo){
     9c0:	2c0b      	cmp	r4, #11
     9c2:	f300 80a2 	bgt.w	b0a <CONFIG_ISR_STACK_SIZE+0x30a>
                            saldo -= movie_b[h_21].custo;
                            select = 0;
                            state = MENU;
                            printk("Bilhete comprado para Filme B as %d horas.\n\rSaldo:%d\n\n\r",movie_b[h_21].horas, saldo);
                        }else{
                            printk("Saldo insuficiente. Inserir %d euros\n\n\r",(movie_b[h_21].custo-saldo));
     9c6:	4856      	ldr	r0, [pc, #344]	; (b20 <CONFIG_ISR_STACK_SIZE+0x320>)
     9c8:	f1c4 010c 	rsb	r1, r4, #12
     9cc:	2501      	movs	r5, #1
     9ce:	f004 f9c2 	bl	4d56 <printk>
     9d2:	462e      	mov	r6, r5
     9d4:	e08e      	b.n	af4 <CONFIG_ISR_STACK_SIZE+0x2f4>
                if(select == 2) {   //movie B voltar
     9d6:	2d02      	cmp	r5, #2
     9d8:	d00e      	beq.n	9f8 <CONFIG_ISR_STACK_SIZE+0x1f8>
                if(But1) {          //UP mudar select
     9da:	f8d9 3000 	ldr.w	r3, [r9]
     9de:	b10b      	cbz	r3, 9e4 <CONFIG_ISR_STACK_SIZE+0x1e4>
                    reset_Buttons();
     9e0:	f7ff fd74 	bl	4cc <reset_Buttons>
                if(But2) {          //DOWN mudar select
     9e4:	683b      	ldr	r3, [r7, #0]
     9e6:	2b00      	cmp	r3, #0
     9e8:	d062      	beq.n	ab0 <CONFIG_ISR_STACK_SIZE+0x2b0>
                    reset_Buttons();
     9ea:	f7ff fd6f 	bl	4cc <reset_Buttons>
                if(But3) {          //Select
     9ee:	f8d8 3000 	ldr.w	r3, [r8]
     9f2:	b193      	cbz	r3, a1a <CONFIG_ISR_STACK_SIZE+0x21a>
                        }
                        k_msleep(SLEEP_TIME_MS*3);
                    }
                    if(select == 2) {
     9f4:	2601      	movs	r6, #1
     9f6:	e081      	b.n	afc <CONFIG_ISR_STACK_SIZE+0x2fc>
                    printk("------------------------Cinema 3000------------------------\n\n\r  Filme B\n\n\r    Sessao :    19 horas  %d euros\n\n\r                21 horas  %d euros\n\n\r             -> Voltar atras\n\n\r Saldo:%d euros\n\n\n\r",movie_b[h_19].custo,movie_b[h_21].custo,saldo);
     9f8:	4623      	mov	r3, r4
     9fa:	484b      	ldr	r0, [pc, #300]	; (b28 <CONFIG_ISR_STACK_SIZE+0x328>)
     9fc:	220c      	movs	r2, #12
     9fe:	210a      	movs	r1, #10
     a00:	f004 f9a9 	bl	4d56 <printk>
                if(But1) {          //UP mudar select
     a04:	f8d9 3000 	ldr.w	r3, [r9]
     a08:	b94b      	cbnz	r3, a1e <CONFIG_ISR_STACK_SIZE+0x21e>
                if(But2) {          //DOWN mudar select
     a0a:	683b      	ldr	r3, [r7, #0]
     a0c:	b10b      	cbz	r3, a12 <CONFIG_ISR_STACK_SIZE+0x212>
                    reset_Buttons();
     a0e:	f7ff fd5d 	bl	4cc <reset_Buttons>
                if(But3) {          //Select
     a12:	f8d8 3000 	ldr.w	r3, [r8]
     a16:	2b00      	cmp	r3, #0
     a18:	d163      	bne.n	ae2 <CONFIG_ISR_STACK_SIZE+0x2e2>
     a1a:	2601      	movs	r6, #1
     a1c:	e009      	b.n	a32 <CONFIG_ISR_STACK_SIZE+0x232>
                        select--;
     a1e:	3d01      	subs	r5, #1
     a20:	e042      	b.n	aa8 <CONFIG_ISR_STACK_SIZE+0x2a8>
                    reset_Buttons();
     a22:	f7ff fd53 	bl	4cc <reset_Buttons>
                if(But3) {          //Select
     a26:	f8d8 3000 	ldr.w	r3, [r8]
     a2a:	2b00      	cmp	r3, #0
     a2c:	d159      	bne.n	ae2 <CONFIG_ISR_STACK_SIZE+0x2e2>
     a2e:	462e      	mov	r6, r5
                        select++;
     a30:	2502      	movs	r5, #2
                        select = 0;
                        state = MENU;
                    }
                    reset_Buttons();
                }
                if(But4) {          //Return 
     a32:	4b3e      	ldr	r3, [pc, #248]	; (b2c <CONFIG_ISR_STACK_SIZE+0x32c>)
     a34:	681b      	ldr	r3, [r3, #0]
     a36:	b153      	cbz	r3, a4e <CONFIG_ISR_STACK_SIZE+0x24e>
                    printk("%d euros devolvidos",saldo);
     a38:	4621      	mov	r1, r4
     a3a:	483d      	ldr	r0, [pc, #244]	; (b30 <CONFIG_ISR_STACK_SIZE+0x330>)
     a3c:	f004 f98b 	bl	4d56 <printk>
                    saldo = 0;
                    reset_Buttons();
                    k_msleep(SLEEP_TIME_MS*3);
     a40:	f44f 7061 	mov.w	r0, #900	; 0x384
                    reset_Buttons();
     a44:	f7ff fd42 	bl	4cc <reset_Buttons>
                    k_msleep(SLEEP_TIME_MS*3);
     a48:	f004 f94c 	bl	4ce4 <k_msleep.isra.0>
                    saldo = 0;
     a4c:	2400      	movs	r4, #0
                }
                if(But5) {          //1 euro
     a4e:	4b39      	ldr	r3, [pc, #228]	; (b34 <CONFIG_ISR_STACK_SIZE+0x334>)
     a50:	681b      	ldr	r3, [r3, #0]
     a52:	b113      	cbz	r3, a5a <CONFIG_ISR_STACK_SIZE+0x25a>
                    saldo++;
     a54:	3401      	adds	r4, #1
                    reset_Buttons();
     a56:	f7ff fd39 	bl	4cc <reset_Buttons>
                }
                if(But6) {          //2 euros
     a5a:	4b37      	ldr	r3, [pc, #220]	; (b38 <CONFIG_ISR_STACK_SIZE+0x338>)
     a5c:	681b      	ldr	r3, [r3, #0]
     a5e:	b113      	cbz	r3, a66 <CONFIG_ISR_STACK_SIZE+0x266>
                    saldo += 2;
     a60:	3402      	adds	r4, #2
                    reset_Buttons();
     a62:	f7ff fd33 	bl	4cc <reset_Buttons>
                }
                if(But7) {          //5 euros
     a66:	f8da 3000 	ldr.w	r3, [sl]
     a6a:	b113      	cbz	r3, a72 <CONFIG_ISR_STACK_SIZE+0x272>
                    saldo += 5;
     a6c:	3405      	adds	r4, #5
                    reset_Buttons();
     a6e:	f7ff fd2d 	bl	4cc <reset_Buttons>
                }
                if(But8) {          //10 euros
     a72:	f8db 3000 	ldr.w	r3, [fp]
     a76:	b113      	cbz	r3, a7e <CONFIG_ISR_STACK_SIZE+0x27e>
                    saldo += 10;
     a78:	340a      	adds	r4, #10
                    reset_Buttons();
     a7a:	f7ff fd27 	bl	4cc <reset_Buttons>
        k_msleep(SLEEP_TIME_MS);
     a7e:	f44f 7096 	mov.w	r0, #300	; 0x12c
     a82:	f004 f92f 	bl	4ce4 <k_msleep.isra.0>
        switch(state){
     a86:	2e01      	cmp	r6, #1
     a88:	f47f ae09 	bne.w	69e <StateMachine+0x2e>
                printk("\033[2J\033[H");
     a8c:	482b      	ldr	r0, [pc, #172]	; (b3c <CONFIG_ISR_STACK_SIZE+0x33c>)
     a8e:	f004 f962 	bl	4d56 <printk>
                if(select == 0) {   //movie B sessao 19 horas
     a92:	2d00      	cmp	r5, #0
     a94:	d184      	bne.n	9a0 <CONFIG_ISR_STACK_SIZE+0x1a0>
                    printk("------------------------Cinema 3000------------------------\n\n\r  Filme B\n\n\r    Sessao : -> 19 horas  %d euros\n\n\r                21 horas  %d euros\n\n\r                Voltar atras\n\n\r Saldo:%d euros\n\n\n\r",movie_b[h_19].custo,movie_b[h_21].custo,saldo);
     a96:	4623      	mov	r3, r4
     a98:	4829      	ldr	r0, [pc, #164]	; (b40 <CONFIG_ISR_STACK_SIZE+0x340>)
     a9a:	220c      	movs	r2, #12
     a9c:	210a      	movs	r1, #10
     a9e:	f004 f95a 	bl	4d56 <printk>
                if(But1) {          //UP mudar select
     aa2:	f8d9 3000 	ldr.w	r3, [r9]
     aa6:	b10b      	cbz	r3, aac <CONFIG_ISR_STACK_SIZE+0x2ac>
                    reset_Buttons();
     aa8:	f7ff fd10 	bl	4cc <reset_Buttons>
                if(But2) {          //DOWN mudar select
     aac:	683b      	ldr	r3, [r7, #0]
     aae:	b973      	cbnz	r3, ace <CONFIG_ISR_STACK_SIZE+0x2ce>
                if(But3) {          //Select
     ab0:	f8d8 3000 	ldr.w	r3, [r8]
     ab4:	2b00      	cmp	r3, #0
     ab6:	d0b0      	beq.n	a1a <CONFIG_ISR_STACK_SIZE+0x21a>
                    if(select == 0){
     ab8:	bb1d      	cbnz	r5, b02 <CONFIG_ISR_STACK_SIZE+0x302>
                        if(saldo >= movie_b[h_19].custo){
     aba:	2c09      	cmp	r4, #9
     abc:	dd14      	ble.n	ae8 <CONFIG_ISR_STACK_SIZE+0x2e8>
                            saldo -= movie_b[h_19].custo;
     abe:	3c0a      	subs	r4, #10
                            printk("Bilhete comprado para Filme B as %d horas.\n\rSaldo:%d\n\n\r",movie_b[h_19].horas, saldo);
     ac0:	4820      	ldr	r0, [pc, #128]	; (b44 <CONFIG_ISR_STACK_SIZE+0x344>)
     ac2:	4622      	mov	r2, r4
     ac4:	2113      	movs	r1, #19
     ac6:	f004 f946 	bl	4d56 <printk>
                            state = MENU;
     aca:	2602      	movs	r6, #2
     acc:	e012      	b.n	af4 <CONFIG_ISR_STACK_SIZE+0x2f4>
                    reset_Buttons();
     ace:	f7ff fcfd 	bl	4cc <reset_Buttons>
                if(But3) {          //Select
     ad2:	f8d8 3000 	ldr.w	r3, [r8]
                        select++;
     ad6:	3501      	adds	r5, #1
                if(But3) {          //Select
     ad8:	2b00      	cmp	r3, #0
     ada:	d09e      	beq.n	a1a <CONFIG_ISR_STACK_SIZE+0x21a>
                    if(select == 1){
     adc:	2d01      	cmp	r5, #1
     ade:	f43f af6f 	beq.w	9c0 <CONFIG_ISR_STACK_SIZE+0x1c0>
                        select = 0;
     ae2:	2500      	movs	r5, #0
                        state = MENU;
     ae4:	2602      	movs	r6, #2
     ae6:	e009      	b.n	afc <CONFIG_ISR_STACK_SIZE+0x2fc>
                            printk("Saldo insuficiente. Inserir %d euros\n\n\r",(movie_b[h_19].custo-saldo));
     ae8:	480d      	ldr	r0, [pc, #52]	; (b20 <CONFIG_ISR_STACK_SIZE+0x320>)
     aea:	f1c4 010a 	rsb	r1, r4, #10
     aee:	f004 f932 	bl	4d56 <printk>
     af2:	2601      	movs	r6, #1
                        k_msleep(SLEEP_TIME_MS*3);
     af4:	f44f 7061 	mov.w	r0, #900	; 0x384
     af8:	f004 f8f4 	bl	4ce4 <k_msleep.isra.0>
                    reset_Buttons();
     afc:	f7ff fce6 	bl	4cc <reset_Buttons>
     b00:	e797      	b.n	a32 <CONFIG_ISR_STACK_SIZE+0x232>
                    if(select == 1){
     b02:	2d01      	cmp	r5, #1
     b04:	f43f af5c 	beq.w	9c0 <CONFIG_ISR_STACK_SIZE+0x1c0>
     b08:	e774      	b.n	9f4 <CONFIG_ISR_STACK_SIZE+0x1f4>
                            saldo -= movie_b[h_21].custo;
     b0a:	3c0c      	subs	r4, #12
                            printk("Bilhete comprado para Filme B as %d horas.\n\rSaldo:%d\n\n\r",movie_b[h_21].horas, saldo);
     b0c:	480d      	ldr	r0, [pc, #52]	; (b44 <CONFIG_ISR_STACK_SIZE+0x344>)
     b0e:	4622      	mov	r2, r4
     b10:	2115      	movs	r1, #21
     b12:	f004 f920 	bl	4d56 <printk>
                            select = 0;
     b16:	2500      	movs	r5, #0
     b18:	e7d7      	b.n	aca <CONFIG_ISR_STACK_SIZE+0x2ca>
     b1a:	bf00      	nop
     b1c:	00006456 	.word	0x00006456
     b20:	0000648e 	.word	0x0000648e
     b24:	0000657d 	.word	0x0000657d
     b28:	00006644 	.word	0x00006644
     b2c:	200002e0 	.word	0x200002e0
     b30:	00006092 	.word	0x00006092
     b34:	200002dc 	.word	0x200002dc
     b38:	200002d8 	.word	0x200002d8
     b3c:	00005fae 	.word	0x00005fae
     b40:	000064b6 	.word	0x000064b6
     b44:	0000670b 	.word	0x0000670b

00000b48 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     b48:	680b      	ldr	r3, [r1, #0]
     b4a:	3301      	adds	r3, #1
     b4c:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     b4e:	4b01      	ldr	r3, [pc, #4]	; (b54 <char_out+0xc>)
     b50:	681b      	ldr	r3, [r3, #0]
     b52:	4718      	bx	r3
     b54:	20000000 	.word	0x20000000

00000b58 <__printk_hook_install>:
	_char_out = fn;
     b58:	4b01      	ldr	r3, [pc, #4]	; (b60 <__printk_hook_install+0x8>)
     b5a:	6018      	str	r0, [r3, #0]
}
     b5c:	4770      	bx	lr
     b5e:	bf00      	nop
     b60:	20000000 	.word	0x20000000

00000b64 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
     b64:	b507      	push	{r0, r1, r2, lr}
     b66:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
     b68:	2100      	movs	r1, #0
{
     b6a:	4602      	mov	r2, r0
		struct out_context ctx = { 0 };
     b6c:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
     b6e:	4803      	ldr	r0, [pc, #12]	; (b7c <vprintk+0x18>)
     b70:	a901      	add	r1, sp, #4
     b72:	f000 f913 	bl	d9c <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
     b76:	b003      	add	sp, #12
     b78:	f85d fb04 	ldr.w	pc, [sp], #4
     b7c:	00000b49 	.word	0x00000b49

00000b80 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     b84:	8b05      	ldrh	r5, [r0, #24]
{
     b86:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     b88:	0728      	lsls	r0, r5, #28
{
     b8a:	4690      	mov	r8, r2
	if (processing) {
     b8c:	d411      	bmi.n	bb2 <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
     b8e:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     b90:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
     b94:	f040 80cd 	bne.w	d32 <process_event+0x1b2>
			evt = process_recheck(mgr);
     b98:	4620      	mov	r0, r4
     b9a:	f004 f8e9 	bl	4d70 <process_recheck>
		}

		if (evt == EVT_NOP) {
     b9e:	b178      	cbz	r0, bc0 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
     ba0:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     ba2:	8b21      	ldrh	r1, [r4, #24]
     ba4:	2804      	cmp	r0, #4
     ba6:	d811      	bhi.n	bcc <process_event+0x4c>
     ba8:	e8df f000 	tbb	[pc, r0]
     bac:	856d10c3 	.word	0x856d10c3
     bb0:	95          	.byte	0x95
     bb1:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
     bb2:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     bb4:	bf0c      	ite	eq
     bb6:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
     bba:	f045 0520 	orrne.w	r5, r5, #32
     bbe:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     bc0:	f388 8811 	msr	BASEPRI, r8
     bc4:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     bc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     bcc:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     bd0:	45aa      	cmp	sl, r5
     bd2:	f000 80a6 	beq.w	d22 <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
     bd6:	2700      	movs	r7, #0
     bd8:	46b9      	mov	r9, r7
     bda:	463e      	mov	r6, r7
     bdc:	68a3      	ldr	r3, [r4, #8]
     bde:	2b00      	cmp	r3, #0
     be0:	f000 80bd 	beq.w	d5e <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     be4:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     be8:	8321      	strh	r1, [r4, #24]
     bea:	f388 8811 	msr	BASEPRI, r8
     bee:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     bf2:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     bf4:	2900      	cmp	r1, #0
     bf6:	f000 80bb 	beq.w	d70 <process_event+0x1f0>
	return node->next;
     bfa:	680d      	ldr	r5, [r1, #0]
     bfc:	2900      	cmp	r1, #0
     bfe:	f000 80b7 	beq.w	d70 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
     c02:	f8d1 8004 	ldr.w	r8, [r1, #4]
     c06:	4633      	mov	r3, r6
     c08:	4652      	mov	r2, sl
     c0a:	4620      	mov	r0, r4
     c0c:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     c0e:	2d00      	cmp	r5, #0
     c10:	d076      	beq.n	d00 <process_event+0x180>
     c12:	682b      	ldr	r3, [r5, #0]
     c14:	4629      	mov	r1, r5
     c16:	461d      	mov	r5, r3
     c18:	e7f0      	b.n	bfc <process_event+0x7c>
     c1a:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     c1e:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     c20:	2a01      	cmp	r2, #1
     c22:	d81b      	bhi.n	c5c <process_event+0xdc>
	list->head = NULL;
     c24:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     c26:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     c2a:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     c2c:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     c2e:	b289      	uxth	r1, r1
	list->tail = NULL;
     c30:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     c34:	d109      	bne.n	c4a <process_event+0xca>
     c36:	463b      	mov	r3, r7
     c38:	e003      	b.n	c42 <process_event+0xc2>
				mgr->refs += 1U;
     c3a:	8b62      	ldrh	r2, [r4, #26]
	return node->next;
     c3c:	681b      	ldr	r3, [r3, #0]
     c3e:	3201      	adds	r2, #1
     c40:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     c42:	2b00      	cmp	r3, #0
     c44:	d1f9      	bne.n	c3a <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     c46:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
     c4a:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     c4c:	4620      	mov	r0, r4
     c4e:	f004 f88f 	bl	4d70 <process_recheck>
     c52:	2800      	cmp	r0, #0
     c54:	d07b      	beq.n	d4e <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     c56:	f041 0120 	orr.w	r1, r1, #32
     c5a:	e077      	b.n	d4c <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
     c5c:	2b04      	cmp	r3, #4
     c5e:	d10a      	bne.n	c76 <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     c60:	f021 0107 	bic.w	r1, r1, #7
     c64:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
     c66:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     c68:	4620      	mov	r0, r4
     c6a:	f004 f881 	bl	4d70 <process_recheck>
     c6e:	b110      	cbz	r0, c76 <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     c70:	f041 0120 	orr.w	r1, r1, #32
     c74:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     c76:	8b21      	ldrh	r1, [r4, #24]
     c78:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     c7c:	45aa      	cmp	sl, r5
     c7e:	d050      	beq.n	d22 <process_event+0x1a2>
     c80:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
     c82:	46b9      	mov	r9, r7
     c84:	e7aa      	b.n	bdc <process_event+0x5c>
			transit = mgr->transitions->start;
     c86:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     c88:	f021 0107 	bic.w	r1, r1, #7
     c8c:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
     c90:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
     c92:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
     c96:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     c98:	d12d      	bne.n	cf6 <process_event+0x176>
		    || (transit != NULL)) {
     c9a:	f1b9 0f00 	cmp.w	r9, #0
     c9e:	d040      	beq.n	d22 <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     ca0:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     ca4:	8321      	strh	r1, [r4, #24]
     ca6:	f388 8811 	msr	BASEPRI, r8
     caa:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
     cae:	493a      	ldr	r1, [pc, #232]	; (d98 <process_event+0x218>)
     cb0:	4620      	mov	r0, r4
     cb2:	47c8      	blx	r9
     cb4:	e029      	b.n	d0a <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     cb6:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
     cba:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     cbc:	f041 0104 	orr.w	r1, r1, #4
     cc0:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
     cc2:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
     cc4:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
     cc8:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     cca:	d0e6      	beq.n	c9a <process_event+0x11a>
     ccc:	2700      	movs	r7, #0
		res = 0;
     cce:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     cd0:	f04f 0a04 	mov.w	sl, #4
     cd4:	e782      	b.n	bdc <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     cd6:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
     cda:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     cdc:	f041 0105 	orr.w	r1, r1, #5
     ce0:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
     ce2:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
     ce4:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
     ce8:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     cea:	d0d6      	beq.n	c9a <process_event+0x11a>
     cec:	2700      	movs	r7, #0
		res = 0;
     cee:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     cf0:	f04f 0a05 	mov.w	sl, #5
     cf4:	e772      	b.n	bdc <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
     cf6:	2700      	movs	r7, #0
		res = 0;
     cf8:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     cfa:	f04f 0a06 	mov.w	sl, #6
     cfe:	e76d      	b.n	bdc <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     d00:	462b      	mov	r3, r5
     d02:	e787      	b.n	c14 <process_event+0x94>
			if (transit != NULL) {
     d04:	f1b9 0f00 	cmp.w	r9, #0
     d08:	d1d1      	bne.n	cae <process_event+0x12e>
	__asm__ volatile(
     d0a:	f04f 0320 	mov.w	r3, #32
     d0e:	f3ef 8811 	mrs	r8, BASEPRI
     d12:	f383 8812 	msr	BASEPRI_MAX, r3
     d16:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     d1a:	8b23      	ldrh	r3, [r4, #24]
     d1c:	f023 0308 	bic.w	r3, r3, #8
     d20:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     d22:	8b25      	ldrh	r5, [r4, #24]
     d24:	06ea      	lsls	r2, r5, #27
     d26:	d52e      	bpl.n	d86 <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     d28:	f025 0310 	bic.w	r3, r5, #16
     d2c:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
     d2e:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
     d32:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     d34:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     d36:	2e00      	cmp	r6, #0
     d38:	f6bf af6f 	bge.w	c1a <process_event+0x9a>
	list->head = NULL;
     d3c:	2300      	movs	r3, #0
		*clients = mgr->clients;
     d3e:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
     d40:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d44:	f021 0107 	bic.w	r1, r1, #7
     d48:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
     d4c:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     d4e:	8b21      	ldrh	r1, [r4, #24]
     d50:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     d54:	45aa      	cmp	sl, r5
     d56:	f04f 0900 	mov.w	r9, #0
     d5a:	f47f af3f 	bne.w	bdc <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
     d5e:	2f00      	cmp	r7, #0
     d60:	d09b      	beq.n	c9a <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     d62:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     d66:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
     d68:	f388 8811 	msr	BASEPRI, r8
     d6c:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
     d70:	2f00      	cmp	r7, #0
     d72:	d0c7      	beq.n	d04 <process_event+0x184>
	return node->next;
     d74:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
     d76:	4639      	mov	r1, r7
     d78:	4633      	mov	r3, r6
     d7a:	4652      	mov	r2, sl
     d7c:	4620      	mov	r0, r4
     d7e:	f004 f823 	bl	4dc8 <notify_one>
	list->head = node;
     d82:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
     d84:	e7f4      	b.n	d70 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     d86:	06ab      	lsls	r3, r5, #26
     d88:	f57f af1a 	bpl.w	bc0 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     d8c:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     d90:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
     d92:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
     d96:	e6ff      	b.n	b98 <process_event+0x18>
     d98:	00004df5 	.word	0x00004df5

00000d9c <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     da0:	4681      	mov	r9, r0
     da2:	b095      	sub	sp, #84	; 0x54
     da4:	468b      	mov	fp, r1
     da6:	4617      	mov	r7, r2
     da8:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     daa:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     dac:	7838      	ldrb	r0, [r7, #0]
     dae:	b908      	cbnz	r0, db4 <cbvprintf+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
     db0:	4628      	mov	r0, r5
     db2:	e358      	b.n	1466 <CONFIG_FPROTECT_BLOCK_SIZE+0x466>
			OUTC(*fp++);
     db4:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
     db6:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
     db8:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
     dba:	d006      	beq.n	dca <cbvprintf+0x2e>
			OUTC('%');
     dbc:	4659      	mov	r1, fp
     dbe:	47c8      	blx	r9
     dc0:	2800      	cmp	r0, #0
     dc2:	f2c0 8350 	blt.w	1466 <CONFIG_FPROTECT_BLOCK_SIZE+0x466>
     dc6:	3501      	adds	r5, #1
		if (bps == NULL) {
     dc8:	e204      	b.n	11d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d4>
		} state = {
     dca:	2218      	movs	r2, #24
     dcc:	2100      	movs	r1, #0
     dce:	a80e      	add	r0, sp, #56	; 0x38
     dd0:	f004 f92b 	bl	502a <memset>
	if (*sp == '%') {
     dd4:	787b      	ldrb	r3, [r7, #1]
     dd6:	2b25      	cmp	r3, #37	; 0x25
     dd8:	d07d      	beq.n	ed6 <cbvprintf+0x13a>
     dda:	2300      	movs	r3, #0
     ddc:	1c78      	adds	r0, r7, #1
     dde:	4698      	mov	r8, r3
     de0:	469e      	mov	lr, r3
     de2:	469c      	mov	ip, r3
     de4:	461e      	mov	r6, r3
     de6:	4601      	mov	r1, r0
		switch (*sp) {
     de8:	f810 2b01 	ldrb.w	r2, [r0], #1
     dec:	2a2b      	cmp	r2, #43	; 0x2b
     dee:	f000 80a1 	beq.w	f34 <cbvprintf+0x198>
     df2:	f200 8098 	bhi.w	f26 <cbvprintf+0x18a>
     df6:	2a20      	cmp	r2, #32
     df8:	f000 809f 	beq.w	f3a <cbvprintf+0x19e>
     dfc:	2a23      	cmp	r2, #35	; 0x23
     dfe:	f000 809f 	beq.w	f40 <cbvprintf+0x1a4>
     e02:	b12b      	cbz	r3, e10 <cbvprintf+0x74>
     e04:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     e08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     e0c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     e10:	f1b8 0f00 	cmp.w	r8, #0
     e14:	d005      	beq.n	e22 <cbvprintf+0x86>
     e16:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     e1a:	f043 0320 	orr.w	r3, r3, #32
     e1e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     e22:	f1be 0f00 	cmp.w	lr, #0
     e26:	d005      	beq.n	e34 <cbvprintf+0x98>
     e28:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     e2c:	f043 0310 	orr.w	r3, r3, #16
     e30:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     e34:	f1bc 0f00 	cmp.w	ip, #0
     e38:	d005      	beq.n	e46 <cbvprintf+0xaa>
     e3a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     e3e:	f043 0308 	orr.w	r3, r3, #8
     e42:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     e46:	b12e      	cbz	r6, e54 <cbvprintf+0xb8>
     e48:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     e4c:	f043 0304 	orr.w	r3, r3, #4
     e50:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
     e54:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     e58:	f003 0044 	and.w	r0, r3, #68	; 0x44
     e5c:	2844      	cmp	r0, #68	; 0x44
     e5e:	d103      	bne.n	e68 <cbvprintf+0xcc>
		conv->flag_zero = false;
     e60:	f36f 1386 	bfc	r3, #6, #1
     e64:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
     e68:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
     e6c:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
     e6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     e72:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
     e76:	d17f      	bne.n	f78 <cbvprintf+0x1dc>
		conv->width_star = true;
     e78:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     e7c:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
     e80:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
     e82:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
     e86:	781a      	ldrb	r2, [r3, #0]
     e88:	2a2e      	cmp	r2, #46	; 0x2e
     e8a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     e8e:	bf0c      	ite	eq
     e90:	2101      	moveq	r1, #1
     e92:	2100      	movne	r1, #0
     e94:	f361 0241 	bfi	r2, r1, #1, #1
     e98:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
     e9c:	d178      	bne.n	f90 <cbvprintf+0x1f4>
	if (*sp == '*') {
     e9e:	785a      	ldrb	r2, [r3, #1]
     ea0:	2a2a      	cmp	r2, #42	; 0x2a
     ea2:	d06e      	beq.n	f82 <cbvprintf+0x1e6>
	++sp;
     ea4:	3301      	adds	r3, #1
	size_t val = 0;
     ea6:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     ea8:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     eac:	4619      	mov	r1, r3
     eae:	f811 0b01 	ldrb.w	r0, [r1], #1
     eb2:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     eb6:	2e09      	cmp	r6, #9
     eb8:	f240 8095 	bls.w	fe6 <cbvprintf+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
     ebc:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
     ec0:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
     ec2:	f3c1 0040 	ubfx	r0, r1, #1, #1
     ec6:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
     eca:	460a      	mov	r2, r1
     ecc:	f360 0241 	bfi	r2, r0, #1, #1
     ed0:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
     ed4:	e05c      	b.n	f90 <cbvprintf+0x1f4>
		conv->specifier = *sp++;
     ed6:	1cba      	adds	r2, r7, #2
     ed8:	9203      	str	r2, [sp, #12]
     eda:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
     ede:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
     ee2:	07da      	lsls	r2, r3, #31
     ee4:	f140 812e 	bpl.w	1144 <CONFIG_FPROTECT_BLOCK_SIZE+0x144>
			width = va_arg(ap, int);
     ee8:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
     eec:	f1b8 0f00 	cmp.w	r8, #0
     ef0:	da07      	bge.n	f02 <cbvprintf+0x166>
				conv->flag_dash = true;
     ef2:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
     ef6:	f042 0204 	orr.w	r2, r2, #4
     efa:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				width = -width;
     efe:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
     f02:	075e      	lsls	r6, r3, #29
     f04:	f140 8127 	bpl.w	1156 <CONFIG_FPROTECT_BLOCK_SIZE+0x156>
			int arg = va_arg(ap, int);
     f08:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
     f0c:	f1ba 0f00 	cmp.w	sl, #0
     f10:	f280 8126 	bge.w	1160 <CONFIG_FPROTECT_BLOCK_SIZE+0x160>
				conv->prec_present = false;
     f14:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
     f18:	f36f 0341 	bfc	r3, #1, #1
     f1c:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
     f20:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
     f24:	e11c      	b.n	1160 <CONFIG_FPROTECT_BLOCK_SIZE+0x160>
		switch (*sp) {
     f26:	2a2d      	cmp	r2, #45	; 0x2d
     f28:	d00d      	beq.n	f46 <cbvprintf+0x1aa>
     f2a:	2a30      	cmp	r2, #48	; 0x30
     f2c:	f47f af69 	bne.w	e02 <cbvprintf+0x66>
     f30:	2301      	movs	r3, #1
	} while (loop);
     f32:	e758      	b.n	de6 <cbvprintf+0x4a>
		switch (*sp) {
     f34:	f04f 0c01 	mov.w	ip, #1
     f38:	e755      	b.n	de6 <cbvprintf+0x4a>
     f3a:	f04f 0e01 	mov.w	lr, #1
     f3e:	e752      	b.n	de6 <cbvprintf+0x4a>
     f40:	f04f 0801 	mov.w	r8, #1
     f44:	e74f      	b.n	de6 <cbvprintf+0x4a>
     f46:	2601      	movs	r6, #1
     f48:	e74d      	b.n	de6 <cbvprintf+0x4a>
		val = 10U * val + *sp++ - '0';
     f4a:	fb0e 6202 	mla	r2, lr, r2, r6
     f4e:	3a30      	subs	r2, #48	; 0x30
     f50:	4603      	mov	r3, r0
     f52:	4618      	mov	r0, r3
     f54:	f810 6b01 	ldrb.w	r6, [r0], #1
     f58:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     f5c:	f1bc 0f09 	cmp.w	ip, #9
     f60:	d9f3      	bls.n	f4a <cbvprintf+0x1ae>
	if (sp != wp) {
     f62:	4299      	cmp	r1, r3
     f64:	d08f      	beq.n	e86 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
     f66:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
     f6a:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
     f6c:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     f6e:	f362 0141 	bfi	r1, r2, #1, #1
     f72:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
     f76:	e786      	b.n	e86 <cbvprintf+0xea>
     f78:	460b      	mov	r3, r1
	size_t val = 0;
     f7a:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     f7c:	f04f 0e0a 	mov.w	lr, #10
     f80:	e7e7      	b.n	f52 <cbvprintf+0x1b6>
		conv->prec_star = true;
     f82:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     f86:	f042 0204 	orr.w	r2, r2, #4
     f8a:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		return ++sp;
     f8e:	3302      	adds	r3, #2
	switch (*sp) {
     f90:	781a      	ldrb	r2, [r3, #0]
     f92:	2a6c      	cmp	r2, #108	; 0x6c
     f94:	d047      	beq.n	1026 <CONFIG_FPROTECT_BLOCK_SIZE+0x26>
     f96:	d82b      	bhi.n	ff0 <cbvprintf+0x254>
     f98:	2a68      	cmp	r2, #104	; 0x68
     f9a:	d031      	beq.n	1000 <CONFIG_FPROTECT_BLOCK_SIZE>
     f9c:	2a6a      	cmp	r2, #106	; 0x6a
     f9e:	d04b      	beq.n	1038 <CONFIG_FPROTECT_BLOCK_SIZE+0x38>
     fa0:	2a4c      	cmp	r2, #76	; 0x4c
     fa2:	d051      	beq.n	1048 <CONFIG_FPROTECT_BLOCK_SIZE+0x48>
	conv->specifier = *sp++;
     fa4:	461a      	mov	r2, r3
     fa6:	f812 3b01 	ldrb.w	r3, [r2], #1
     faa:	9203      	str	r2, [sp, #12]
	switch (conv->specifier) {
     fac:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
     fae:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	conv->specifier = *sp++;
     fb2:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
	switch (conv->specifier) {
     fb6:	f200 80be 	bhi.w	1136 <CONFIG_FPROTECT_BLOCK_SIZE+0x136>
     fba:	2b6d      	cmp	r3, #109	; 0x6d
     fbc:	d851      	bhi.n	1062 <CONFIG_FPROTECT_BLOCK_SIZE+0x62>
     fbe:	2b69      	cmp	r3, #105	; 0x69
     fc0:	f200 80b9 	bhi.w	1136 <CONFIG_FPROTECT_BLOCK_SIZE+0x136>
     fc4:	2b57      	cmp	r3, #87	; 0x57
     fc6:	d867      	bhi.n	1098 <CONFIG_FPROTECT_BLOCK_SIZE+0x98>
     fc8:	2b41      	cmp	r3, #65	; 0x41
     fca:	d003      	beq.n	fd4 <cbvprintf+0x238>
     fcc:	3b45      	subs	r3, #69	; 0x45
     fce:	2b02      	cmp	r3, #2
     fd0:	f200 80b1 	bhi.w	1136 <CONFIG_FPROTECT_BLOCK_SIZE+0x136>
		conv->specifier_cat = SPECIFIER_FP;
     fd4:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     fd8:	2204      	movs	r2, #4
     fda:	f362 0302 	bfi	r3, r2, #0, #3
     fde:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
     fe2:	2301      	movs	r3, #1
			break;
     fe4:	e073      	b.n	10ce <CONFIG_FPROTECT_BLOCK_SIZE+0xce>
		val = 10U * val + *sp++ - '0';
     fe6:	fb0c 0202 	mla	r2, ip, r2, r0
     fea:	3a30      	subs	r2, #48	; 0x30
     fec:	460b      	mov	r3, r1
     fee:	e75d      	b.n	eac <cbvprintf+0x110>
	switch (*sp) {
     ff0:	2a74      	cmp	r2, #116	; 0x74
     ff2:	d025      	beq.n	1040 <CONFIG_FPROTECT_BLOCK_SIZE+0x40>
     ff4:	2a7a      	cmp	r2, #122	; 0x7a
     ff6:	d1d5      	bne.n	fa4 <cbvprintf+0x208>
		conv->length_mod = LENGTH_Z;
     ff8:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     ffc:	2106      	movs	r1, #6
     ffe:	e00c      	b.n	101a <CONFIG_FPROTECT_BLOCK_SIZE+0x1a>
		if (*++sp == 'h') {
    1000:	785a      	ldrb	r2, [r3, #1]
    1002:	2a68      	cmp	r2, #104	; 0x68
    1004:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1008:	d106      	bne.n	1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>
			conv->length_mod = LENGTH_HH;
    100a:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    100c:	f361 02c6 	bfi	r2, r1, #3, #4
    1010:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
    1014:	3302      	adds	r3, #2
    1016:	e7c5      	b.n	fa4 <cbvprintf+0x208>
			conv->length_mod = LENGTH_H;
    1018:	2102      	movs	r1, #2
    101a:	f361 02c6 	bfi	r2, r1, #3, #4
    101e:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
    1022:	3301      	adds	r3, #1
    1024:	e7be      	b.n	fa4 <cbvprintf+0x208>
		if (*++sp == 'l') {
    1026:	785a      	ldrb	r2, [r3, #1]
    1028:	2a6c      	cmp	r2, #108	; 0x6c
    102a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    102e:	d101      	bne.n	1034 <CONFIG_FPROTECT_BLOCK_SIZE+0x34>
			conv->length_mod = LENGTH_LL;
    1030:	2104      	movs	r1, #4
    1032:	e7eb      	b.n	100c <CONFIG_FPROTECT_BLOCK_SIZE+0xc>
			conv->length_mod = LENGTH_L;
    1034:	2103      	movs	r1, #3
    1036:	e7f0      	b.n	101a <CONFIG_FPROTECT_BLOCK_SIZE+0x1a>
		conv->length_mod = LENGTH_J;
    1038:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    103c:	2105      	movs	r1, #5
    103e:	e7ec      	b.n	101a <CONFIG_FPROTECT_BLOCK_SIZE+0x1a>
		conv->length_mod = LENGTH_T;
    1040:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1044:	2107      	movs	r1, #7
    1046:	e7e8      	b.n	101a <CONFIG_FPROTECT_BLOCK_SIZE+0x1a>
		conv->unsupported = true;
    1048:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
    104c:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    1050:	f022 0202 	bic.w	r2, r2, #2
    1054:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    1058:	f042 0202 	orr.w	r2, r2, #2
    105c:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
    1060:	e7df      	b.n	1022 <CONFIG_FPROTECT_BLOCK_SIZE+0x22>
	switch (conv->specifier) {
    1062:	3b6e      	subs	r3, #110	; 0x6e
    1064:	b2d9      	uxtb	r1, r3
    1066:	2301      	movs	r3, #1
    1068:	408b      	lsls	r3, r1
    106a:	f240 4182 	movw	r1, #1154	; 0x482
    106e:	420b      	tst	r3, r1
    1070:	d137      	bne.n	10e2 <CONFIG_FPROTECT_BLOCK_SIZE+0xe2>
    1072:	f013 0f24 	tst.w	r3, #36	; 0x24
    1076:	d151      	bne.n	111c <CONFIG_FPROTECT_BLOCK_SIZE+0x11c>
    1078:	07d8      	lsls	r0, r3, #31
    107a:	d55c      	bpl.n	1136 <CONFIG_FPROTECT_BLOCK_SIZE+0x136>
		conv->specifier_cat = SPECIFIER_PTR;
    107c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1080:	2103      	movs	r1, #3
    1082:	f361 0302 	bfi	r3, r1, #0, #3
    1086:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    108a:	f002 0378 	and.w	r3, r2, #120	; 0x78
    108e:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
    1092:	424b      	negs	r3, r1
    1094:	414b      	adcs	r3, r1
    1096:	e01a      	b.n	10ce <CONFIG_FPROTECT_BLOCK_SIZE+0xce>
	switch (conv->specifier) {
    1098:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    109c:	b2c9      	uxtb	r1, r1
    109e:	2001      	movs	r0, #1
    10a0:	fa00 f101 	lsl.w	r1, r0, r1
    10a4:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    10a8:	d194      	bne.n	fd4 <cbvprintf+0x238>
    10aa:	f640 0601 	movw	r6, #2049	; 0x801
    10ae:	4231      	tst	r1, r6
    10b0:	d11d      	bne.n	10ee <CONFIG_FPROTECT_BLOCK_SIZE+0xee>
    10b2:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    10b6:	d03e      	beq.n	1136 <CONFIG_FPROTECT_BLOCK_SIZE+0x136>
		conv->specifier_cat = SPECIFIER_SINT;
    10b8:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    10bc:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    10c0:	f002 0278 	and.w	r2, r2, #120	; 0x78
    10c4:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    10c6:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    10ca:	d034      	beq.n	1136 <CONFIG_FPROTECT_BLOCK_SIZE+0x136>
	bool unsupported = false;
    10cc:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    10ce:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    10d2:	f3c2 0140 	ubfx	r1, r2, #1, #1
    10d6:	430b      	orrs	r3, r1
    10d8:	f363 0241 	bfi	r2, r3, #1, #1
    10dc:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    10e0:	e6fd      	b.n	ede <cbvprintf+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
    10e2:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    10e6:	2102      	movs	r1, #2
    10e8:	f361 0302 	bfi	r3, r1, #0, #3
    10ec:	e7e8      	b.n	10c0 <CONFIG_FPROTECT_BLOCK_SIZE+0xc0>
    10ee:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
    10f2:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
    10f4:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    10f8:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    10fc:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    10fe:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
    1102:	bf02      	ittt	eq
    1104:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
    1108:	f041 0101 	orreq.w	r1, r1, #1
    110c:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
    1110:	2b63      	cmp	r3, #99	; 0x63
    1112:	d1db      	bne.n	10cc <CONFIG_FPROTECT_BLOCK_SIZE+0xcc>
			unsupported = (conv->length_mod != LENGTH_NONE);
    1114:	1e13      	subs	r3, r2, #0
    1116:	bf18      	it	ne
    1118:	2301      	movne	r3, #1
    111a:	e7d8      	b.n	10ce <CONFIG_FPROTECT_BLOCK_SIZE+0xce>
		conv->specifier_cat = SPECIFIER_PTR;
    111c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1120:	2103      	movs	r1, #3
    1122:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
    1126:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    112a:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
    112e:	bf14      	ite	ne
    1130:	2301      	movne	r3, #1
    1132:	2300      	moveq	r3, #0
    1134:	e7cb      	b.n	10ce <CONFIG_FPROTECT_BLOCK_SIZE+0xce>
		conv->invalid = true;
    1136:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    113a:	f043 0301 	orr.w	r3, r3, #1
    113e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
    1142:	e7c3      	b.n	10cc <CONFIG_FPROTECT_BLOCK_SIZE+0xcc>
		} else if (conv->width_present) {
    1144:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
    1148:	2a00      	cmp	r2, #0
			width = conv->width_value;
    114a:	bfb4      	ite	lt
    114c:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
		int width = -1;
    1150:	f04f 38ff 	movge.w	r8, #4294967295	; 0xffffffff
    1154:	e6d5      	b.n	f02 <cbvprintf+0x166>
		} else if (conv->prec_present) {
    1156:	0798      	lsls	r0, r3, #30
    1158:	f57f aee2 	bpl.w	f20 <cbvprintf+0x184>
			precision = conv->prec_value;
    115c:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
			= (enum length_mod_enum)conv->length_mod;
    1160:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		conv->pad0_value = 0;
    1164:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    1166:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
    116a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		enum specifier_cat_enum specifier_cat
    116e:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    1172:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    1174:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    1178:	d133      	bne.n	11e2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e2>
			switch (length_mod) {
    117a:	1ecb      	subs	r3, r1, #3
    117c:	2b04      	cmp	r3, #4
    117e:	d804      	bhi.n	118a <CONFIG_FPROTECT_BLOCK_SIZE+0x18a>
    1180:	e8df f003 	tbb	[pc, r3]
    1184:	10464610 	.word	0x10464610
    1188:	10          	.byte	0x10
    1189:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    118a:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    118c:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    118e:	ea4f 72e3 	mov.w	r2, r3, asr #31
    1192:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    1196:	d10b      	bne.n	11b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b0>
				value->sint = (char)value->sint;
    1198:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    119c:	930e      	str	r3, [sp, #56]	; 0x38
    119e:	2300      	movs	r3, #0
				value->sint = (short)value->sint;
    11a0:	930f      	str	r3, [sp, #60]	; 0x3c
    11a2:	e007      	b.n	11b4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b4>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    11a4:	f854 3b04 	ldr.w	r3, [r4], #4
    11a8:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    11aa:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
    11ae:	e002      	b.n	11b6 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b6>
			} else if (length_mod == LENGTH_H) {
    11b0:	2902      	cmp	r1, #2
    11b2:	d011      	beq.n	11d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d8>
				value->sint = va_arg(ap, int);
    11b4:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    11b6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    11ba:	f013 0603 	ands.w	r6, r3, #3
    11be:	d047      	beq.n	1250 <CONFIG_FPROTECT_BLOCK_SIZE+0x250>
			OUTS(sp, fp);
    11c0:	9b03      	ldr	r3, [sp, #12]
    11c2:	463a      	mov	r2, r7
    11c4:	4659      	mov	r1, fp
    11c6:	4648      	mov	r0, r9
    11c8:	f003 fedd 	bl	4f86 <outs>
    11cc:	2800      	cmp	r0, #0
    11ce:	f2c0 814a 	blt.w	1466 <CONFIG_FPROTECT_BLOCK_SIZE+0x466>
    11d2:	4405      	add	r5, r0
			continue;
    11d4:	9f03      	ldr	r7, [sp, #12]
    11d6:	e5e9      	b.n	dac <cbvprintf+0x10>
				value->sint = (short)value->sint;
    11d8:	b21a      	sxth	r2, r3
    11da:	920e      	str	r2, [sp, #56]	; 0x38
    11dc:	f343 33c0 	sbfx	r3, r3, #15, #1
    11e0:	e7de      	b.n	11a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a0>
		} else if (specifier_cat == SPECIFIER_UINT) {
    11e2:	2b02      	cmp	r3, #2
    11e4:	d124      	bne.n	1230 <CONFIG_FPROTECT_BLOCK_SIZE+0x230>
			switch (length_mod) {
    11e6:	1ecb      	subs	r3, r1, #3
    11e8:	2b04      	cmp	r3, #4
    11ea:	d804      	bhi.n	11f6 <CONFIG_FPROTECT_BLOCK_SIZE+0x1f6>
    11ec:	e8df f003 	tbb	[pc, r3]
    11f0:	18101018 	.word	0x18101018
    11f4:	18          	.byte	0x18
    11f5:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    11f6:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
    11f8:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    11fc:	f04f 0200 	mov.w	r2, #0
    1200:	d014      	beq.n	122c <CONFIG_FPROTECT_BLOCK_SIZE+0x22c>
			} else if (length_mod == LENGTH_H) {
    1202:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    1204:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
    1208:	d1d5      	bne.n	11b6 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b6>
				value->uint = (unsigned short)value->uint;
    120a:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    120c:	930e      	str	r3, [sp, #56]	; 0x38
    120e:	e7d2      	b.n	11b6 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b6>
					(uint_value_type)va_arg(ap,
    1210:	3407      	adds	r4, #7
    1212:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    1216:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    121a:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    121e:	e7ca      	b.n	11b6 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b6>
					(uint_value_type)va_arg(ap, size_t);
    1220:	f854 3b04 	ldr.w	r3, [r4], #4
    1224:	930e      	str	r3, [sp, #56]	; 0x38
    1226:	2300      	movs	r3, #0
    1228:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
    122a:	e7c4      	b.n	11b6 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b6>
				value->uint = (unsigned char)value->uint;
    122c:	b2db      	uxtb	r3, r3
    122e:	e7bc      	b.n	11aa <CONFIG_FPROTECT_BLOCK_SIZE+0x1aa>
		} else if (specifier_cat == SPECIFIER_FP) {
    1230:	2b04      	cmp	r3, #4
    1232:	d108      	bne.n	1246 <CONFIG_FPROTECT_BLOCK_SIZE+0x246>
					(sint_value_type)va_arg(ap, long long);
    1234:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    1236:	f024 0407 	bic.w	r4, r4, #7
    123a:	e9d4 2300 	ldrd	r2, r3, [r4]
    123e:	3408      	adds	r4, #8
    1240:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    1244:	e7b7      	b.n	11b6 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b6>
		} else if (specifier_cat == SPECIFIER_PTR) {
    1246:	2b03      	cmp	r3, #3
    1248:	d1b5      	bne.n	11b6 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b6>
			value->ptr = va_arg(ap, void *);
    124a:	f854 3b04 	ldr.w	r3, [r4], #4
    124e:	e7dd      	b.n	120c <CONFIG_FPROTECT_BLOCK_SIZE+0x20c>
		switch (conv->specifier) {
    1250:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    1254:	2878      	cmp	r0, #120	; 0x78
    1256:	d8bd      	bhi.n	11d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d4>
    1258:	2862      	cmp	r0, #98	; 0x62
    125a:	d81c      	bhi.n	1296 <CONFIG_FPROTECT_BLOCK_SIZE+0x296>
    125c:	2825      	cmp	r0, #37	; 0x25
    125e:	f43f adad 	beq.w	dbc <cbvprintf+0x20>
    1262:	2858      	cmp	r0, #88	; 0x58
    1264:	d1b6      	bne.n	11d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d4>
			bps = encode_uint(value->uint, conv, buf, bpe);
    1266:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    126a:	9300      	str	r3, [sp, #0]
    126c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    1270:	ab08      	add	r3, sp, #32
    1272:	aa10      	add	r2, sp, #64	; 0x40
    1274:	f003 fe41 	bl	4efa <encode_uint>
			if (precision >= 0) {
    1278:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    127c:	4607      	mov	r7, r0
			if (precision >= 0) {
    127e:	f280 809a 	bge.w	13b6 <CONFIG_FPROTECT_BLOCK_SIZE+0x3b6>
		if (bps == NULL) {
    1282:	2f00      	cmp	r7, #0
    1284:	d0a6      	beq.n	11d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d4>
		size_t nj_len = (bpe - bps);
    1286:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    128a:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
    128c:	2e00      	cmp	r6, #0
    128e:	f000 80c1 	beq.w	1414 <CONFIG_FPROTECT_BLOCK_SIZE+0x414>
			nj_len += 1U;
    1292:	3001      	adds	r0, #1
    1294:	e0be      	b.n	1414 <CONFIG_FPROTECT_BLOCK_SIZE+0x414>
		switch (conv->specifier) {
    1296:	3863      	subs	r0, #99	; 0x63
    1298:	2815      	cmp	r0, #21
    129a:	d89b      	bhi.n	11d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d4>
    129c:	a201      	add	r2, pc, #4	; (adr r2, 12a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a4>)
    129e:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    12a2:	bf00      	nop
    12a4:	00001379 	.word	0x00001379
    12a8:	0000138b 	.word	0x0000138b
    12ac:	000011d5 	.word	0x000011d5
    12b0:	000011d5 	.word	0x000011d5
    12b4:	000011d5 	.word	0x000011d5
    12b8:	000011d5 	.word	0x000011d5
    12bc:	0000138b 	.word	0x0000138b
    12c0:	000011d5 	.word	0x000011d5
    12c4:	000011d5 	.word	0x000011d5
    12c8:	000011d5 	.word	0x000011d5
    12cc:	000011d5 	.word	0x000011d5
    12d0:	00001419 	.word	0x00001419
    12d4:	000013b1 	.word	0x000013b1
    12d8:	000013d7 	.word	0x000013d7
    12dc:	000011d5 	.word	0x000011d5
    12e0:	000011d5 	.word	0x000011d5
    12e4:	000012fd 	.word	0x000012fd
    12e8:	000011d5 	.word	0x000011d5
    12ec:	000013b1 	.word	0x000013b1
    12f0:	000011d5 	.word	0x000011d5
    12f4:	000011d5 	.word	0x000011d5
    12f8:	000013b1 	.word	0x000013b1
			if (precision >= 0) {
    12fc:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
    1300:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
    1302:	db35      	blt.n	1370 <CONFIG_FPROTECT_BLOCK_SIZE+0x370>
				len = strnlen(bps, precision);
    1304:	4651      	mov	r1, sl
    1306:	4638      	mov	r0, r7
    1308:	f003 fe7b 	bl	5002 <strnlen>
			bpe = bps + len;
    130c:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
    1310:	2f00      	cmp	r7, #0
    1312:	f43f af5f 	beq.w	11d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d4>
		char sign = 0;
    1316:	2600      	movs	r6, #0
		if (conv->altform_0c) {
    1318:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    131c:	f013 0210 	ands.w	r2, r3, #16
    1320:	9205      	str	r2, [sp, #20]
    1322:	f000 8093 	beq.w	144c <CONFIG_FPROTECT_BLOCK_SIZE+0x44c>
			nj_len += 2U;
    1326:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    1328:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
    132a:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
    132c:	bf48      	it	mi
    132e:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
    1330:	9204      	str	r2, [sp, #16]
    1332:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
    1334:	bf48      	it	mi
    1336:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
    1338:	f1b8 0f00 	cmp.w	r8, #0
    133c:	f340 80a0 	ble.w	1480 <CONFIG_FPROTECT_BLOCK_SIZE+0x480>
			if (!conv->flag_dash) {
    1340:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
    1344:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
    1348:	f3c2 0380 	ubfx	r3, r2, #2, #1
    134c:	0750      	lsls	r0, r2, #29
    134e:	9306      	str	r3, [sp, #24]
    1350:	f100 8096 	bmi.w	1480 <CONFIG_FPROTECT_BLOCK_SIZE+0x480>
				if (conv->flag_zero) {
    1354:	0651      	lsls	r1, r2, #25
    1356:	f140 8089 	bpl.w	146c <CONFIG_FPROTECT_BLOCK_SIZE+0x46c>
					if (sign != 0) {
    135a:	b13e      	cbz	r6, 136c <CONFIG_FPROTECT_BLOCK_SIZE+0x36c>
						OUTC(sign);
    135c:	4659      	mov	r1, fp
    135e:	4630      	mov	r0, r6
    1360:	47c8      	blx	r9
    1362:	2800      	cmp	r0, #0
    1364:	db7f      	blt.n	1466 <CONFIG_FPROTECT_BLOCK_SIZE+0x466>
    1366:	9b06      	ldr	r3, [sp, #24]
    1368:	3501      	adds	r5, #1
    136a:	461e      	mov	r6, r3
					pad = '0';
    136c:	2230      	movs	r2, #48	; 0x30
    136e:	e07e      	b.n	146e <CONFIG_FPROTECT_BLOCK_SIZE+0x46e>
				len = strlen(bps);
    1370:	4638      	mov	r0, r7
    1372:	f003 fe3f 	bl	4ff4 <strlen>
    1376:	e7c9      	b.n	130c <CONFIG_FPROTECT_BLOCK_SIZE+0x30c>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    1378:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    137a:	f88d 3020 	strb.w	r3, [sp, #32]
		char sign = 0;
    137e:	2600      	movs	r6, #0
			bps = buf;
    1380:	af08      	add	r7, sp, #32
			bpe = buf + 1;
    1382:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
		size_t nj_len = (bpe - bps);
    1386:	2001      	movs	r0, #1
    1388:	e7c6      	b.n	1318 <CONFIG_FPROTECT_BLOCK_SIZE+0x318>
			if (conv->flag_plus) {
    138a:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
    138c:	bf5c      	itt	pl
    138e:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    1392:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
    1394:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
				sign = '+';
    1398:	bf48      	it	mi
    139a:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
    139c:	2b00      	cmp	r3, #0
    139e:	f6bf af62 	bge.w	1266 <CONFIG_FPROTECT_BLOCK_SIZE+0x266>
				value->uint = (uint_value_type)-sint;
    13a2:	4252      	negs	r2, r2
    13a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    13a8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
				sign = '-';
    13ac:	262d      	movs	r6, #45	; 0x2d
    13ae:	e75a      	b.n	1266 <CONFIG_FPROTECT_BLOCK_SIZE+0x266>
		switch (conv->specifier) {
    13b0:	2600      	movs	r6, #0
    13b2:	e758      	b.n	1266 <CONFIG_FPROTECT_BLOCK_SIZE+0x266>
		char sign = 0;
    13b4:	2600      	movs	r6, #0
				conv->flag_zero = false;
    13b6:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
    13ba:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    13be:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
    13c0:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    13c4:	459a      	cmp	sl, r3
				conv->flag_zero = false;
    13c6:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
    13ca:	f67f af5a 	bls.w	1282 <CONFIG_FPROTECT_BLOCK_SIZE+0x282>
					conv->pad0_value = precision - (int)len;
    13ce:	ebaa 0303 	sub.w	r3, sl, r3
    13d2:	9311      	str	r3, [sp, #68]	; 0x44
    13d4:	e755      	b.n	1282 <CONFIG_FPROTECT_BLOCK_SIZE+0x282>
			if (value->ptr != NULL) {
    13d6:	980e      	ldr	r0, [sp, #56]	; 0x38
    13d8:	b390      	cbz	r0, 1440 <CONFIG_FPROTECT_BLOCK_SIZE+0x440>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    13da:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    13de:	9300      	str	r3, [sp, #0]
    13e0:	aa10      	add	r2, sp, #64	; 0x40
    13e2:	ab08      	add	r3, sp, #32
    13e4:	2100      	movs	r1, #0
    13e6:	f003 fd88 	bl	4efa <encode_uint>
				conv->altform_0c = true;
    13ea:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
    13ee:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    13f2:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    13f6:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
    13fa:	f1ba 0f00 	cmp.w	sl, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
    13fe:	4607      	mov	r7, r0
				conv->altform_0c = true;
    1400:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
    1404:	dad6      	bge.n	13b4 <CONFIG_FPROTECT_BLOCK_SIZE+0x3b4>
		if (bps == NULL) {
    1406:	2800      	cmp	r0, #0
    1408:	f43f aee4 	beq.w	11d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d4>
		size_t nj_len = (bpe - bps);
    140c:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    1410:	1a18      	subs	r0, r3, r0
		char sign = 0;
    1412:	2600      	movs	r6, #0
    1414:	469a      	mov	sl, r3
    1416:	e77f      	b.n	1318 <CONFIG_FPROTECT_BLOCK_SIZE+0x318>
				store_count(conv, value->ptr, count);
    1418:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
    141a:	2907      	cmp	r1, #7
    141c:	f63f aeda 	bhi.w	11d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d4>
    1420:	e8df f001 	tbb	[pc, r1]
    1424:	0c06040c 	.word	0x0c06040c
    1428:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    142c:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    142e:	e6d1      	b.n	11d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d4>
		*(short *)dp = (short)count;
    1430:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    1432:	e6cf      	b.n	11d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d4>
		*(intmax_t *)dp = (intmax_t)count;
    1434:	17ea      	asrs	r2, r5, #31
    1436:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    143a:	e6cb      	b.n	11d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d4>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    143c:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    143e:	e6c9      	b.n	11d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d4>
    1440:	4f2e      	ldr	r7, [pc, #184]	; (14fc <CONFIG_FPROTECT_BLOCK_SIZE+0x4fc>)
		char sign = 0;
    1442:	4606      	mov	r6, r0
			bpe = bps + 5;
    1444:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
    1448:	2005      	movs	r0, #5
    144a:	e765      	b.n	1318 <CONFIG_FPROTECT_BLOCK_SIZE+0x318>
		} else if (conv->altform_0) {
    144c:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    144e:	bf48      	it	mi
    1450:	3001      	addmi	r0, #1
    1452:	e769      	b.n	1328 <CONFIG_FPROTECT_BLOCK_SIZE+0x328>
    1454:	9307      	str	r3, [sp, #28]
					OUTC(pad);
    1456:	4610      	mov	r0, r2
    1458:	9206      	str	r2, [sp, #24]
    145a:	4659      	mov	r1, fp
    145c:	47c8      	blx	r9
    145e:	2800      	cmp	r0, #0
    1460:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    1464:	da04      	bge.n	1470 <CONFIG_FPROTECT_BLOCK_SIZE+0x470>
#undef OUTS
#undef OUTC
}
    1466:	b015      	add	sp, #84	; 0x54
    1468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    146c:	2220      	movs	r2, #32
					pad = '0';
    146e:	4643      	mov	r3, r8
				while (width-- > 0) {
    1470:	4619      	mov	r1, r3
    1472:	2900      	cmp	r1, #0
    1474:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    1478:	dcec      	bgt.n	1454 <CONFIG_FPROTECT_BLOCK_SIZE+0x454>
    147a:	4445      	add	r5, r8
    147c:	1a6d      	subs	r5, r5, r1
    147e:	4698      	mov	r8, r3
		if (sign != 0) {
    1480:	b12e      	cbz	r6, 148e <CONFIG_FPROTECT_BLOCK_SIZE+0x48e>
			OUTC(sign);
    1482:	4659      	mov	r1, fp
    1484:	4630      	mov	r0, r6
    1486:	47c8      	blx	r9
    1488:	2800      	cmp	r0, #0
    148a:	dbec      	blt.n	1466 <CONFIG_FPROTECT_BLOCK_SIZE+0x466>
    148c:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    148e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1492:	06da      	lsls	r2, r3, #27
    1494:	d401      	bmi.n	149a <CONFIG_FPROTECT_BLOCK_SIZE+0x49a>
    1496:	071b      	lsls	r3, r3, #28
    1498:	d505      	bpl.n	14a6 <CONFIG_FPROTECT_BLOCK_SIZE+0x4a6>
				OUTC('0');
    149a:	4659      	mov	r1, fp
    149c:	2030      	movs	r0, #48	; 0x30
    149e:	47c8      	blx	r9
    14a0:	2800      	cmp	r0, #0
    14a2:	dbe0      	blt.n	1466 <CONFIG_FPROTECT_BLOCK_SIZE+0x466>
    14a4:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    14a6:	9b05      	ldr	r3, [sp, #20]
    14a8:	b133      	cbz	r3, 14b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x4b8>
				OUTC(conv->specifier);
    14aa:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    14ae:	4659      	mov	r1, fp
    14b0:	47c8      	blx	r9
    14b2:	2800      	cmp	r0, #0
    14b4:	dbd7      	blt.n	1466 <CONFIG_FPROTECT_BLOCK_SIZE+0x466>
    14b6:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    14b8:	9e04      	ldr	r6, [sp, #16]
    14ba:	442e      	add	r6, r5
    14bc:	e005      	b.n	14ca <CONFIG_FPROTECT_BLOCK_SIZE+0x4ca>
				OUTC('0');
    14be:	4659      	mov	r1, fp
    14c0:	2030      	movs	r0, #48	; 0x30
    14c2:	47c8      	blx	r9
    14c4:	2800      	cmp	r0, #0
    14c6:	dbce      	blt.n	1466 <CONFIG_FPROTECT_BLOCK_SIZE+0x466>
    14c8:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    14ca:	1b73      	subs	r3, r6, r5
    14cc:	2b00      	cmp	r3, #0
    14ce:	dcf6      	bgt.n	14be <CONFIG_FPROTECT_BLOCK_SIZE+0x4be>
			OUTS(bps, bpe);
    14d0:	4653      	mov	r3, sl
    14d2:	463a      	mov	r2, r7
    14d4:	4659      	mov	r1, fp
    14d6:	4648      	mov	r0, r9
    14d8:	f003 fd55 	bl	4f86 <outs>
    14dc:	2800      	cmp	r0, #0
    14de:	dbc2      	blt.n	1466 <CONFIG_FPROTECT_BLOCK_SIZE+0x466>
    14e0:	4405      	add	r5, r0
		while (width > 0) {
    14e2:	44a8      	add	r8, r5
    14e4:	eba8 0305 	sub.w	r3, r8, r5
    14e8:	2b00      	cmp	r3, #0
    14ea:	f77f ae73 	ble.w	11d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d4>
			OUTC(' ');
    14ee:	4659      	mov	r1, fp
    14f0:	2020      	movs	r0, #32
    14f2:	47c8      	blx	r9
    14f4:	2800      	cmp	r0, #0
    14f6:	dbb6      	blt.n	1466 <CONFIG_FPROTECT_BLOCK_SIZE+0x466>
    14f8:	3501      	adds	r5, #1
			--width;
    14fa:	e7f3      	b.n	14e4 <CONFIG_FPROTECT_BLOCK_SIZE+0x4e4>
    14fc:	0000674b 	.word	0x0000674b

00001500 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    1500:	b508      	push	{r3, lr}
	__asm__ volatile(
    1502:	f04f 0220 	mov.w	r2, #32
    1506:	f3ef 8311 	mrs	r3, BASEPRI
    150a:	f382 8812 	msr	BASEPRI_MAX, r2
    150e:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    1512:	f000 fde7 	bl	20e4 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    1516:	4803      	ldr	r0, [pc, #12]	; (1524 <sys_reboot+0x24>)
    1518:	f003 fc1d 	bl	4d56 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    151c:	f000 fa2a 	bl	1974 <arch_cpu_idle>
    1520:	e7fc      	b.n	151c <sys_reboot+0x1c>
    1522:	bf00      	nop
    1524:	00006751 	.word	0x00006751

00001528 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    1528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    152c:	4605      	mov	r5, r0
    152e:	f04f 0320 	mov.w	r3, #32
    1532:	f3ef 8611 	mrs	r6, BASEPRI
    1536:	f383 8812 	msr	BASEPRI_MAX, r3
    153a:	f3bf 8f6f 	isb	sy
	return list->head;
    153e:	4b0e      	ldr	r3, [pc, #56]	; (1578 <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    1540:	4f0e      	ldr	r7, [pc, #56]	; (157c <pm_state_notify+0x54>)
    1542:	681c      	ldr	r4, [r3, #0]
    1544:	f8df 8038 	ldr.w	r8, [pc, #56]	; 1580 <pm_state_notify+0x58>
    1548:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    154c:	b92c      	cbnz	r4, 155a <pm_state_notify+0x32>
	__asm__ volatile(
    154e:	f386 8811 	msr	BASEPRI, r6
    1552:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    1556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    155a:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    155e:	2d00      	cmp	r5, #0
    1560:	bf18      	it	ne
    1562:	4613      	movne	r3, r2
		if (callback) {
    1564:	b12b      	cbz	r3, 1572 <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    1566:	f898 2014 	ldrb.w	r2, [r8, #20]
    156a:	fb09 f202 	mul.w	r2, r9, r2
    156e:	5cb8      	ldrb	r0, [r7, r2]
    1570:	4798      	blx	r3
	return node->next;
    1572:	6824      	ldr	r4, [r4, #0]
    1574:	e7ea      	b.n	154c <pm_state_notify+0x24>
    1576:	bf00      	nop
    1578:	2000030c 	.word	0x2000030c
    157c:	20000300 	.word	0x20000300
    1580:	2000099c 	.word	0x2000099c

00001584 <atomic_clear_bit.constprop.0>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1584:	4a0a      	ldr	r2, [pc, #40]	; (15b0 <atomic_clear_bit.constprop.0+0x2c>)
    1586:	f3bf 8f5b 	dmb	ish
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    158a:	0943      	lsrs	r3, r0, #5
    158c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    1590:	f000 001f 	and.w	r0, r0, #31
    1594:	2301      	movs	r3, #1
    1596:	4083      	lsls	r3, r0
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1598:	43db      	mvns	r3, r3
    159a:	e852 0f00 	ldrex	r0, [r2]
    159e:	4018      	ands	r0, r3
    15a0:	e842 0100 	strex	r1, r0, [r2]
    15a4:	2900      	cmp	r1, #0
    15a6:	d1f8      	bne.n	159a <atomic_clear_bit.constprop.0+0x16>
    15a8:	f3bf 8f5b 	dmb	ish
}
    15ac:	4770      	bx	lr
    15ae:	bf00      	nop
    15b0:	200002fc 	.word	0x200002fc

000015b4 <pm_system_resume>:

void pm_system_resume(void)
{
    15b4:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = _current_cpu->id;
    15b6:	4b19      	ldr	r3, [pc, #100]	; (161c <pm_system_resume+0x68>)
    15b8:	7d1c      	ldrb	r4, [r3, #20]
    15ba:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    15be:	f004 031f 	and.w	r3, r4, #31
    15c2:	2201      	movs	r2, #1
    15c4:	409a      	lsls	r2, r3
    15c6:	4b16      	ldr	r3, [pc, #88]	; (1620 <pm_system_resume+0x6c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    15c8:	0961      	lsrs	r1, r4, #5
    15ca:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    15ce:	43d0      	mvns	r0, r2
    15d0:	e853 1f00 	ldrex	r1, [r3]
    15d4:	ea01 0500 	and.w	r5, r1, r0
    15d8:	e843 5600 	strex	r6, r5, [r3]
    15dc:	2e00      	cmp	r6, #0
    15de:	d1f7      	bne.n	15d0 <pm_system_resume+0x1c>
    15e0:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    15e4:	420a      	tst	r2, r1
    15e6:	d013      	beq.n	1610 <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
    15e8:	4b0e      	ldr	r3, [pc, #56]	; (1624 <pm_system_resume+0x70>)
    15ea:	4d0f      	ldr	r5, [pc, #60]	; (1628 <pm_system_resume+0x74>)
    15ec:	b18b      	cbz	r3, 1612 <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
    15ee:	230c      	movs	r3, #12
    15f0:	4363      	muls	r3, r4
    15f2:	18ea      	adds	r2, r5, r3
    15f4:	5ce8      	ldrb	r0, [r5, r3]
    15f6:	7851      	ldrb	r1, [r2, #1]
    15f8:	f003 fd2f 	bl	505a <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    15fc:	2000      	movs	r0, #0
    15fe:	f7ff ff93 	bl	1528 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    1602:	230c      	movs	r3, #12
    1604:	435c      	muls	r4, r3
    1606:	192a      	adds	r2, r5, r4
    1608:	2300      	movs	r3, #0
    160a:	512b      	str	r3, [r5, r4]
    160c:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    1610:	bd70      	pop	{r4, r5, r6, pc}
    1612:	f383 8811 	msr	BASEPRI, r3
    1616:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    161a:	e7ef      	b.n	15fc <pm_system_resume+0x48>
    161c:	2000099c 	.word	0x2000099c
    1620:	20000314 	.word	0x20000314
    1624:	0000505b 	.word	0x0000505b
    1628:	20000300 	.word	0x20000300

0000162c <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    162c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    1630:	4b32      	ldr	r3, [pc, #200]	; (16fc <pm_system_suspend+0xd0>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1632:	4a33      	ldr	r2, [pc, #204]	; (1700 <pm_system_suspend+0xd4>)
    1634:	7d1c      	ldrb	r4, [r3, #20]
    1636:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    163a:	0963      	lsrs	r3, r4, #5
    163c:	ea4f 0883 	mov.w	r8, r3, lsl #2
    1640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1644:	4e2f      	ldr	r6, [pc, #188]	; (1704 <pm_system_suspend+0xd8>)
    1646:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    164a:	f004 091f 	and.w	r9, r4, #31
    164e:	fa43 f309 	asr.w	r3, r3, r9

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    1652:	f013 0f01 	tst.w	r3, #1
{
    1656:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    1658:	d10a      	bne.n	1670 <pm_system_suspend+0x44>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    165a:	4601      	mov	r1, r0
    165c:	4620      	mov	r0, r4
    165e:	f000 f869 	bl	1734 <pm_policy_next_state>
		if (info != NULL) {
    1662:	b128      	cbz	r0, 1670 <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
    1664:	c807      	ldmia	r0, {r0, r1, r2}
    1666:	230c      	movs	r3, #12
    1668:	fb03 6304 	mla	r3, r3, r4, r6
    166c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    1670:	230c      	movs	r3, #12
    1672:	4363      	muls	r3, r4
    1674:	18f2      	adds	r2, r6, r3
    1676:	5cf5      	ldrb	r5, [r6, r3]
    1678:	b92d      	cbnz	r5, 1686 <pm_system_suspend+0x5a>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
    167a:	4620      	mov	r0, r4
    167c:	f7ff ff82 	bl	1584 <atomic_clear_bit.constprop.0>
		ret = false;
    1680:	4628      	mov	r0, r5
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    1682:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
    1686:	1c7b      	adds	r3, r7, #1
    1688:	d010      	beq.n	16ac <pm_system_suspend+0x80>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    168a:	f8d2 c008 	ldr.w	ip, [r2, #8]
    168e:	4d1e      	ldr	r5, [pc, #120]	; (1708 <pm_system_suspend+0xdc>)
    1690:	4a1e      	ldr	r2, [pc, #120]	; (170c <pm_system_suspend+0xe0>)
    1692:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    1696:	2100      	movs	r1, #0
    1698:	fbec 5100 	umlal	r5, r1, ip, r0
    169c:	2300      	movs	r3, #0
    169e:	4628      	mov	r0, r5
    16a0:	f7fe fd2e 	bl	100 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    16a4:	2101      	movs	r1, #1
    16a6:	1a38      	subs	r0, r7, r0
    16a8:	f004 f90f 	bl	58ca <z_set_timeout_expiry>
	k_sched_lock();
    16ac:	f002 feb0 	bl	4410 <k_sched_lock>
	pm_state_notify(true);
    16b0:	2001      	movs	r0, #1
    16b2:	f7ff ff39 	bl	1528 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    16b6:	f3bf 8f5b 	dmb	ish
    16ba:	4b15      	ldr	r3, [pc, #84]	; (1710 <pm_system_suspend+0xe4>)
    16bc:	4498      	add	r8, r3
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    16be:	2301      	movs	r3, #1
    16c0:	fa03 f309 	lsl.w	r3, r3, r9
    16c4:	e858 2f00 	ldrex	r2, [r8]
    16c8:	431a      	orrs	r2, r3
    16ca:	e848 2100 	strex	r1, r2, [r8]
    16ce:	2900      	cmp	r1, #0
    16d0:	d1f8      	bne.n	16c4 <pm_system_suspend+0x98>
    16d2:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    16d6:	4b0f      	ldr	r3, [pc, #60]	; (1714 <pm_system_suspend+0xe8>)
    16d8:	b133      	cbz	r3, 16e8 <pm_system_suspend+0xbc>
		pm_state_set(info->state, info->substate_id);
    16da:	230c      	movs	r3, #12
    16dc:	4363      	muls	r3, r4
    16de:	18f2      	adds	r2, r6, r3
    16e0:	5cf0      	ldrb	r0, [r6, r3]
    16e2:	7851      	ldrb	r1, [r2, #1]
    16e4:	f003 fcad 	bl	5042 <pm_state_set>
	pm_system_resume();
    16e8:	f7ff ff64 	bl	15b4 <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
    16ec:	4620      	mov	r0, r4
    16ee:	f7ff ff49 	bl	1584 <atomic_clear_bit.constprop.0>
	k_sched_unlock();
    16f2:	f002 fea1 	bl	4438 <k_sched_unlock>
	bool ret = true;
    16f6:	2001      	movs	r0, #1
    16f8:	e7c3      	b.n	1682 <pm_system_suspend+0x56>
    16fa:	bf00      	nop
    16fc:	2000099c 	.word	0x2000099c
    1700:	200002fc 	.word	0x200002fc
    1704:	20000300 	.word	0x20000300
    1708:	000f423f 	.word	0x000f423f
    170c:	000f4240 	.word	0x000f4240
    1710:	20000314 	.word	0x20000314
    1714:	00005043 	.word	0x00005043

00001718 <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1718:	4b05      	ldr	r3, [pc, #20]	; (1730 <pm_policy_state_lock_is_active+0x18>)
    171a:	f3bf 8f5b 	dmb	ish
    171e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    1722:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
    1726:	3800      	subs	r0, #0
    1728:	bf18      	it	ne
    172a:	2001      	movne	r0, #1
    172c:	4770      	bx	lr
    172e:	bf00      	nop
    1730:	20000318 	.word	0x20000318

00001734 <pm_policy_next_state>:
{
    1734:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1738:	4688      	mov	r8, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    173a:	a901      	add	r1, sp, #4
    173c:	f000 f842 	bl	17c4 <pm_state_cpu_get_all>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    1740:	1e44      	subs	r4, r0, #1
    1742:	b224      	sxth	r4, r4
    1744:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    1748:	f8df 906c 	ldr.w	r9, [pc, #108]	; 17b8 <pm_policy_next_state+0x84>
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    174c:	4605      	mov	r5, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    174e:	00a4      	lsls	r4, r4, #2
    1750:	b925      	cbnz	r5, 175c <pm_policy_next_state+0x28>
	return NULL;
    1752:	462f      	mov	r7, r5
}
    1754:	4638      	mov	r0, r7
    1756:	b003      	add	sp, #12
    1758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    175c:	9b01      	ldr	r3, [sp, #4]
		if (pm_policy_state_lock_is_active(state->state)) {
    175e:	5d18      	ldrb	r0, [r3, r4]
		const struct pm_state_info *state = &cpu_states[i];
    1760:	191f      	adds	r7, r3, r4
		if (pm_policy_state_lock_is_active(state->state)) {
    1762:	f7ff ffd9 	bl	1718 <pm_policy_state_lock_is_active>
    1766:	4606      	mov	r6, r0
    1768:	bb10      	cbnz	r0, 17b0 <pm_policy_next_state+0x7c>
    176a:	6878      	ldr	r0, [r7, #4]
    176c:	4a13      	ldr	r2, [pc, #76]	; (17bc <pm_policy_next_state+0x88>)
    176e:	f44f 4a00 	mov.w	sl, #32768	; 0x8000
    1772:	46cc      	mov	ip, r9
    1774:	4631      	mov	r1, r6
    1776:	fbe0 c10a 	umlal	ip, r1, r0, sl
    177a:	2300      	movs	r3, #0
    177c:	4660      	mov	r0, ip
    177e:	f7fe fcbf 	bl	100 <__aeabi_uldivmod>
    1782:	4683      	mov	fp, r0
    1784:	68b8      	ldr	r0, [r7, #8]
    1786:	4a0d      	ldr	r2, [pc, #52]	; (17bc <pm_policy_next_state+0x88>)
    1788:	46cc      	mov	ip, r9
    178a:	4631      	mov	r1, r6
    178c:	fbe0 c10a 	umlal	ip, r1, r0, sl
    1790:	2300      	movs	r3, #0
    1792:	4660      	mov	r0, ip
    1794:	f7fe fcb4 	bl	100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    1798:	4b09      	ldr	r3, [pc, #36]	; (17c0 <pm_policy_next_state+0x8c>)
    179a:	681b      	ldr	r3, [r3, #0]
    179c:	1c5a      	adds	r2, r3, #1
    179e:	d001      	beq.n	17a4 <pm_policy_next_state+0x70>
    17a0:	4283      	cmp	r3, r0
    17a2:	d905      	bls.n	17b0 <pm_policy_next_state+0x7c>
		if ((ticks == K_TICKS_FOREVER) ||
    17a4:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    17a8:	d0d4      	beq.n	1754 <pm_policy_next_state+0x20>
		    (ticks >= (min_residency + exit_latency))) {
    17aa:	4458      	add	r0, fp
		if ((ticks == K_TICKS_FOREVER) ||
    17ac:	4540      	cmp	r0, r8
    17ae:	d9d1      	bls.n	1754 <pm_policy_next_state+0x20>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    17b0:	3d01      	subs	r5, #1
    17b2:	b2ad      	uxth	r5, r5
    17b4:	3c0c      	subs	r4, #12
    17b6:	e7cb      	b.n	1750 <pm_policy_next_state+0x1c>
    17b8:	000f423f 	.word	0x000f423f
    17bc:	000f4240 	.word	0x000f4240
    17c0:	20000004 	.word	0x20000004

000017c4 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    17c4:	b908      	cbnz	r0, 17ca <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    17c6:	4b02      	ldr	r3, [pc, #8]	; (17d0 <pm_state_cpu_get_all+0xc>)
    17c8:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    17ca:	2000      	movs	r0, #0
    17cc:	4770      	bx	lr
    17ce:	bf00      	nop
    17d0:	00005ba8 	.word	0x00005ba8

000017d4 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    17d4:	4801      	ldr	r0, [pc, #4]	; (17dc <nrf_cc3xx_platform_abort_init+0x8>)
    17d6:	f003 b8f7 	b.w	49c8 <nrf_cc3xx_platform_set_abort>
    17da:	bf00      	nop
    17dc:	00005ba8 	.word	0x00005ba8

000017e0 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    17e0:	b510      	push	{r4, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    17e2:	4604      	mov	r4, r0
    17e4:	b918      	cbnz	r0, 17ee <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    17e6:	4b0d      	ldr	r3, [pc, #52]	; (181c <mutex_free_platform+0x3c>)
    17e8:	480d      	ldr	r0, [pc, #52]	; (1820 <mutex_free_platform+0x40>)
    17ea:	685b      	ldr	r3, [r3, #4]
    17ec:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    17ee:	6861      	ldr	r1, [r4, #4]
    17f0:	f031 0304 	bics.w	r3, r1, #4
    17f4:	d00c      	beq.n	1810 <mutex_free_platform+0x30>
    17f6:	2908      	cmp	r1, #8
    17f8:	d00a      	beq.n	1810 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    17fa:	f011 0102 	ands.w	r1, r1, #2
    17fe:	d008      	beq.n	1812 <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    1800:	4808      	ldr	r0, [pc, #32]	; (1824 <mutex_free_platform+0x44>)
    1802:	4621      	mov	r1, r4
    1804:	f003 ff58 	bl	56b8 <k_mem_slab_free>
        mutex->mutex = NULL;
    1808:	2300      	movs	r3, #0
    180a:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    180c:	2300      	movs	r3, #0
    180e:	6063      	str	r3, [r4, #4]
}
    1810:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1812:	6820      	ldr	r0, [r4, #0]
    1814:	2214      	movs	r2, #20
    1816:	f003 fc08 	bl	502a <memset>
    181a:	e7f7      	b.n	180c <mutex_free_platform+0x2c>
    181c:	200000e0 	.word	0x200000e0
    1820:	0000677a 	.word	0x0000677a
    1824:	20000834 	.word	0x20000834

00001828 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1828:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    182a:	b308      	cbz	r0, 1870 <mutex_lock_platform+0x48>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    182c:	6843      	ldr	r3, [r0, #4]
    182e:	2b04      	cmp	r3, #4
    1830:	d110      	bne.n	1854 <mutex_lock_platform+0x2c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    1832:	2201      	movs	r2, #1
    1834:	6803      	ldr	r3, [r0, #0]
    1836:	f3bf 8f5b 	dmb	ish
    183a:	e853 1f00 	ldrex	r1, [r3]
    183e:	2900      	cmp	r1, #0
    1840:	d103      	bne.n	184a <mutex_lock_platform+0x22>
    1842:	e843 2000 	strex	r0, r2, [r3]
    1846:	2800      	cmp	r0, #0
    1848:	d1f7      	bne.n	183a <mutex_lock_platform+0x12>
    184a:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    184e:	d10b      	bne.n	1868 <mutex_lock_platform+0x40>

        p_mutex = (struct k_mutex *)mutex->mutex;

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
            return NRF_CC3XX_PLATFORM_SUCCESS;
    1850:	2000      	movs	r0, #0
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    1852:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1854:	b153      	cbz	r3, 186c <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
    1856:	6800      	ldr	r0, [r0, #0]
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
    1858:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    185c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1860:	f002 fac6 	bl	3df0 <z_impl_k_mutex_lock>
        if (ret == 0) {
    1864:	2800      	cmp	r0, #0
    1866:	d0f3      	beq.n	1850 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1868:	4803      	ldr	r0, [pc, #12]	; (1878 <mutex_lock_platform+0x50>)
    186a:	e7f2      	b.n	1852 <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    186c:	4803      	ldr	r0, [pc, #12]	; (187c <mutex_lock_platform+0x54>)
    186e:	e7f0      	b.n	1852 <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1870:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    1874:	e7ed      	b.n	1852 <mutex_lock_platform+0x2a>
    1876:	bf00      	nop
    1878:	ffff8fe9 	.word	0xffff8fe9
    187c:	ffff8fea 	.word	0xffff8fea

00001880 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1880:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    1882:	b1c0      	cbz	r0, 18b6 <mutex_unlock_platform+0x36>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    1884:	6843      	ldr	r3, [r0, #4]
    1886:	2b04      	cmp	r3, #4
    1888:	d110      	bne.n	18ac <mutex_unlock_platform+0x2c>
    188a:	2200      	movs	r2, #0
    188c:	6803      	ldr	r3, [r0, #0]
    188e:	f3bf 8f5b 	dmb	ish
    1892:	e853 1f00 	ldrex	r1, [r3]
    1896:	2901      	cmp	r1, #1
    1898:	d103      	bne.n	18a2 <mutex_unlock_platform+0x22>
    189a:	e843 2000 	strex	r0, r2, [r3]
    189e:	2800      	cmp	r0, #0
    18a0:	d1f7      	bne.n	1892 <mutex_unlock_platform+0x12>
    18a2:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    18a6:	d109      	bne.n	18bc <mutex_unlock_platform+0x3c>
        }

        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    18a8:	2000      	movs	r0, #0
    }
}
    18aa:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    18ac:	b143      	cbz	r3, 18c0 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
    18ae:	6800      	ldr	r0, [r0, #0]
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    18b0:	f002 fb16 	bl	3ee0 <z_impl_k_mutex_unlock>
    18b4:	e7f8      	b.n	18a8 <mutex_unlock_platform+0x28>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    18b6:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    18ba:	e7f6      	b.n	18aa <mutex_unlock_platform+0x2a>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    18bc:	4801      	ldr	r0, [pc, #4]	; (18c4 <mutex_unlock_platform+0x44>)
    18be:	e7f4      	b.n	18aa <mutex_unlock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    18c0:	4801      	ldr	r0, [pc, #4]	; (18c8 <mutex_unlock_platform+0x48>)
    18c2:	e7f2      	b.n	18aa <mutex_unlock_platform+0x2a>
    18c4:	ffff8fe9 	.word	0xffff8fe9
    18c8:	ffff8fea 	.word	0xffff8fea

000018cc <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    18cc:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    18ce:	4604      	mov	r4, r0
    18d0:	b918      	cbnz	r0, 18da <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    18d2:	4b16      	ldr	r3, [pc, #88]	; (192c <mutex_init_platform+0x60>)
    18d4:	4816      	ldr	r0, [pc, #88]	; (1930 <mutex_init_platform+0x64>)
    18d6:	685b      	ldr	r3, [r3, #4]
    18d8:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    18da:	6863      	ldr	r3, [r4, #4]
    18dc:	2b04      	cmp	r3, #4
    18de:	d023      	beq.n	1928 <mutex_init_platform+0x5c>
    18e0:	2b08      	cmp	r3, #8
    18e2:	d021      	beq.n	1928 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    18e4:	b9cb      	cbnz	r3, 191a <mutex_init_platform+0x4e>
    18e6:	6823      	ldr	r3, [r4, #0]
    18e8:	b9bb      	cbnz	r3, 191a <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    18ea:	4812      	ldr	r0, [pc, #72]	; (1934 <mutex_init_platform+0x68>)
    18ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    18f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    18f4:	4621      	mov	r1, r4
    18f6:	f002 f9a3 	bl	3c40 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    18fa:	b908      	cbnz	r0, 1900 <mutex_init_platform+0x34>
    18fc:	6823      	ldr	r3, [r4, #0]
    18fe:	b91b      	cbnz	r3, 1908 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    1900:	4b0a      	ldr	r3, [pc, #40]	; (192c <mutex_init_platform+0x60>)
    1902:	480d      	ldr	r0, [pc, #52]	; (1938 <mutex_init_platform+0x6c>)
    1904:	685b      	ldr	r3, [r3, #4]
    1906:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1908:	6820      	ldr	r0, [r4, #0]
    190a:	2214      	movs	r2, #20
    190c:	2100      	movs	r1, #0
    190e:	f003 fb8c 	bl	502a <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    1912:	6863      	ldr	r3, [r4, #4]
    1914:	f043 0302 	orr.w	r3, r3, #2
    1918:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    191a:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    191c:	f003 ff0a 	bl	5734 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    1920:	6863      	ldr	r3, [r4, #4]
    1922:	f043 0301 	orr.w	r3, r3, #1
    1926:	6063      	str	r3, [r4, #4]
}
    1928:	bd10      	pop	{r4, pc}
    192a:	bf00      	nop
    192c:	200000e0 	.word	0x200000e0
    1930:	0000677a 	.word	0x0000677a
    1934:	20000834 	.word	0x20000834
    1938:	000067a0 	.word	0x000067a0

0000193c <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    193c:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    193e:	4906      	ldr	r1, [pc, #24]	; (1958 <nrf_cc3xx_platform_mutex_init+0x1c>)
    1940:	4806      	ldr	r0, [pc, #24]	; (195c <nrf_cc3xx_platform_mutex_init+0x20>)
    1942:	2340      	movs	r3, #64	; 0x40
    1944:	2214      	movs	r2, #20
    1946:	f003 fe9c 	bl	5682 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    194a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    194e:	4904      	ldr	r1, [pc, #16]	; (1960 <nrf_cc3xx_platform_mutex_init+0x24>)
    1950:	4804      	ldr	r0, [pc, #16]	; (1964 <nrf_cc3xx_platform_mutex_init+0x28>)
    1952:	f003 b899 	b.w	4a88 <nrf_cc3xx_platform_set_mutexes>
    1956:	bf00      	nop
    1958:	20000334 	.word	0x20000334
    195c:	20000834 	.word	0x20000834
    1960:	00005bb0 	.word	0x00005bb0
    1964:	00005bc4 	.word	0x00005bc4

00001968 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1968:	4901      	ldr	r1, [pc, #4]	; (1970 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    196a:	2210      	movs	r2, #16
	str	r2, [r1]
    196c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    196e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    1970:	e000ed10 	.word	0xe000ed10

00001974 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1974:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    1976:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    1978:	f380 8811 	msr	BASEPRI, r0
	isb
    197c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    1980:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    1984:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    1986:	b662      	cpsie	i
	isb
    1988:	f3bf 8f6f 	isb	sy

	bx	lr
    198c:	4770      	bx	lr
    198e:	bf00      	nop

00001990 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    1990:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    1992:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    1994:	f381 8811 	msr	BASEPRI, r1

	wfe
    1998:	bf20      	wfe

	msr	BASEPRI, r0
    199a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    199e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    19a0:	4770      	bx	lr
    19a2:	bf00      	nop

000019a4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    19a4:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    19a6:	2800      	cmp	r0, #0
    19a8:	db07      	blt.n	19ba <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    19aa:	4a04      	ldr	r2, [pc, #16]	; (19bc <arch_irq_enable+0x18>)
    19ac:	0941      	lsrs	r1, r0, #5
    19ae:	2301      	movs	r3, #1
    19b0:	f000 001f 	and.w	r0, r0, #31
    19b4:	4083      	lsls	r3, r0
    19b6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    19ba:	4770      	bx	lr
    19bc:	e000e100 	.word	0xe000e100

000019c0 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    19c0:	4b05      	ldr	r3, [pc, #20]	; (19d8 <arch_irq_is_enabled+0x18>)
    19c2:	0942      	lsrs	r2, r0, #5
    19c4:	f000 001f 	and.w	r0, r0, #31
    19c8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    19cc:	2301      	movs	r3, #1
    19ce:	fa03 f000 	lsl.w	r0, r3, r0
}
    19d2:	4010      	ands	r0, r2
    19d4:	4770      	bx	lr
    19d6:	bf00      	nop
    19d8:	e000e100 	.word	0xe000e100

000019dc <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    19dc:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    19de:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    19e0:	bfa8      	it	ge
    19e2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    19e6:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    19ea:	bfb8      	it	lt
    19ec:	4b06      	ldrlt	r3, [pc, #24]	; (1a08 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    19ee:	ea4f 1141 	mov.w	r1, r1, lsl #5
    19f2:	bfac      	ite	ge
    19f4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    19f8:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    19fc:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    19fe:	bfb4      	ite	lt
    1a00:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1a02:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
}
    1a06:	4770      	bx	lr
    1a08:	e000ed14 	.word	0xe000ed14

00001a0c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1a0c:	bf30      	wfi
    b z_SysNmiOnReset
    1a0e:	f7ff bffd 	b.w	1a0c <z_SysNmiOnReset>
    1a12:	bf00      	nop

00001a14 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1a14:	4a0b      	ldr	r2, [pc, #44]	; (1a44 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    1a16:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1a18:	4b0b      	ldr	r3, [pc, #44]	; (1a48 <z_arm_prep_c+0x34>)
    1a1a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    1a1e:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1a20:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1a24:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    1a28:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1a2c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1a30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1a34:	f002 f834 	bl	3aa0 <z_bss_zero>
	z_data_copy();
    1a38:	f002 fe1a 	bl	4670 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1a3c:	f000 f9c4 	bl	1dc8 <z_arm_interrupt_init>
	z_cstart();
    1a40:	f002 f872 	bl	3b28 <z_cstart>
    1a44:	00000000 	.word	0x00000000
    1a48:	e000ed00 	.word	0xe000ed00

00001a4c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    1a4c:	4a09      	ldr	r2, [pc, #36]	; (1a74 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    1a4e:	490a      	ldr	r1, [pc, #40]	; (1a78 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    1a50:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    1a52:	6809      	ldr	r1, [r1, #0]
    1a54:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1a56:	4909      	ldr	r1, [pc, #36]	; (1a7c <arch_swap+0x30>)
	_current->arch.basepri = key;
    1a58:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1a5a:	684b      	ldr	r3, [r1, #4]
    1a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1a60:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    1a62:	2300      	movs	r3, #0
    1a64:	f383 8811 	msr	BASEPRI, r3
    1a68:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1a6c:	6893      	ldr	r3, [r2, #8]
}
    1a6e:	6f98      	ldr	r0, [r3, #120]	; 0x78
    1a70:	4770      	bx	lr
    1a72:	bf00      	nop
    1a74:	2000099c 	.word	0x2000099c
    1a78:	00005d00 	.word	0x00005d00
    1a7c:	e000ed00 	.word	0xe000ed00

00001a80 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1a80:	4912      	ldr	r1, [pc, #72]	; (1acc <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1a82:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1a84:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    1a88:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    1a8a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    1a8e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1a92:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    1a94:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1a98:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1a9c:	4f0c      	ldr	r7, [pc, #48]	; (1ad0 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1a9e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    1aa2:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    1aa4:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    1aa6:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1aa8:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    1aaa:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1aac:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1aae:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    1ab2:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    1ab4:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    1ab6:	f000 fa23 	bl	1f00 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    1aba:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1abe:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    1ac2:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    1ac6:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    1aca:	4770      	bx	lr
    ldr r1, =_kernel
    1acc:	2000099c 	.word	0x2000099c
    ldr v4, =_SCS_ICSR
    1ad0:	e000ed04 	.word	0xe000ed04

00001ad4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    1ad4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1ad8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1ada:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1ade:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    1ae2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    1ae4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1ae8:	2902      	cmp	r1, #2
    beq _oops
    1aea:	d0ff      	beq.n	1aec <_oops>

00001aec <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1aec:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    1aee:	f003 fa68 	bl	4fc2 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    1af2:	bd01      	pop	{r0, pc}

00001af4 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    1af4:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    1af8:	9b00      	ldr	r3, [sp, #0]
    1afa:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    1afe:	490a      	ldr	r1, [pc, #40]	; (1b28 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    1b00:	9b01      	ldr	r3, [sp, #4]
    1b02:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    1b06:	9b02      	ldr	r3, [sp, #8]
    1b08:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    1b0c:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    1b10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    1b14:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    1b18:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    1b1c:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    1b1e:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    1b20:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    1b22:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1b24:	4770      	bx	lr
    1b26:	bf00      	nop
    1b28:	00004ee7 	.word	0x00004ee7

00001b2c <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    1b2c:	4a09      	ldr	r2, [pc, #36]	; (1b54 <z_check_thread_stack_fail+0x28>)
{
    1b2e:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    1b30:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    1b32:	b170      	cbz	r0, 1b52 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    1b34:	f113 0f16 	cmn.w	r3, #22
    1b38:	6e40      	ldr	r0, [r0, #100]	; 0x64
    1b3a:	d005      	beq.n	1b48 <z_check_thread_stack_fail+0x1c>
    1b3c:	f1a0 0220 	sub.w	r2, r0, #32
    1b40:	429a      	cmp	r2, r3
    1b42:	d805      	bhi.n	1b50 <z_check_thread_stack_fail+0x24>
    1b44:	4283      	cmp	r3, r0
    1b46:	d203      	bcs.n	1b50 <z_check_thread_stack_fail+0x24>
		return 0;
    1b48:	4281      	cmp	r1, r0
    1b4a:	bf28      	it	cs
    1b4c:	2000      	movcs	r0, #0
    1b4e:	4770      	bx	lr
    1b50:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
    1b52:	4770      	bx	lr
    1b54:	2000099c 	.word	0x2000099c

00001b58 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    1b58:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    1b5a:	4b09      	ldr	r3, [pc, #36]	; (1b80 <arch_switch_to_main_thread+0x28>)
    1b5c:	6098      	str	r0, [r3, #8]
{
    1b5e:	460d      	mov	r5, r1
    1b60:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    1b62:	f000 f9cd 	bl	1f00 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    1b66:	4620      	mov	r0, r4
    1b68:	f385 8809 	msr	PSP, r5
    1b6c:	2100      	movs	r1, #0
    1b6e:	b663      	cpsie	if
    1b70:	f381 8811 	msr	BASEPRI, r1
    1b74:	f3bf 8f6f 	isb	sy
    1b78:	2200      	movs	r2, #0
    1b7a:	2300      	movs	r3, #0
    1b7c:	f003 f9b3 	bl	4ee6 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    1b80:	2000099c 	.word	0x2000099c

00001b84 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1b84:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    1b86:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1b88:	4a0b      	ldr	r2, [pc, #44]	; (1bb8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1b8a:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    1b8c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1b8e:	bf1e      	ittt	ne
	movne	r1, #0
    1b90:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1b92:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    1b94:	f003 fdbf 	blne	5716 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1b98:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    1b9a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1b9e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1ba2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    1ba6:	4905      	ldr	r1, [pc, #20]	; (1bbc <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1ba8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1baa:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    1bac:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    1bae:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    1bb2:	4903      	ldr	r1, [pc, #12]	; (1bc0 <_isr_wrapper+0x3c>)
	bx r1
    1bb4:	4708      	bx	r1
    1bb6:	0000      	.short	0x0000
	ldr r2, =_kernel
    1bb8:	2000099c 	.word	0x2000099c
	ldr r1, =_sw_isr_table
    1bbc:	000059f8 	.word	0x000059f8
	ldr r1, =z_arm_int_exit
    1bc0:	00001bc5 	.word	0x00001bc5

00001bc4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    1bc4:	4b04      	ldr	r3, [pc, #16]	; (1bd8 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    1bc6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    1bc8:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    1bca:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    1bcc:	d003      	beq.n	1bd6 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    1bce:	4903      	ldr	r1, [pc, #12]	; (1bdc <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    1bd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    1bd4:	600a      	str	r2, [r1, #0]

00001bd6 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    1bd6:	4770      	bx	lr
	ldr r3, =_kernel
    1bd8:	2000099c 	.word	0x2000099c
	ldr r1, =_SCS_ICSR
    1bdc:	e000ed04 	.word	0xe000ed04

00001be0 <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1be0:	4b0d      	ldr	r3, [pc, #52]	; (1c18 <bus_fault.constprop.0+0x38>)
    1be2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1be4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1be6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1be8:	0592      	lsls	r2, r2, #22
    1bea:	d508      	bpl.n	1bfe <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    1bec:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    1bee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1bf0:	0412      	lsls	r2, r2, #16
    1bf2:	d504      	bpl.n	1bfe <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    1bf4:	b118      	cbz	r0, 1bfe <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1bf6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1bf8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    1bfc:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1bfe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1c00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1c02:	05d2      	lsls	r2, r2, #23
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1c04:	4a04      	ldr	r2, [pc, #16]	; (1c18 <bus_fault.constprop.0+0x38>)
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1c06:	bf58      	it	pl
    1c08:	6a9b      	ldrpl	r3, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1c0a:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    1c0c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1c0e:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    1c12:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1c14:	7008      	strb	r0, [r1, #0]

	return reason;
}
    1c16:	4770      	bx	lr
    1c18:	e000ed00 	.word	0xe000ed00

00001c1c <mem_manage_fault.constprop.0>:
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1c1c:	4b1d      	ldr	r3, [pc, #116]	; (1c94 <mem_manage_fault.constprop.0+0x78>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    1c1e:	b570      	push	{r4, r5, r6, lr}
    1c20:	4615      	mov	r5, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1c22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    1c24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1c26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1c28:	0792      	lsls	r2, r2, #30
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    1c2a:	4606      	mov	r6, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1c2c:	d522      	bpl.n	1c74 <mem_manage_fault.constprop.0+0x58>
		uint32_t temp = SCB->MMFAR;
    1c2e:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    1c30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1c32:	0614      	lsls	r4, r2, #24
    1c34:	d51e      	bpl.n	1c74 <mem_manage_fault.constprop.0+0x58>
			if (from_hard_fault != 0) {
    1c36:	b119      	cbz	r1, 1c40 <mem_manage_fault.constprop.0+0x24>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1c38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1c3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    1c3e:	629a      	str	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    1c40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1c42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1c44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1c46:	4c13      	ldr	r4, [pc, #76]	; (1c94 <mem_manage_fault.constprop.0+0x78>)
    1c48:	f012 0f10 	tst.w	r2, #16
    1c4c:	d115      	bne.n	1c7a <mem_manage_fault.constprop.0+0x5e>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    1c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1c50:	0799      	lsls	r1, r3, #30
    1c52:	d412      	bmi.n	1c7a <mem_manage_fault.constprop.0+0x5e>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1c54:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1c56:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1c58:	4a0e      	ldr	r2, [pc, #56]	; (1c94 <mem_manage_fault.constprop.0+0x78>)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1c5a:	069b      	lsls	r3, r3, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    1c5c:	bf42      	ittt	mi
    1c5e:	6a63      	ldrmi	r3, [r4, #36]	; 0x24
    1c60:	f423 5300 	bicmi.w	r3, r3, #8192	; 0x2000
    1c64:	6263      	strmi	r3, [r4, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1c66:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1c68:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    1c6c:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1c6e:	2300      	movs	r3, #0
    1c70:	702b      	strb	r3, [r5, #0]
}
    1c72:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
    1c74:	f06f 0015 	mvn.w	r0, #21
    1c78:	e7e2      	b.n	1c40 <mem_manage_fault.constprop.0+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    1c7a:	6863      	ldr	r3, [r4, #4]
    1c7c:	051a      	lsls	r2, r3, #20
    1c7e:	d5e9      	bpl.n	1c54 <mem_manage_fault.constprop.0+0x38>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    1c80:	4631      	mov	r1, r6
    1c82:	f7ff ff53 	bl	1b2c <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    1c86:	2800      	cmp	r0, #0
    1c88:	d0e4      	beq.n	1c54 <mem_manage_fault.constprop.0+0x38>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    1c8a:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    1c8e:	2002      	movs	r0, #2
    1c90:	e7e1      	b.n	1c56 <mem_manage_fault.constprop.0+0x3a>
    1c92:	bf00      	nop
    1c94:	e000ed00 	.word	0xe000ed00

00001c98 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    1c98:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1c9a:	4b41      	ldr	r3, [pc, #260]	; (1da0 <z_arm_fault+0x108>)
    1c9c:	685b      	ldr	r3, [r3, #4]
{
    1c9e:	b08a      	sub	sp, #40	; 0x28
    1ca0:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1ca6:	2600      	movs	r6, #0
    1ca8:	f386 8811 	msr	BASEPRI, r6
    1cac:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    1cb0:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
    1cb4:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
    1cb8:	d111      	bne.n	1cde <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    1cba:	f002 000c 	and.w	r0, r2, #12
    1cbe:	2808      	cmp	r0, #8
    1cc0:	d00d      	beq.n	1cde <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    1cc2:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    1cc4:	bf4c      	ite	mi
    1cc6:	460d      	movmi	r5, r1
			*nested_exc = true;
    1cc8:	2601      	movpl	r6, #1
	*recoverable = false;
    1cca:	2200      	movs	r2, #0
	switch (fault) {
    1ccc:	3b03      	subs	r3, #3
	*recoverable = false;
    1cce:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    1cd2:	2b03      	cmp	r3, #3
    1cd4:	d83b      	bhi.n	1d4e <z_arm_fault+0xb6>
    1cd6:	e8df f003 	tbb	[pc, r3]
    1cda:	5304      	.short	0x5304
    1cdc:	5b57      	.short	0x5b57
		return NULL;
    1cde:	4635      	mov	r5, r6
    1ce0:	e7f3      	b.n	1cca <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1ce2:	4b2f      	ldr	r3, [pc, #188]	; (1da0 <z_arm_fault+0x108>)
    1ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1ce6:	0791      	lsls	r1, r2, #30
    1ce8:	d431      	bmi.n	1d4e <z_arm_fault+0xb6>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    1cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1cec:	2a00      	cmp	r2, #0
    1cee:	db2e      	blt.n	1d4e <z_arm_fault+0xb6>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1cf2:	0052      	lsls	r2, r2, #1
    1cf4:	d52b      	bpl.n	1d4e <z_arm_fault+0xb6>
	uint16_t fault_insn = *(ret_addr - 1);
    1cf6:	69aa      	ldr	r2, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    1cf8:	f832 1c02 	ldrh.w	r1, [r2, #-2]
    1cfc:	f64d 7202 	movw	r2, #57090	; 0xdf02
    1d00:	4291      	cmp	r1, r2
    1d02:	d00a      	beq.n	1d1a <z_arm_fault+0x82>
		} else if (SCB_MMFSR != 0) {
    1d04:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    1d08:	b14a      	cbz	r2, 1d1e <z_arm_fault+0x86>
			reason = mem_manage_fault(esf, 1, recoverable);
    1d0a:	f10d 0207 	add.w	r2, sp, #7
    1d0e:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    1d10:	4628      	mov	r0, r5
    1d12:	f7ff ff83 	bl	1c1c <mem_manage_fault.constprop.0>
    1d16:	4604      	mov	r4, r0
		break;
    1d18:	e01a      	b.n	1d50 <z_arm_fault+0xb8>
			reason = esf->basic.r0;
    1d1a:	682c      	ldr	r4, [r5, #0]
    1d1c:	e018      	b.n	1d50 <z_arm_fault+0xb8>
		} else if (SCB_BFSR != 0) {
    1d1e:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
    1d22:	b12a      	cbz	r2, 1d30 <z_arm_fault+0x98>
			reason = bus_fault(esf, 1, recoverable);
    1d24:	f10d 0107 	add.w	r1, sp, #7
    1d28:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    1d2a:	f7ff ff59 	bl	1be0 <bus_fault.constprop.0>
    1d2e:	e7f2      	b.n	1d16 <z_arm_fault+0x7e>
		} else if (SCB_UFSR != 0) {
    1d30:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    1d32:	b292      	uxth	r2, r2
    1d34:	b15a      	cbz	r2, 1d4e <z_arm_fault+0xb6>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1d36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1d38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1d3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1d3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1d3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1d40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1d42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1d44:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    1d48:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    1d4c:	629a      	str	r2, [r3, #40]	; 0x28
		return NULL;
    1d4e:	2400      	movs	r4, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    1d50:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1d54:	b993      	cbnz	r3, 1d7c <z_arm_fault+0xe4>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    1d56:	2220      	movs	r2, #32
    1d58:	4629      	mov	r1, r5
    1d5a:	a802      	add	r0, sp, #8
    1d5c:	f003 f95a 	bl	5014 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    1d60:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1d62:	b1be      	cbz	r6, 1d94 <z_arm_fault+0xfc>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    1d64:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1d68:	b922      	cbnz	r2, 1d74 <z_arm_fault+0xdc>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1d6a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    1d6e:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1d72:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    1d74:	a902      	add	r1, sp, #8
    1d76:	4620      	mov	r0, r4
    1d78:	f003 f921 	bl	4fbe <z_arm_fatal_error>
}
    1d7c:	b00a      	add	sp, #40	; 0x28
    1d7e:	bd70      	pop	{r4, r5, r6, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    1d80:	f10d 0207 	add.w	r2, sp, #7
    1d84:	2100      	movs	r1, #0
    1d86:	e7c3      	b.n	1d10 <z_arm_fault+0x78>
		reason = bus_fault(esf, 0, recoverable);
    1d88:	f10d 0107 	add.w	r1, sp, #7
    1d8c:	2000      	movs	r0, #0
    1d8e:	e7cc      	b.n	1d2a <z_arm_fault+0x92>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1d90:	4b03      	ldr	r3, [pc, #12]	; (1da0 <z_arm_fault+0x108>)
    1d92:	e7d0      	b.n	1d36 <z_arm_fault+0x9e>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1d94:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    1d98:	f023 0301 	bic.w	r3, r3, #1
    1d9c:	e7e9      	b.n	1d72 <z_arm_fault+0xda>
    1d9e:	bf00      	nop
    1da0:	e000ed00 	.word	0xe000ed00

00001da4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1da4:	4a02      	ldr	r2, [pc, #8]	; (1db0 <z_arm_fault_init+0xc>)
    1da6:	6953      	ldr	r3, [r2, #20]
    1da8:	f043 0310 	orr.w	r3, r3, #16
    1dac:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    1dae:	4770      	bx	lr
    1db0:	e000ed00 	.word	0xe000ed00

00001db4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    1db4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    1db8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    1dbc:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    1dbe:	4672      	mov	r2, lr
	bl z_arm_fault
    1dc0:	f7ff ff6a 	bl	1c98 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    1dc4:	bd01      	pop	{r0, pc}
    1dc6:	bf00      	nop

00001dc8 <z_arm_interrupt_init>:
    1dc8:	4804      	ldr	r0, [pc, #16]	; (1ddc <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    1dca:	2300      	movs	r3, #0
    1dcc:	2120      	movs	r1, #32
    1dce:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1dd0:	3301      	adds	r3, #1
    1dd2:	2b30      	cmp	r3, #48	; 0x30
    1dd4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1dd8:	d1f9      	bne.n	1dce <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    1dda:	4770      	bx	lr
    1ddc:	e000e100 	.word	0xe000e100

00001de0 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    1de0:	2000      	movs	r0, #0
    msr CONTROL, r0
    1de2:	f380 8814 	msr	CONTROL, r0
    isb
    1de6:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    1dea:	f003 fd93 	bl	5914 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    1dee:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    1df0:	490d      	ldr	r1, [pc, #52]	; (1e28 <__start+0x48>)
    str r0, [r1]
    1df2:	6008      	str	r0, [r1, #0]
    dsb
    1df4:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1df8:	480c      	ldr	r0, [pc, #48]	; (1e2c <__start+0x4c>)
    msr msp, r0
    1dfa:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    1dfe:	f000 f82b 	bl	1e58 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1e02:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1e04:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    1e08:	4809      	ldr	r0, [pc, #36]	; (1e30 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    1e0a:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    1e0e:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1e10:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    1e14:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    1e18:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    1e1a:	4308      	orrs	r0, r1
    msr CONTROL, r0
    1e1c:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    1e20:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    1e24:	f7ff fdf6 	bl	1a14 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    1e28:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1e2c:	20001d40 	.word	0x20001d40
    ldr r0, =z_interrupt_stacks
    1e30:	20000fc0 	.word	0x20000fc0

00001e34 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    1e34:	4907      	ldr	r1, [pc, #28]	; (1e54 <z_arm_clear_arm_mpu_config+0x20>)
    1e36:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    1e3a:	2300      	movs	r3, #0
	int num_regions =
    1e3c:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    1e40:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    1e42:	4293      	cmp	r3, r2
    1e44:	db00      	blt.n	1e48 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    1e46:	4770      	bx	lr
  MPU->RNR = rnr;
    1e48:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    1e4c:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    1e50:	3301      	adds	r3, #1
    1e52:	e7f6      	b.n	1e42 <z_arm_clear_arm_mpu_config+0xe>
    1e54:	e000ed00 	.word	0xe000ed00

00001e58 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    1e58:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    1e5a:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    1e5c:	2300      	movs	r3, #0
    1e5e:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    1e62:	f7ff ffe7 	bl	1e34 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    1e66:	4b14      	ldr	r3, [pc, #80]	; (1eb8 <z_arm_init_arch_hw_at_boot+0x60>)
    1e68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1e6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    1e70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    1e74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    1e78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    1e7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    1e80:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    1e84:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    1e88:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1e8c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    1e90:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    1e94:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    1e98:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    1e9c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    1ea0:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    1ea4:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    1ea8:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    1eac:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    1eae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1eb2:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    1eb6:	bd08      	pop	{r3, pc}
    1eb8:	e000e100 	.word	0xe000e100

00001ebc <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    1ebc:	4b08      	ldr	r3, [pc, #32]	; (1ee0 <z_impl_k_thread_abort+0x24>)
    1ebe:	689b      	ldr	r3, [r3, #8]
    1ec0:	4283      	cmp	r3, r0
    1ec2:	d10b      	bne.n	1edc <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    1ec4:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    1ec8:	b143      	cbz	r3, 1edc <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1eca:	4b06      	ldr	r3, [pc, #24]	; (1ee4 <z_impl_k_thread_abort+0x28>)
    1ecc:	685a      	ldr	r2, [r3, #4]
    1ece:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    1ed2:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    1ed4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1ed6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    1eda:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    1edc:	f002 bb76 	b.w	45cc <z_thread_abort>
    1ee0:	2000099c 	.word	0x2000099c
    1ee4:	e000ed00 	.word	0xe000ed00

00001ee8 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    1ee8:	4b02      	ldr	r3, [pc, #8]	; (1ef4 <z_arm_configure_static_mpu_regions+0xc>)
    1eea:	4a03      	ldr	r2, [pc, #12]	; (1ef8 <z_arm_configure_static_mpu_regions+0x10>)
    1eec:	4803      	ldr	r0, [pc, #12]	; (1efc <z_arm_configure_static_mpu_regions+0x14>)
    1eee:	2101      	movs	r1, #1
    1ef0:	f000 b870 	b.w	1fd4 <arm_core_mpu_configure_static_mpu_regions>
    1ef4:	20040000 	.word	0x20040000
    1ef8:	20000000 	.word	0x20000000
    1efc:	00005bd4 	.word	0x00005bd4

00001f00 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    1f00:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    1f02:	4b05      	ldr	r3, [pc, #20]	; (1f18 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    1f04:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    1f06:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    1f08:	4a04      	ldr	r2, [pc, #16]	; (1f1c <z_arm_configure_dynamic_mpu_regions+0x1c>)
    1f0a:	2120      	movs	r1, #32
    1f0c:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    1f10:	4618      	mov	r0, r3
    1f12:	2101      	movs	r1, #1
    1f14:	f000 b868 	b.w	1fe8 <arm_core_mpu_configure_dynamic_mpu_regions>
    1f18:	20000850 	.word	0x20000850
    1f1c:	150b0000 	.word	0x150b0000

00001f20 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    1f20:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    1f22:	4e20      	ldr	r6, [pc, #128]	; (1fa4 <mpu_configure_regions+0x84>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    1f24:	2500      	movs	r5, #0
    1f26:	428d      	cmp	r5, r1
    1f28:	db01      	blt.n	1f2e <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    1f2a:	4610      	mov	r0, r2
    1f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    1f2e:	6844      	ldr	r4, [r0, #4]
    1f30:	b374      	cbz	r4, 1f90 <mpu_configure_regions+0x70>
		if (do_sanity_check &&
    1f32:	b153      	cbz	r3, 1f4a <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    1f34:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    1f38:	ea14 0f0c 	tst.w	r4, ip
    1f3c:	d12f      	bne.n	1f9e <mpu_configure_regions+0x7e>
		&&
    1f3e:	2c1f      	cmp	r4, #31
    1f40:	d92d      	bls.n	1f9e <mpu_configure_regions+0x7e>
		((part->start & (part->size - 1U)) == 0U);
    1f42:	6807      	ldr	r7, [r0, #0]
		&&
    1f44:	ea1c 0f07 	tst.w	ip, r7
    1f48:	d129      	bne.n	1f9e <mpu_configure_regions+0x7e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    1f4a:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    1f4c:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    1f4e:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    1f52:	fa5f fe82 	uxtb.w	lr, r2
	if (size <= 32U) {
    1f56:	d91e      	bls.n	1f96 <mpu_configure_regions+0x76>
	if (size > (1UL << 31)) {
    1f58:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    1f5c:	d81d      	bhi.n	1f9a <mpu_configure_regions+0x7a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    1f5e:	3c01      	subs	r4, #1
    1f60:	fab4 f484 	clz	r4, r4
    1f64:	f1c4 041f 	rsb	r4, r4, #31
    1f68:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    1f6a:	f1be 0f07 	cmp.w	lr, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    1f6e:	ea4c 0c04 	orr.w	ip, ip, r4
    1f72:	d814      	bhi.n	1f9e <mpu_configure_regions+0x7e>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1f74:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
    1f78:	4314      	orrs	r4, r2
    1f7a:	f044 0410 	orr.w	r4, r4, #16
    1f7e:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1f82:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1f86:	f04c 0401 	orr.w	r4, ip, #1
    1f8a:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		reg_index++;
    1f8e:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
    1f90:	3501      	adds	r5, #1
    1f92:	300c      	adds	r0, #12
    1f94:	e7c7      	b.n	1f26 <mpu_configure_regions+0x6>
		return REGION_32B;
    1f96:	2408      	movs	r4, #8
    1f98:	e7e7      	b.n	1f6a <mpu_configure_regions+0x4a>
		return REGION_4G;
    1f9a:	243e      	movs	r4, #62	; 0x3e
    1f9c:	e7e5      	b.n	1f6a <mpu_configure_regions+0x4a>
			return -EINVAL;
    1f9e:	f06f 0215 	mvn.w	r2, #21
    1fa2:	e7c2      	b.n	1f2a <mpu_configure_regions+0xa>
    1fa4:	e000ed00 	.word	0xe000ed00

00001fa8 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1fa8:	4b04      	ldr	r3, [pc, #16]	; (1fbc <arm_core_mpu_enable+0x14>)
    1faa:	2205      	movs	r2, #5
    1fac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    1fb0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1fb4:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    1fb8:	4770      	bx	lr
    1fba:	bf00      	nop
    1fbc:	e000ed00 	.word	0xe000ed00

00001fc0 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    1fc0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    1fc4:	4b02      	ldr	r3, [pc, #8]	; (1fd0 <arm_core_mpu_disable+0x10>)
    1fc6:	2200      	movs	r2, #0
    1fc8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    1fcc:	4770      	bx	lr
    1fce:	bf00      	nop
    1fd0:	e000ed00 	.word	0xe000ed00

00001fd4 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    1fd4:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    1fd6:	4c03      	ldr	r4, [pc, #12]	; (1fe4 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    1fd8:	2301      	movs	r3, #1
    1fda:	7822      	ldrb	r2, [r4, #0]
    1fdc:	f7ff ffa0 	bl	1f20 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    1fe0:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    1fe2:	bd10      	pop	{r4, pc}
    1fe4:	20000bac 	.word	0x20000bac

00001fe8 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    1fe8:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    1fea:	4a09      	ldr	r2, [pc, #36]	; (2010 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    1fec:	2300      	movs	r3, #0
    1fee:	7812      	ldrb	r2, [r2, #0]
    1ff0:	f7ff ff96 	bl	1f20 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    1ff4:	f110 0f16 	cmn.w	r0, #22
    1ff8:	d002      	beq.n	2000 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
  MPU->RNR = rnr;
    1ffa:	4a06      	ldr	r2, [pc, #24]	; (2014 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    1ffc:	2807      	cmp	r0, #7
    1ffe:	dd00      	ble.n	2002 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    2000:	bd08      	pop	{r3, pc}
    2002:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    2006:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
    200a:	3001      	adds	r0, #1
    200c:	e7f6      	b.n	1ffc <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
    200e:	bf00      	nop
    2010:	20000bac 	.word	0x20000bac
    2014:	e000ed00 	.word	0xe000ed00

00002018 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    2018:	4914      	ldr	r1, [pc, #80]	; (206c <z_arm_mpu_init+0x54>)
    201a:	6808      	ldr	r0, [r1, #0]
    201c:	2808      	cmp	r0, #8
{
    201e:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    2020:	d821      	bhi.n	2066 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    2022:	f7ff ffcd 	bl	1fc0 <arm_core_mpu_disable>
    2026:	4c12      	ldr	r4, [pc, #72]	; (2070 <z_arm_mpu_init+0x58>)
    2028:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    202a:	2200      	movs	r2, #0
    202c:	4290      	cmp	r0, r2
    202e:	f101 010c 	add.w	r1, r1, #12
    2032:	d105      	bne.n	2040 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    2034:	4b0f      	ldr	r3, [pc, #60]	; (2074 <z_arm_mpu_init+0x5c>)
    2036:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    2038:	f7ff ffb6 	bl	1fa8 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    203c:	2000      	movs	r0, #0
}
    203e:	bd10      	pop	{r4, pc}
    2040:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2044:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    2048:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    204c:	4313      	orrs	r3, r2
    204e:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2052:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2056:	f851 3c04 	ldr.w	r3, [r1, #-4]
    205a:	f043 0301 	orr.w	r3, r3, #1
    205e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2062:	3201      	adds	r2, #1
    2064:	e7e2      	b.n	202c <z_arm_mpu_init+0x14>
		return -1;
    2066:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    206a:	e7e8      	b.n	203e <z_arm_mpu_init+0x26>
    206c:	00005be0 	.word	0x00005be0
    2070:	e000ed00 	.word	0xe000ed00
    2074:	20000bac 	.word	0x20000bac

00002078 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    2078:	4b01      	ldr	r3, [pc, #4]	; (2080 <__stdout_hook_install+0x8>)
    207a:	6018      	str	r0, [r3, #0]
}
    207c:	4770      	bx	lr
    207e:	bf00      	nop
    2080:	20000028 	.word	0x20000028

00002084 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    2084:	b510      	push	{r4, lr}
	__asm__ volatile(
    2086:	f04f 0320 	mov.w	r3, #32
    208a:	f3ef 8011 	mrs	r0, BASEPRI
    208e:	f383 8812 	msr	BASEPRI_MAX, r3
    2092:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    2096:	4a11      	ldr	r2, [pc, #68]	; (20dc <nordicsemi_nrf52_init+0x58>)
    2098:	2301      	movs	r3, #1
    209a:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    209e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    20a2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    20a6:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    20aa:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
    20ae:	2c08      	cmp	r4, #8
    20b0:	d108      	bne.n	20c4 <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    20b2:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
    20b6:	2905      	cmp	r1, #5
    20b8:	d804      	bhi.n	20c4 <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    20ba:	4c09      	ldr	r4, [pc, #36]	; (20e0 <nordicsemi_nrf52_init+0x5c>)
    20bc:	5c61      	ldrb	r1, [r4, r1]
    20be:	b109      	cbz	r1, 20c4 <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    20c0:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    20c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    20c8:	2201      	movs	r2, #1
    20ca:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    20ce:	f380 8811 	msr	BASEPRI, r0
    20d2:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    20d6:	2000      	movs	r0, #0
    20d8:	bd10      	pop	{r4, pc}
    20da:	bf00      	nop
    20dc:	4001e000 	.word	0x4001e000
    20e0:	000067dc 	.word	0x000067dc

000020e4 <sys_arch_reboot>:
    *p_gpregret = val;
    20e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    20e8:	b2c0      	uxtb	r0, r0
    20ea:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    20ee:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    20f2:	4905      	ldr	r1, [pc, #20]	; (2108 <sys_arch_reboot+0x24>)
    20f4:	4b05      	ldr	r3, [pc, #20]	; (210c <sys_arch_reboot+0x28>)
    20f6:	68ca      	ldr	r2, [r1, #12]
    20f8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    20fc:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    20fe:	60cb      	str	r3, [r1, #12]
    2100:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    2104:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2106:	e7fd      	b.n	2104 <sys_arch_reboot+0x20>
    2108:	e000ed00 	.word	0xe000ed00
    210c:	05fa0004 	.word	0x05fa0004

00002110 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    2110:	b120      	cbz	r0, 211c <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    2112:	4b03      	ldr	r3, [pc, #12]	; (2120 <arch_busy_wait+0x10>)
    2114:	0180      	lsls	r0, r0, #6
    2116:	f043 0301 	orr.w	r3, r3, #1
    211a:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    211c:	4770      	bx	lr
    211e:	bf00      	nop
    2120:	00005ba0 	.word	0x00005ba0

00002124 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    2124:	4b08      	ldr	r3, [pc, #32]	; (2148 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2126:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    2128:	1ac3      	subs	r3, r0, r3
{
    212a:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    212c:	4907      	ldr	r1, [pc, #28]	; (214c <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    212e:	109b      	asrs	r3, r3, #2
{
    2130:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    2132:	4359      	muls	r1, r3
    2134:	4806      	ldr	r0, [pc, #24]	; (2150 <onoff_stop+0x2c>)
    2136:	2240      	movs	r2, #64	; 0x40
    2138:	f002 ffb1 	bl	509e <stop>
	notify(mgr, res);
    213c:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    213e:	4601      	mov	r1, r0
	notify(mgr, res);
    2140:	4620      	mov	r0, r4
}
    2142:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    2146:	4718      	bx	r3
    2148:	20000870 	.word	0x20000870
    214c:	b6db6db7 	.word	0xb6db6db7
    2150:	00005980 	.word	0x00005980

00002154 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2154:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    2156:	4c0c      	ldr	r4, [pc, #48]	; (2188 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2158:	4a0c      	ldr	r2, [pc, #48]	; (218c <onoff_start+0x38>)
    215a:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    215c:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    215e:	9300      	str	r3, [sp, #0]
{
    2160:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2162:	460b      	mov	r3, r1
    2164:	490a      	ldr	r1, [pc, #40]	; (2190 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    2166:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2168:	4361      	muls	r1, r4
{
    216a:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    216c:	4809      	ldr	r0, [pc, #36]	; (2194 <onoff_start+0x40>)
    216e:	f002 ffc3 	bl	50f8 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    2172:	1e01      	subs	r1, r0, #0
    2174:	da05      	bge.n	2182 <onoff_start+0x2e>
		notify(mgr, err);
    2176:	4630      	mov	r0, r6
    2178:	462b      	mov	r3, r5
	}
}
    217a:	b002      	add	sp, #8
    217c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    2180:	4718      	bx	r3
}
    2182:	b002      	add	sp, #8
    2184:	bd70      	pop	{r4, r5, r6, pc}
    2186:	bf00      	nop
    2188:	20000870 	.word	0x20000870
    218c:	00005165 	.word	0x00005165
    2190:	b6db6db7 	.word	0xb6db6db7
    2194:	00005980 	.word	0x00005980

00002198 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2198:	2200      	movs	r2, #0
{
    219a:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    219c:	2101      	movs	r1, #1
{
    219e:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    21a0:	4610      	mov	r0, r2
    21a2:	f7ff fc1b 	bl	19dc <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    21a6:	480f      	ldr	r0, [pc, #60]	; (21e4 <clk_init+0x4c>)
    21a8:	f001 f85a 	bl	3260 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    21ac:	4b0e      	ldr	r3, [pc, #56]	; (21e8 <clk_init+0x50>)
    21ae:	4298      	cmp	r0, r3
    21b0:	d115      	bne.n	21de <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    21b2:	f003 f992 	bl	54da <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    21b6:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    21b8:	490c      	ldr	r1, [pc, #48]	; (21ec <clk_init+0x54>)
    21ba:	4630      	mov	r0, r6
    21bc:	f002 fe28 	bl	4e10 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    21c0:	2800      	cmp	r0, #0
    21c2:	db0b      	blt.n	21dc <clk_init+0x44>
	struct nrf_clock_control_data *data = dev->data;
    21c4:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    21c6:	4909      	ldr	r1, [pc, #36]	; (21ec <clk_init+0x54>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    21c8:	2501      	movs	r5, #1
    21ca:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
    21cc:	f104 001c 	add.w	r0, r4, #28
    21d0:	f002 fe1e 	bl	4e10 <onoff_manager_init>
		if (err < 0) {
    21d4:	2800      	cmp	r0, #0
    21d6:	db01      	blt.n	21dc <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    21d8:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    21da:	2000      	movs	r0, #0
}
    21dc:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    21de:	f06f 0004 	mvn.w	r0, #4
    21e2:	e7fb      	b.n	21dc <clk_init+0x44>
    21e4:	00002225 	.word	0x00002225
    21e8:	0bad0000 	.word	0x0bad0000
    21ec:	00005c00 	.word	0x00005c00

000021f0 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    21f0:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    21f2:	230c      	movs	r3, #12
    21f4:	4809      	ldr	r0, [pc, #36]	; (221c <clkstarted_handle.constprop.0+0x2c>)
    21f6:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    21f8:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    21fa:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    21fc:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    2200:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    2202:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    2204:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    2206:	4418      	add	r0, r3
    2208:	f002 ff36 	bl	5078 <set_on_state>
	if (callback) {
    220c:	b12d      	cbz	r5, 221a <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    220e:	4632      	mov	r2, r6
    2210:	462b      	mov	r3, r5
    2212:	4803      	ldr	r0, [pc, #12]	; (2220 <clkstarted_handle.constprop.0+0x30>)
}
    2214:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    2218:	4718      	bx	r3
}
    221a:	bd70      	pop	{r4, r5, r6, pc}
    221c:	20000870 	.word	0x20000870
    2220:	00005980 	.word	0x00005980

00002224 <clock_event_handler>:
	switch (event) {
    2224:	b110      	cbz	r0, 222c <clock_event_handler+0x8>
    2226:	2801      	cmp	r0, #1
    2228:	d004      	beq.n	2234 <clock_event_handler+0x10>
    222a:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    222c:	4b03      	ldr	r3, [pc, #12]	; (223c <clock_event_handler+0x18>)
    222e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2230:	075b      	lsls	r3, r3, #29
    2232:	d101      	bne.n	2238 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    2234:	f7ff bfdc 	b.w	21f0 <clkstarted_handle.constprop.0>
}
    2238:	4770      	bx	lr
    223a:	bf00      	nop
    223c:	20000870 	.word	0x20000870

00002240 <generic_hfclk_start>:
{
    2240:	b508      	push	{r3, lr}
	__asm__ volatile(
    2242:	f04f 0320 	mov.w	r3, #32
    2246:	f3ef 8111 	mrs	r1, BASEPRI
    224a:	f383 8812 	msr	BASEPRI_MAX, r3
    224e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    2252:	4a12      	ldr	r2, [pc, #72]	; (229c <generic_hfclk_start+0x5c>)
    2254:	6813      	ldr	r3, [r2, #0]
    2256:	f043 0002 	orr.w	r0, r3, #2
    225a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    225c:	07da      	lsls	r2, r3, #31
    225e:	d408      	bmi.n	2272 <generic_hfclk_start+0x32>
	__asm__ volatile(
    2260:	f381 8811 	msr	BASEPRI, r1
    2264:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    2268:	2001      	movs	r0, #1
}
    226a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    226e:	f003 b941 	b.w	54f4 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    2272:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2276:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    227a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    227e:	07d3      	lsls	r3, r2, #31
    2280:	d5ee      	bpl.n	2260 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    2282:	4807      	ldr	r0, [pc, #28]	; (22a0 <generic_hfclk_start+0x60>)
    2284:	f002 fef8 	bl	5078 <set_on_state>
    2288:	f381 8811 	msr	BASEPRI, r1
    228c:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
    2290:	2000      	movs	r0, #0
}
    2292:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    2296:	f7ff bfab 	b.w	21f0 <clkstarted_handle.constprop.0>
    229a:	bf00      	nop
    229c:	200008c0 	.word	0x200008c0
    22a0:	200008b0 	.word	0x200008b0

000022a4 <api_blocking_start>:
{
    22a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    22a6:	2200      	movs	r2, #0
    22a8:	2301      	movs	r3, #1
    22aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    22ae:	4a09      	ldr	r2, [pc, #36]	; (22d4 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    22b0:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    22b4:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    22b6:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    22ba:	f002 ff4c 	bl	5156 <api_start>
	if (err < 0) {
    22be:	2800      	cmp	r0, #0
    22c0:	db05      	blt.n	22ce <api_blocking_start+0x2a>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    22c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    22c6:	2300      	movs	r3, #0
    22c8:	4668      	mov	r0, sp
    22ca:	f001 fe6b 	bl	3fa4 <z_impl_k_sem_take>
}
    22ce:	b005      	add	sp, #20
    22d0:	f85d fb04 	ldr.w	pc, [sp], #4
    22d4:	00005183 	.word	0x00005183

000022d8 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    22d8:	4b09      	ldr	r3, [pc, #36]	; (2300 <generic_hfclk_stop+0x28>)
    22da:	f3bf 8f5b 	dmb	ish
    22de:	e853 2f00 	ldrex	r2, [r3]
    22e2:	f022 0102 	bic.w	r1, r2, #2
    22e6:	e843 1000 	strex	r0, r1, [r3]
    22ea:	2800      	cmp	r0, #0
    22ec:	d1f7      	bne.n	22de <generic_hfclk_stop+0x6>
    22ee:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    22f2:	07d3      	lsls	r3, r2, #31
    22f4:	d402      	bmi.n	22fc <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    22f6:	2001      	movs	r0, #1
    22f8:	f003 b938 	b.w	556c <nrfx_clock_stop>
}
    22fc:	4770      	bx	lr
    22fe:	bf00      	nop
    2300:	200008c0 	.word	0x200008c0

00002304 <z_nrf_clock_control_lf_on>:
{
    2304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2308:	4938      	ldr	r1, [pc, #224]	; (23ec <z_nrf_clock_control_lf_on+0xe8>)
    230a:	f3bf 8f5b 	dmb	ish
    230e:	4607      	mov	r7, r0
    2310:	2201      	movs	r2, #1
    2312:	e851 3f00 	ldrex	r3, [r1]
    2316:	e841 2000 	strex	r0, r2, [r1]
    231a:	2800      	cmp	r0, #0
    231c:	d1f9      	bne.n	2312 <z_nrf_clock_control_lf_on+0xe>
    231e:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    2322:	b933      	cbnz	r3, 2332 <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    2324:	4932      	ldr	r1, [pc, #200]	; (23f0 <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
    2326:	4833      	ldr	r0, [pc, #204]	; (23f4 <z_nrf_clock_control_lf_on+0xf0>)
    2328:	604b      	str	r3, [r1, #4]
    232a:	60cb      	str	r3, [r1, #12]
    232c:	608a      	str	r2, [r1, #8]
    232e:	f002 fd82 	bl	4e36 <onoff_request>
	switch (start_mode) {
    2332:	1e7b      	subs	r3, r7, #1
    2334:	2b01      	cmp	r3, #1
    2336:	d82b      	bhi.n	2390 <z_nrf_clock_control_lf_on+0x8c>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    2338:	2f01      	cmp	r7, #1
    233a:	d107      	bne.n	234c <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    233c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2340:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    2344:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    2348:	2b01      	cmp	r3, #1
    234a:	d021      	beq.n	2390 <z_nrf_clock_control_lf_on+0x8c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    234c:	f003 f9dd 	bl	570a <k_is_in_isr>
    2350:	4605      	mov	r5, r0
    2352:	b9f8      	cbnz	r0, 2394 <z_nrf_clock_control_lf_on+0x90>
	return !z_sys_post_kernel;
    2354:	4b28      	ldr	r3, [pc, #160]	; (23f8 <z_nrf_clock_control_lf_on+0xf4>)
    2356:	781b      	ldrb	r3, [r3, #0]
    2358:	b1e3      	cbz	r3, 2394 <z_nrf_clock_control_lf_on+0x90>
    p_reg->INTENCLR = mask;
    235a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    235e:	2202      	movs	r2, #2
    2360:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    2364:	4606      	mov	r6, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2366:	f8df 8094 	ldr.w	r8, [pc, #148]	; 23fc <z_nrf_clock_control_lf_on+0xf8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    236a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    236e:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2372:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    2376:	03d2      	lsls	r2, r2, #15
    2378:	d516      	bpl.n	23a8 <z_nrf_clock_control_lf_on+0xa4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    237a:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    237e:	2b01      	cmp	r3, #1
    2380:	d001      	beq.n	2386 <z_nrf_clock_control_lf_on+0x82>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    2382:	2f01      	cmp	r7, #1
    2384:	d110      	bne.n	23a8 <z_nrf_clock_control_lf_on+0xa4>
	if (isr_mode) {
    2386:	b35d      	cbz	r5, 23e0 <z_nrf_clock_control_lf_on+0xdc>
    2388:	f386 8811 	msr	BASEPRI, r6
    238c:	f3bf 8f6f 	isb	sy
}
    2390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    2394:	f04f 0320 	mov.w	r3, #32
    2398:	f3ef 8611 	mrs	r6, BASEPRI
    239c:	f383 8812 	msr	BASEPRI_MAX, r3
    23a0:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    23a4:	2501      	movs	r5, #1
    23a6:	e7de      	b.n	2366 <z_nrf_clock_control_lf_on+0x62>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    23a8:	b1ad      	cbz	r5, 23d6 <z_nrf_clock_control_lf_on+0xd2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    23aa:	4630      	mov	r0, r6
    23ac:	f7ff faf0 	bl	1990 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    23b0:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    23b4:	2b00      	cmp	r3, #0
    23b6:	d1da      	bne.n	236e <z_nrf_clock_control_lf_on+0x6a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    23b8:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    23bc:	2a00      	cmp	r2, #0
    23be:	d0d6      	beq.n	236e <z_nrf_clock_control_lf_on+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    23c0:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    23c4:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    23c8:	2301      	movs	r3, #1
    23ca:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
    23ce:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    23d2:	60a3      	str	r3, [r4, #8]
}
    23d4:	e7cb      	b.n	236e <z_nrf_clock_control_lf_on+0x6a>
	return z_impl_k_sleep(timeout);
    23d6:	2100      	movs	r1, #0
    23d8:	2021      	movs	r0, #33	; 0x21
    23da:	f002 f8d7 	bl	458c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    23de:	e7e7      	b.n	23b0 <z_nrf_clock_control_lf_on+0xac>
    p_reg->INTENSET = mask;
    23e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    23e4:	2202      	movs	r2, #2
    23e6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    23ea:	e7d1      	b.n	2390 <z_nrf_clock_control_lf_on+0x8c>
    23ec:	2000086c 	.word	0x2000086c
    23f0:	2000085c 	.word	0x2000085c
    23f4:	2000088c 	.word	0x2000088c
    23f8:	20000fbd 	.word	0x20000fbd
    23fc:	e000e100 	.word	0xe000e100

00002400 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    2400:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    2402:	4b08      	ldr	r3, [pc, #32]	; (2424 <uart_console_init+0x24>)
    2404:	4808      	ldr	r0, [pc, #32]	; (2428 <uart_console_init+0x28>)
    2406:	6018      	str	r0, [r3, #0]
    2408:	f003 f912 	bl	5630 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    240c:	b138      	cbz	r0, 241e <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    240e:	4807      	ldr	r0, [pc, #28]	; (242c <uart_console_init+0x2c>)
    2410:	f7ff fe32 	bl	2078 <__stdout_hook_install>
	__printk_hook_install(console_out);
    2414:	4805      	ldr	r0, [pc, #20]	; (242c <uart_console_init+0x2c>)
    2416:	f7fe fb9f 	bl	b58 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    241a:	2000      	movs	r0, #0
}
    241c:	bd08      	pop	{r3, pc}
		return -ENODEV;
    241e:	f06f 0012 	mvn.w	r0, #18
    2422:	e7fb      	b.n	241c <uart_console_init+0x1c>
    2424:	200008c4 	.word	0x200008c4
    2428:	000059e0 	.word	0x000059e0
    242c:	00002431 	.word	0x00002431

00002430 <console_out>:
	if ('\n' == c) {
    2430:	280a      	cmp	r0, #10
{
    2432:	b538      	push	{r3, r4, r5, lr}
    2434:	4d07      	ldr	r5, [pc, #28]	; (2454 <console_out+0x24>)
    2436:	4604      	mov	r4, r0
	if ('\n' == c) {
    2438:	d104      	bne.n	2444 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    243a:	6828      	ldr	r0, [r5, #0]
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    243c:	6883      	ldr	r3, [r0, #8]
    243e:	210d      	movs	r1, #13
    2440:	685b      	ldr	r3, [r3, #4]
    2442:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    2444:	6828      	ldr	r0, [r5, #0]
    2446:	6883      	ldr	r3, [r0, #8]
    2448:	b2e1      	uxtb	r1, r4
    244a:	685b      	ldr	r3, [r3, #4]
    244c:	4798      	blx	r3
}
    244e:	4620      	mov	r0, r4
    2450:	bd38      	pop	{r3, r4, r5, pc}
    2452:	bf00      	nop
    2454:	200008c4 	.word	0x200008c4

00002458 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    2458:	b530      	push	{r4, r5, lr}
	return port->config;
    245a:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    245c:	7b05      	ldrb	r5, [r0, #12]
    245e:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
    2462:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    2466:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2468:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    246c:	d104      	bne.n	2478 <gpio_nrfx_pin_interrupt_configure+0x20>
		nrfx_gpiote_trigger_disable(abs_pin);
    246e:	4620      	mov	r0, r4
    2470:	f001 f976 	bl	3760 <nrfx_gpiote_trigger_disable>

		return 0;
    2474:	2000      	movs	r0, #0
    2476:	e04a      	b.n	250e <gpio_nrfx_pin_interrupt_configure+0xb6>
	}

	nrfx_gpiote_trigger_config_t trigger_config = {
    2478:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    247a:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    247e:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    2482:	d114      	bne.n	24ae <gpio_nrfx_pin_interrupt_configure+0x56>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    2484:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    2488:	bf0c      	ite	eq
    248a:	2304      	moveq	r3, #4
    248c:	2305      	movne	r3, #5
    248e:	f88d 3008 	strb.w	r3, [sp, #8]
		}

		trigger_config.p_in_channel = &ch;
	}

	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2492:	2300      	movs	r3, #0
    2494:	4619      	mov	r1, r3
    2496:	aa02      	add	r2, sp, #8
    2498:	4620      	mov	r0, r4
    249a:	f000 ffa1 	bl	33e0 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    249e:	4b20      	ldr	r3, [pc, #128]	; (2520 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    24a0:	4298      	cmp	r0, r3
    24a2:	d13a      	bne.n	251a <gpio_nrfx_pin_interrupt_configure+0xc2>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);
    24a4:	2101      	movs	r1, #1
    24a6:	4620      	mov	r0, r4
    24a8:	f001 f912 	bl	36d0 <nrfx_gpiote_trigger_enable>

	return 0;
    24ac:	e7e2      	b.n	2474 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    24ae:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    24b2:	d02e      	beq.n	2512 <gpio_nrfx_pin_interrupt_configure+0xba>
    24b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    24b8:	bf14      	ite	ne
    24ba:	2301      	movne	r3, #1
    24bc:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    24be:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    24c2:	6883      	ldr	r3, [r0, #8]
    24c4:	40cb      	lsrs	r3, r1
    24c6:	07d9      	lsls	r1, r3, #31
    24c8:	d4e3      	bmi.n	2492 <gpio_nrfx_pin_interrupt_configure+0x3a>
    24ca:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    24ce:	d1e0      	bne.n	2492 <gpio_nrfx_pin_interrupt_configure+0x3a>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    24d0:	0962      	lsrs	r2, r4, #5
        case 1: return NRF_P1;
    24d2:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    24d4:	f004 031f 	and.w	r3, r4, #31
        case 1: return NRF_P1;
    24d8:	4a12      	ldr	r2, [pc, #72]	; (2524 <gpio_nrfx_pin_interrupt_configure+0xcc>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    24da:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
    24de:	bf18      	it	ne
    24e0:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    24e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    24e8:	07db      	lsls	r3, r3, #31
    24ea:	d4d2      	bmi.n	2492 <gpio_nrfx_pin_interrupt_configure+0x3a>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    24ec:	f10d 0507 	add.w	r5, sp, #7
    24f0:	4629      	mov	r1, r5
    24f2:	4620      	mov	r0, r4
    24f4:	f001 f898 	bl	3628 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    24f8:	4b0b      	ldr	r3, [pc, #44]	; (2528 <gpio_nrfx_pin_interrupt_configure+0xd0>)
    24fa:	4298      	cmp	r0, r3
    24fc:	d10b      	bne.n	2516 <gpio_nrfx_pin_interrupt_configure+0xbe>
			err = nrfx_gpiote_channel_alloc(&ch);
    24fe:	4628      	mov	r0, r5
    2500:	f001 f8e0 	bl	36c4 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    2504:	4b06      	ldr	r3, [pc, #24]	; (2520 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    2506:	4298      	cmp	r0, r3
    2508:	d005      	beq.n	2516 <gpio_nrfx_pin_interrupt_configure+0xbe>
				return -ENOMEM;
    250a:	f06f 000b 	mvn.w	r0, #11
}
    250e:	b005      	add	sp, #20
    2510:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    2512:	2303      	movs	r3, #3
    2514:	e7d3      	b.n	24be <gpio_nrfx_pin_interrupt_configure+0x66>
		trigger_config.p_in_channel = &ch;
    2516:	9503      	str	r5, [sp, #12]
    2518:	e7bb      	b.n	2492 <gpio_nrfx_pin_interrupt_configure+0x3a>
		return -EIO;
    251a:	f06f 0004 	mvn.w	r0, #4
    251e:	e7f6      	b.n	250e <gpio_nrfx_pin_interrupt_configure+0xb6>
    2520:	0bad0000 	.word	0x0bad0000
    2524:	50000300 	.word	0x50000300
    2528:	0bad0004 	.word	0x0bad0004

0000252c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    252c:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    252e:	f001 f8b9 	bl	36a4 <nrfx_gpiote_is_init>
    2532:	4604      	mov	r4, r0
    2534:	b968      	cbnz	r0, 2552 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    2536:	f001 f88d 	bl	3654 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    253a:	4b08      	ldr	r3, [pc, #32]	; (255c <gpio_nrfx_init+0x30>)
    253c:	4298      	cmp	r0, r3
    253e:	d10a      	bne.n	2556 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    2540:	4807      	ldr	r0, [pc, #28]	; (2560 <gpio_nrfx_init+0x34>)
    2542:	4621      	mov	r1, r4
    2544:	f001 f86a 	bl	361c <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    2548:	4622      	mov	r2, r4
    254a:	2105      	movs	r1, #5
    254c:	2006      	movs	r0, #6
    254e:	f7ff fa45 	bl	19dc <z_arm_irq_priority_set>
		return 0;
    2552:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    2554:	bd10      	pop	{r4, pc}
		return -EIO;
    2556:	f06f 0004 	mvn.w	r0, #4
    255a:	e7fb      	b.n	2554 <gpio_nrfx_init+0x28>
    255c:	0bad0000 	.word	0x0bad0000
    2560:	00002565 	.word	0x00002565

00002564 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2564:	0942      	lsrs	r2, r0, #5
{
    2566:	b570      	push	{r4, r5, r6, lr}
    2568:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    256a:	d002      	beq.n	2572 <nrfx_gpio_handler+0xe>
    256c:	2a01      	cmp	r2, #1
    256e:	d017      	beq.n	25a0 <nrfx_gpio_handler+0x3c>
}
    2570:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2572:	4e0d      	ldr	r6, [pc, #52]	; (25a8 <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
    2574:	6932      	ldr	r2, [r6, #16]
    2576:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2578:	2900      	cmp	r1, #0
    257a:	d0f9      	beq.n	2570 <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
    257c:	f003 031f 	and.w	r3, r3, #31
    2580:	2501      	movs	r5, #1
    2582:	680c      	ldr	r4, [r1, #0]
    2584:	409d      	lsls	r5, r3
    2586:	2900      	cmp	r1, #0
    2588:	d0f2      	beq.n	2570 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
    258a:	688a      	ldr	r2, [r1, #8]
    258c:	402a      	ands	r2, r5
    258e:	d002      	beq.n	2596 <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    2590:	684b      	ldr	r3, [r1, #4]
    2592:	4630      	mov	r0, r6
    2594:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2596:	b12c      	cbz	r4, 25a4 <nrfx_gpio_handler+0x40>
    2598:	6823      	ldr	r3, [r4, #0]
    259a:	4621      	mov	r1, r4
    259c:	461c      	mov	r4, r3
    259e:	e7f2      	b.n	2586 <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    25a0:	4e02      	ldr	r6, [pc, #8]	; (25ac <nrfx_gpio_handler+0x48>)
    25a2:	e7e7      	b.n	2574 <nrfx_gpio_handler+0x10>
    25a4:	4623      	mov	r3, r4
    25a6:	e7f8      	b.n	259a <nrfx_gpio_handler+0x36>
    25a8:	000059b0 	.word	0x000059b0
    25ac:	00005998 	.word	0x00005998

000025b0 <gpio_nrfx_pin_configure>:
{
    25b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
    25b4:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    25b6:	7b3b      	ldrb	r3, [r7, #12]
    25b8:	f001 051f 	and.w	r5, r1, #31
{
    25bc:	b085      	sub	sp, #20
    25be:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    25c0:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    25c4:	4614      	mov	r4, r2
    25c6:	b9d2      	cbnz	r2, 25fe <gpio_nrfx_pin_configure+0x4e>
	err = nrfx_gpiote_channel_get(pin, &ch);
    25c8:	a902      	add	r1, sp, #8
    25ca:	4628      	mov	r0, r5
    25cc:	f001 f82c 	bl	3628 <nrfx_gpiote_channel_get>
    25d0:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    25d2:	4628      	mov	r0, r5
    25d4:	f001 f8ec 	bl	37b0 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    25d8:	4b46      	ldr	r3, [pc, #280]	; (26f4 <gpio_nrfx_pin_configure+0x144>)
    25da:	4298      	cmp	r0, r3
    25dc:	d004      	beq.n	25e8 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    25de:	f06f 0004 	mvn.w	r0, #4
}
    25e2:	b005      	add	sp, #20
    25e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    25e8:	4284      	cmp	r4, r0
    25ea:	d001      	beq.n	25f0 <gpio_nrfx_pin_configure+0x40>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    25ec:	2000      	movs	r0, #0
    25ee:	e7f8      	b.n	25e2 <gpio_nrfx_pin_configure+0x32>
		err = nrfx_gpiote_channel_free(ch);
    25f0:	f89d 0008 	ldrb.w	r0, [sp, #8]
    25f4:	f001 f860 	bl	36b8 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    25f8:	42a0      	cmp	r0, r4
    25fa:	d0f7      	beq.n	25ec <gpio_nrfx_pin_configure+0x3c>
    25fc:	e7ef      	b.n	25de <gpio_nrfx_pin_configure+0x2e>
	nrfx_gpiote_trigger_config_t trigger_config = {
    25fe:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    2602:	f10d 0103 	add.w	r1, sp, #3
    2606:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    2608:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    260c:	f001 f80c 	bl	3628 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2610:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    2612:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2614:	aa02      	add	r2, sp, #8
    2616:	4649      	mov	r1, r9
    2618:	4628      	mov	r0, r5
    261a:	f000 fee1 	bl	33e0 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    261e:	4b35      	ldr	r3, [pc, #212]	; (26f4 <gpio_nrfx_pin_configure+0x144>)
    2620:	4298      	cmp	r0, r3
    2622:	d002      	beq.n	262a <gpio_nrfx_pin_configure+0x7a>
		return NRF_GPIO_PIN_PULLUP;
    2624:	f06f 0015 	mvn.w	r0, #21
    2628:	e7db      	b.n	25e2 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    262a:	4580      	cmp	r8, r0
    262c:	d103      	bne.n	2636 <gpio_nrfx_pin_configure+0x86>
		err = nrfx_gpiote_channel_free(ch);
    262e:	f89d 0003 	ldrb.w	r0, [sp, #3]
    2632:	f001 f841 	bl	36b8 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    2636:	03a3      	lsls	r3, r4, #14
    2638:	d54c      	bpl.n	26d4 <gpio_nrfx_pin_configure+0x124>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    263a:	f240 6306 	movw	r3, #1542	; 0x606
    263e:	4023      	ands	r3, r4
    2640:	f240 2206 	movw	r2, #518	; 0x206
    2644:	4293      	cmp	r3, r2
    2646:	d019      	beq.n	267c <gpio_nrfx_pin_configure+0xcc>
    2648:	d80c      	bhi.n	2664 <gpio_nrfx_pin_configure+0xb4>
    264a:	2b06      	cmp	r3, #6
    264c:	d017      	beq.n	267e <gpio_nrfx_pin_configure+0xce>
    264e:	d804      	bhi.n	265a <gpio_nrfx_pin_configure+0xaa>
    2650:	b1ab      	cbz	r3, 267e <gpio_nrfx_pin_configure+0xce>
    2652:	2b02      	cmp	r3, #2
    2654:	d1e6      	bne.n	2624 <gpio_nrfx_pin_configure+0x74>
		*drive = NRF_GPIO_PIN_D0S1;
    2656:	2304      	movs	r3, #4
    2658:	e011      	b.n	267e <gpio_nrfx_pin_configure+0xce>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    265a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    265e:	d1e1      	bne.n	2624 <gpio_nrfx_pin_configure+0x74>
    2660:	2301      	movs	r3, #1
    2662:	e00c      	b.n	267e <gpio_nrfx_pin_configure+0xce>
    2664:	f240 4202 	movw	r2, #1026	; 0x402
    2668:	4293      	cmp	r3, r2
    266a:	d027      	beq.n	26bc <gpio_nrfx_pin_configure+0x10c>
    266c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
    2670:	d026      	beq.n	26c0 <gpio_nrfx_pin_configure+0x110>
    2672:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    2676:	d1d5      	bne.n	2624 <gpio_nrfx_pin_configure+0x74>
		*drive = NRF_GPIO_PIN_S0H1;
    2678:	2302      	movs	r3, #2
    267a:	e000      	b.n	267e <gpio_nrfx_pin_configure+0xce>
		*drive = NRF_GPIO_PIN_H0D1;
    267c:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    267e:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    2682:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    2686:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    268a:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    268c:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
    2690:	bf54      	ite	pl
    2692:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    2696:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2698:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    269a:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    269e:	d511      	bpl.n	26c4 <gpio_nrfx_pin_configure+0x114>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    26a0:	687a      	ldr	r2, [r7, #4]
    26a2:	2301      	movs	r3, #1
    26a4:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    26a6:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    26aa:	2200      	movs	r2, #0
    26ac:	a901      	add	r1, sp, #4
    26ae:	4628      	mov	r0, r5
    26b0:	f000 ff44 	bl	353c <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    26b4:	4b0f      	ldr	r3, [pc, #60]	; (26f4 <gpio_nrfx_pin_configure+0x144>)
    26b6:	4298      	cmp	r0, r3
    26b8:	d098      	beq.n	25ec <gpio_nrfx_pin_configure+0x3c>
    26ba:	e7b3      	b.n	2624 <gpio_nrfx_pin_configure+0x74>
		*drive = NRF_GPIO_PIN_D0H1;
    26bc:	2305      	movs	r3, #5
    26be:	e7de      	b.n	267e <gpio_nrfx_pin_configure+0xce>
		*drive = NRF_GPIO_PIN_H0H1;
    26c0:	2303      	movs	r3, #3
    26c2:	e7dc      	b.n	267e <gpio_nrfx_pin_configure+0xce>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    26c4:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    26c6:	bf41      	itttt	mi
    26c8:	2301      	movmi	r3, #1
    26ca:	687a      	ldrmi	r2, [r7, #4]
    26cc:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    26ce:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
    26d2:	e7ea      	b.n	26aa <gpio_nrfx_pin_configure+0xfa>
	if (flags & GPIO_PULL_UP) {
    26d4:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    26d6:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
    26da:	bf54      	ite	pl
    26dc:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    26e0:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    26e2:	461a      	mov	r2, r3
    26e4:	a901      	add	r1, sp, #4
    26e6:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    26e8:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    26ec:	f000 fe78 	bl	33e0 <nrfx_gpiote_input_configure>
    26f0:	e7e0      	b.n	26b4 <gpio_nrfx_pin_configure+0x104>
    26f2:	bf00      	nop
    26f4:	0bad0000 	.word	0x0bad0000

000026f8 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    26f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    26fa:	794b      	ldrb	r3, [r1, #5]
    26fc:	2b01      	cmp	r3, #1
    26fe:	d026      	beq.n	274e <uarte_nrfx_configure+0x56>
    2700:	2b03      	cmp	r3, #3
    2702:	d121      	bne.n	2748 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    2704:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    2706:	798b      	ldrb	r3, [r1, #6]
    2708:	2b03      	cmp	r3, #3
    270a:	d11d      	bne.n	2748 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    270c:	79cc      	ldrb	r4, [r1, #7]
    270e:	b10c      	cbz	r4, 2714 <uarte_nrfx_configure+0x1c>
    2710:	2c01      	cmp	r4, #1
    2712:	d119      	bne.n	2748 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    2714:	790a      	ldrb	r2, [r1, #4]
    2716:	b112      	cbz	r2, 271e <uarte_nrfx_configure+0x26>
    2718:	2a02      	cmp	r2, #2
    271a:	d115      	bne.n	2748 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    271c:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    271e:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    2720:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    2722:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    2726:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    2728:	d065      	beq.n	27f6 <uarte_nrfx_configure+0xfe>
    272a:	d82d      	bhi.n	2788 <uarte_nrfx_configure+0x90>
    272c:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    2730:	d064      	beq.n	27fc <uarte_nrfx_configure+0x104>
    2732:	d816      	bhi.n	2762 <uarte_nrfx_configure+0x6a>
    2734:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    2738:	d062      	beq.n	2800 <uarte_nrfx_configure+0x108>
    273a:	d80a      	bhi.n	2752 <uarte_nrfx_configure+0x5a>
    273c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    2740:	d061      	beq.n	2806 <uarte_nrfx_configure+0x10e>
    2742:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    2746:	d061      	beq.n	280c <uarte_nrfx_configure+0x114>
		return -ENOTSUP;
    2748:	f06f 0085 	mvn.w	r0, #133	; 0x85
    274c:	e052      	b.n	27f4 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    274e:	2600      	movs	r6, #0
    2750:	e7d9      	b.n	2706 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    2752:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    2756:	d05c      	beq.n	2812 <uarte_nrfx_configure+0x11a>
    2758:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    275c:	d1f4      	bne.n	2748 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    275e:	4b37      	ldr	r3, [pc, #220]	; (283c <uarte_nrfx_configure+0x144>)
    2760:	e03c      	b.n	27dc <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2762:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    2766:	d057      	beq.n	2818 <uarte_nrfx_configure+0x120>
    2768:	d807      	bhi.n	277a <uarte_nrfx_configure+0x82>
    276a:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    276e:	d055      	beq.n	281c <uarte_nrfx_configure+0x124>
    2770:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    2774:	d1e8      	bne.n	2748 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    2776:	4b32      	ldr	r3, [pc, #200]	; (2840 <uarte_nrfx_configure+0x148>)
    2778:	e030      	b.n	27dc <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    277a:	f647 2712 	movw	r7, #31250	; 0x7a12
    277e:	42bb      	cmp	r3, r7
    2780:	d1e2      	bne.n	2748 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    2782:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    2786:	e029      	b.n	27dc <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2788:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    278c:	d048      	beq.n	2820 <uarte_nrfx_configure+0x128>
    278e:	d813      	bhi.n	27b8 <uarte_nrfx_configure+0xc0>
    2790:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    2794:	d047      	beq.n	2826 <uarte_nrfx_configure+0x12e>
    2796:	d809      	bhi.n	27ac <uarte_nrfx_configure+0xb4>
    2798:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    279c:	42bb      	cmp	r3, r7
    279e:	d044      	beq.n	282a <uarte_nrfx_configure+0x132>
    27a0:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    27a4:	d1d0      	bne.n	2748 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    27a6:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    27aa:	e017      	b.n	27dc <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    27ac:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    27b0:	d1ca      	bne.n	2748 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    27b2:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    27b6:	e011      	b.n	27dc <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    27b8:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    27bc:	d038      	beq.n	2830 <uarte_nrfx_configure+0x138>
    27be:	d808      	bhi.n	27d2 <uarte_nrfx_configure+0xda>
    27c0:	4f20      	ldr	r7, [pc, #128]	; (2844 <uarte_nrfx_configure+0x14c>)
    27c2:	42bb      	cmp	r3, r7
    27c4:	d037      	beq.n	2836 <uarte_nrfx_configure+0x13e>
    27c6:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    27ca:	d1bd      	bne.n	2748 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    27cc:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    27d0:	e004      	b.n	27dc <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    27d2:	4f1d      	ldr	r7, [pc, #116]	; (2848 <uarte_nrfx_configure+0x150>)
    27d4:	42bb      	cmp	r3, r7
    27d6:	d1b7      	bne.n	2748 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    27d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    27dc:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    27de:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    27e2:	1d03      	adds	r3, r0, #4
    27e4:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    27e6:	4334      	orrs	r4, r6
    27e8:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    27ea:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    27ee:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    27f2:	2000      	movs	r0, #0
}
    27f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    27f6:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    27fa:	e7ef      	b.n	27dc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    27fc:	4b13      	ldr	r3, [pc, #76]	; (284c <uarte_nrfx_configure+0x154>)
    27fe:	e7ed      	b.n	27dc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    2800:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    2804:	e7ea      	b.n	27dc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    2806:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    280a:	e7e7      	b.n	27dc <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    280c:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    2810:	e7e4      	b.n	27dc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    2812:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    2816:	e7e1      	b.n	27dc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    2818:	4b0d      	ldr	r3, [pc, #52]	; (2850 <uarte_nrfx_configure+0x158>)
    281a:	e7df      	b.n	27dc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    281c:	4b0d      	ldr	r3, [pc, #52]	; (2854 <uarte_nrfx_configure+0x15c>)
    281e:	e7dd      	b.n	27dc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    2820:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    2824:	e7da      	b.n	27dc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    2826:	4b0c      	ldr	r3, [pc, #48]	; (2858 <uarte_nrfx_configure+0x160>)
    2828:	e7d8      	b.n	27dc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    282a:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    282e:	e7d5      	b.n	27dc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    2830:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    2834:	e7d2      	b.n	27dc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    2836:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    283a:	e7cf      	b.n	27dc <uarte_nrfx_configure+0xe4>
    283c:	0013b000 	.word	0x0013b000
    2840:	004ea000 	.word	0x004ea000
    2844:	0003d090 	.word	0x0003d090
    2848:	000f4240 	.word	0x000f4240
    284c:	00275000 	.word	0x00275000
    2850:	0075c000 	.word	0x0075c000
    2854:	003af000 	.word	0x003af000
    2858:	013a9000 	.word	0x013a9000

0000285c <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    285c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = dev->config;
    2860:	f8d0 8004 	ldr.w	r8, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    2864:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
    2866:	f8d8 4000 	ldr.w	r4, [r8]
	nrf_uarte_disable(uarte);

	data->dev = dev;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    286a:	f8d8 900c 	ldr.w	r9, [r8, #12]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    286e:	2100      	movs	r1, #0
    2870:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
static int uarte_instance_init(const struct device *dev,
    2874:	4607      	mov	r7, r0
	data->dev = dev;
    2876:	6030      	str	r0, [r6, #0]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    2878:	aa01      	add	r2, sp, #4
    287a:	4648      	mov	r0, r9
    287c:	f002 fd5f 	bl	533e <pinctrl_lookup_state>
	if (ret < 0) {
    2880:	1e05      	subs	r5, r0, #0
    2882:	db56      	blt.n	2932 <uarte_instance_init.constprop.0+0xd6>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    2884:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    2886:	f8d9 2000 	ldr.w	r2, [r9]
    288a:	7919      	ldrb	r1, [r3, #4]
    288c:	6818      	ldr	r0, [r3, #0]
    288e:	f002 fd73 	bl	5378 <pinctrl_configure_pins>
	if (err < 0) {
    2892:	1e05      	subs	r5, r0, #0
    2894:	db4d      	blt.n	2932 <uarte_instance_init.constprop.0+0xd6>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    2896:	1d31      	adds	r1, r6, #4
    2898:	4638      	mov	r0, r7
    289a:	f7ff ff2d 	bl	26f8 <uarte_nrfx_configure>
	if (err) {
    289e:	4605      	mov	r5, r0
    28a0:	2800      	cmp	r0, #0
    28a2:	d146      	bne.n	2932 <uarte_instance_init.constprop.0+0xd6>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    28a4:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    28a8:	0799      	lsls	r1, r3, #30
    28aa:	d519      	bpl.n	28e0 <uarte_instance_init.constprop.0+0x84>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    28ac:	f106 0012 	add.w	r0, r6, #18
    28b0:	f001 f880 	bl	39b4 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    28b4:	4b22      	ldr	r3, [pc, #136]	; (2940 <uarte_instance_init.constprop.0+0xe4>)
    28b6:	4298      	cmp	r0, r3
    28b8:	d13f      	bne.n	293a <uarte_instance_init.constprop.0+0xde>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    28ba:	7cb0      	ldrb	r0, [r6, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    28bc:	00c3      	lsls	r3, r0, #3
    28be:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    28c2:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    28c6:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    28ca:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    28ce:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    28d2:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    28d6:	4a1b      	ldr	r2, [pc, #108]	; (2944 <uarte_instance_init.constprop.0+0xe8>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    28d8:	2301      	movs	r3, #1
    28da:	4083      	lsls	r3, r0
    28dc:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    28e0:	2308      	movs	r3, #8
    28e2:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    28e6:	f898 3008 	ldrb.w	r3, [r8, #8]
    28ea:	b95b      	cbnz	r3, 2904 <uarte_instance_init.constprop.0+0xa8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    28ec:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    28f0:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    28f4:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    28f8:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    28fc:	2301      	movs	r3, #1
    28fe:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2902:	6023      	str	r3, [r4, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    2904:	f8d8 3004 	ldr.w	r3, [r8, #4]
    2908:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    290a:	bf5c      	itt	pl
    290c:	f44f 7280 	movpl.w	r2, #256	; 0x100
    2910:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    2914:	06db      	lsls	r3, r3, #27
    2916:	bf44      	itt	mi
    2918:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    291c:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    2920:	3610      	adds	r6, #16
    p_reg->TXD.MAXCNT = length;
    2922:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    2924:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    2928:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    292c:	2301      	movs	r3, #1
    292e:	60a3      	str	r3, [r4, #8]
    2930:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    2932:	4628      	mov	r0, r5
    2934:	b003      	add	sp, #12
    2936:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    293a:	f06f 0504 	mvn.w	r5, #4
    293e:	e7f8      	b.n	2932 <uarte_instance_init.constprop.0+0xd6>
    2940:	0bad0000 	.word	0x0bad0000
    2944:	4001f000 	.word	0x4001f000

00002948 <uarte_nrfx_poll_out>:
{
    2948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
    294a:	6906      	ldr	r6, [r0, #16]
{
    294c:	4605      	mov	r5, r0
    294e:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2950:	f002 fedb 	bl	570a <k_is_in_isr>
    2954:	b9b0      	cbnz	r0, 2984 <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
    2956:	4b2c      	ldr	r3, [pc, #176]	; (2a08 <uarte_nrfx_poll_out+0xc0>)
    2958:	781b      	ldrb	r3, [r3, #0]
    295a:	b19b      	cbz	r3, 2984 <uarte_nrfx_poll_out+0x3c>
{
    295c:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    295e:	6868      	ldr	r0, [r5, #4]
    2960:	f002 fc85 	bl	526e <is_tx_ready.isra.0>
    2964:	b9f8      	cbnz	r0, 29a6 <uarte_nrfx_poll_out+0x5e>
    2966:	2001      	movs	r0, #1
    2968:	f002 fdb5 	bl	54d6 <nrfx_busy_wait>
    296c:	3c01      	subs	r4, #1
    296e:	d1f6      	bne.n	295e <uarte_nrfx_poll_out+0x16>
    2970:	2100      	movs	r1, #0
    2972:	2021      	movs	r0, #33	; 0x21
    2974:	f001 fe0a 	bl	458c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    2978:	e7f0      	b.n	295c <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
    297a:	f384 8811 	msr	BASEPRI, r4
    297e:	f3bf 8f6f 	isb	sy
}
    2982:	e7f5      	b.n	2970 <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
    2984:	f04f 0320 	mov.w	r3, #32
    2988:	f3ef 8411 	mrs	r4, BASEPRI
    298c:	f383 8812 	msr	BASEPRI_MAX, r3
    2990:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    2994:	6868      	ldr	r0, [r5, #4]
    2996:	f002 fc6a 	bl	526e <is_tx_ready.isra.0>
    299a:	b988      	cbnz	r0, 29c0 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    299c:	f384 8811 	msr	BASEPRI, r4
    29a0:	f3bf 8f6f 	isb	sy
}
    29a4:	e7ee      	b.n	2984 <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
    29a6:	f04f 0320 	mov.w	r3, #32
    29aa:	f3ef 8411 	mrs	r4, BASEPRI
    29ae:	f383 8812 	msr	BASEPRI_MAX, r3
    29b2:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    29b6:	6868      	ldr	r0, [r5, #4]
    29b8:	f002 fc59 	bl	526e <is_tx_ready.isra.0>
    29bc:	2800      	cmp	r0, #0
    29be:	d0dc      	beq.n	297a <uarte_nrfx_poll_out+0x32>
	data->char_out = c;
    29c0:	f806 7f10 	strb.w	r7, [r6, #16]!
	tx_start(dev, &data->char_out, 1);
    29c4:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
    29c6:	680b      	ldr	r3, [r1, #0]
    p_reg->TXD.MAXCNT = length;
    29c8:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    29ca:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    29ce:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    29d2:	2200      	movs	r2, #0
    29d4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    29d8:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    29dc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    29e0:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    29e4:	684a      	ldr	r2, [r1, #4]
    29e6:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    29e8:	bf41      	itttt	mi
    29ea:	2208      	movmi	r2, #8
    29ec:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    29f0:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    29f4:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    29f8:	2201      	movs	r2, #1
    29fa:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    29fc:	f384 8811 	msr	BASEPRI, r4
    2a00:	f3bf 8f6f 	isb	sy
}
    2a04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2a06:	bf00      	nop
    2a08:	20000fbd 	.word	0x20000fbd

00002a0c <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    2a0c:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    2a0e:	2301      	movs	r3, #1
    2a10:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2a12:	4a0e      	ldr	r2, [pc, #56]	; (2a4c <compare_int_lock+0x40>)
    2a14:	f3bf 8f5b 	dmb	ish
    2a18:	43dc      	mvns	r4, r3
    2a1a:	e852 1f00 	ldrex	r1, [r2]
    2a1e:	ea01 0504 	and.w	r5, r1, r4
    2a22:	e842 5600 	strex	r6, r5, [r2]
    2a26:	2e00      	cmp	r6, #0
    2a28:	d1f7      	bne.n	2a1a <compare_int_lock+0xe>
    2a2a:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2a2e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2a32:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    2a34:	4806      	ldr	r0, [pc, #24]	; (2a50 <compare_int_lock+0x44>)
    2a36:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    2a3a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2a3e:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    2a42:	420b      	tst	r3, r1
}
    2a44:	bf14      	ite	ne
    2a46:	2001      	movne	r0, #1
    2a48:	2000      	moveq	r0, #0
    2a4a:	bd70      	pop	{r4, r5, r6, pc}
    2a4c:	200008e4 	.word	0x200008e4
    2a50:	40011000 	.word	0x40011000

00002a54 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    2a54:	491b      	ldr	r1, [pc, #108]	; (2ac4 <sys_clock_timeout_handler+0x70>)
{
    2a56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a58:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    2a5a:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    2a5e:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    2a60:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    2a64:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    2a68:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    2a6a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    2a6e:	d30f      	bcc.n	2a90 <sys_clock_timeout_handler+0x3c>
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    2a70:	f001 fee2 	bl	4838 <sys_clock_announce>
    return p_reg->CC[ch];
    2a74:	00a3      	lsls	r3, r4, #2
    2a76:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2a7a:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    2a7e:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    2a82:	4295      	cmp	r5, r2
    2a84:	d11d      	bne.n	2ac2 <sys_clock_timeout_handler+0x6e>
    p_reg->CC[ch] = cc_val;
    2a86:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    2a8a:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
}
    2a8e:	e012      	b.n	2ab6 <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    2a90:	4b0d      	ldr	r3, [pc, #52]	; (2ac8 <sys_clock_timeout_handler+0x74>)
    2a92:	681b      	ldr	r3, [r3, #0]
    2a94:	0a1a      	lsrs	r2, r3, #8
    2a96:	061b      	lsls	r3, r3, #24
    2a98:	195e      	adds	r6, r3, r5
    2a9a:	4b0c      	ldr	r3, [pc, #48]	; (2acc <sys_clock_timeout_handler+0x78>)
    2a9c:	f142 0700 	adc.w	r7, r2, #0
    2aa0:	e9c3 6700 	strd	r6, r7, [r3]
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    2aa4:	f001 fec8 	bl	4838 <sys_clock_announce>
    return p_reg->CC[ch];
    2aa8:	4a09      	ldr	r2, [pc, #36]	; (2ad0 <sys_clock_timeout_handler+0x7c>)
    2aaa:	f504 73a8 	add.w	r3, r4, #336	; 0x150
    2aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (cc_value == get_comparator(chan)) {
    2ab2:	429d      	cmp	r5, r3
    2ab4:	d105      	bne.n	2ac2 <sys_clock_timeout_handler+0x6e>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    2ab6:	4a06      	ldr	r2, [pc, #24]	; (2ad0 <sys_clock_timeout_handler+0x7c>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2ab8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2abc:	40a3      	lsls	r3, r4
    2abe:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
		if (!anchor_updated) {
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    2ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2ac4:	200001b8 	.word	0x200001b8
    2ac8:	200008e8 	.word	0x200008e8
    2acc:	200001c0 	.word	0x200001c0
    2ad0:	40011000 	.word	0x40011000

00002ad4 <compare_int_unlock>:
	if (key) {
    2ad4:	b311      	cbz	r1, 2b1c <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2ad6:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    2ada:	2301      	movs	r3, #1
    2adc:	4a10      	ldr	r2, [pc, #64]	; (2b20 <compare_int_unlock+0x4c>)
    2ade:	4083      	lsls	r3, r0
    2ae0:	e852 cf00 	ldrex	ip, [r2]
    2ae4:	ea4c 0c03 	orr.w	ip, ip, r3
    2ae8:	e842 c100 	strex	r1, ip, [r2]
    2aec:	2900      	cmp	r1, #0
    2aee:	d1f7      	bne.n	2ae0 <compare_int_unlock+0xc>
    2af0:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    2af4:	4a0b      	ldr	r2, [pc, #44]	; (2b24 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2af6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2afa:	4083      	lsls	r3, r0
    2afc:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2b00:	4b09      	ldr	r3, [pc, #36]	; (2b28 <compare_int_unlock+0x54>)
    2b02:	f3bf 8f5b 	dmb	ish
    2b06:	681b      	ldr	r3, [r3, #0]
    2b08:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    2b0c:	40c3      	lsrs	r3, r0
    2b0e:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2b10:	bf42      	ittt	mi
    2b12:	4b06      	ldrmi	r3, [pc, #24]	; (2b2c <compare_int_unlock+0x58>)
    2b14:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    2b18:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    2b1c:	4770      	bx	lr
    2b1e:	bf00      	nop
    2b20:	200008e4 	.word	0x200008e4
    2b24:	40011000 	.word	0x40011000
    2b28:	200008e0 	.word	0x200008e0
    2b2c:	e000e100 	.word	0xe000e100

00002b30 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    2b30:	4b0d      	ldr	r3, [pc, #52]	; (2b68 <z_nrf_rtc_timer_read+0x38>)
    2b32:	6818      	ldr	r0, [r3, #0]
    2b34:	0a01      	lsrs	r1, r0, #8
    2b36:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    2b38:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    2b3c:	4b0b      	ldr	r3, [pc, #44]	; (2b6c <z_nrf_rtc_timer_read+0x3c>)
    2b3e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    2b42:	1818      	adds	r0, r3, r0
    2b44:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    2b48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    2b4c:	d20a      	bcs.n	2b64 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    2b4e:	4b08      	ldr	r3, [pc, #32]	; (2b70 <z_nrf_rtc_timer_read+0x40>)
    2b50:	e9d3 2300 	ldrd	r2, r3, [r3]
    2b54:	4290      	cmp	r0, r2
    2b56:	eb71 0303 	sbcs.w	r3, r1, r3
    2b5a:	d203      	bcs.n	2b64 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    2b5c:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    2b60:	f141 0100 	adc.w	r1, r1, #0
}
    2b64:	4770      	bx	lr
    2b66:	bf00      	nop
    2b68:	200008e8 	.word	0x200008e8
    2b6c:	40011000 	.word	0x40011000
    2b70:	200001c0 	.word	0x200001c0

00002b74 <compare_set>:
{
    2b74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2b78:	4614      	mov	r4, r2
    2b7a:	461d      	mov	r5, r3
    2b7c:	4607      	mov	r7, r0
	key = compare_int_lock(chan);
    2b7e:	f7ff ff45 	bl	2a0c <compare_int_lock>
    2b82:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    2b84:	f7ff ffd4 	bl	2b30 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    2b88:	42a0      	cmp	r0, r4
    2b8a:	eb71 0305 	sbcs.w	r3, r1, r5
    2b8e:	d27a      	bcs.n	2c86 <compare_set+0x112>
		if (target_time - curr_time > COUNTER_SPAN) {
    2b90:	4b46      	ldr	r3, [pc, #280]	; (2cac <compare_set+0x138>)
    2b92:	1a20      	subs	r0, r4, r0
    2b94:	eb65 0101 	sbc.w	r1, r5, r1
    2b98:	4298      	cmp	r0, r3
    2b9a:	f171 0100 	sbcs.w	r1, r1, #0
    2b9e:	f080 8081 	bcs.w	2ca4 <compare_set+0x130>
		if (target_time != cc_data[chan].target_time) {
    2ba2:	4b43      	ldr	r3, [pc, #268]	; (2cb0 <compare_set+0x13c>)
    2ba4:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    2ba8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    2bac:	429d      	cmp	r5, r3
    2bae:	bf08      	it	eq
    2bb0:	4294      	cmpeq	r4, r2
    2bb2:	d053      	beq.n	2c5c <compare_set+0xe8>
    2bb4:	ea4f 0a87 	mov.w	sl, r7, lsl #2
    2bb8:	f10a 4a80 	add.w	sl, sl, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    2bbc:	f107 0950 	add.w	r9, r7, #80	; 0x50
    2bc0:	f50a 3a88 	add.w	sl, sl, #69632	; 0x11000
    2bc4:	ea4f 0989 	mov.w	r9, r9, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2bc8:	fa1f f989 	uxth.w	r9, r9
	return absolute_time & COUNTER_MAX;
    2bcc:	f024 487f 	bic.w	r8, r4, #4278190080	; 0xff000000
    2bd0:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2bd4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    return p_reg->CC[ch];
    2bd8:	f8da 0540 	ldr.w	r0, [sl, #1344]	; 0x540
     return p_reg->COUNTER;
    2bdc:	4a35      	ldr	r2, [pc, #212]	; (2cb4 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2bde:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
    2be2:	40bb      	lsls	r3, r7
	uint32_t cc_val = abs_val & COUNTER_MAX;
    2be4:	4646      	mov	r6, r8
     return p_reg->COUNTER;
    2be6:	f8d2 b504 	ldr.w	fp, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    2bea:	eba0 000b 	sub.w	r0, r0, fp
    2bee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    2bf2:	f02b 417f 	bic.w	r1, fp, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    2bf6:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    2bf8:	f8ca 1540 	str.w	r1, [sl, #1344]	; 0x540
    2bfc:	d105      	bne.n	2c0a <compare_set+0x96>
    2bfe:	9301      	str	r3, [sp, #4]
	z_impl_k_busy_wait(usec_to_wait);
    2c00:	2013      	movs	r0, #19
    2c02:	f002 fe82 	bl	590a <z_impl_k_busy_wait>
    2c06:	4a2b      	ldr	r2, [pc, #172]	; (2cb4 <compare_set+0x140>)
    2c08:	9b01      	ldr	r3, [sp, #4]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    2c0a:	f10b 0c02 	add.w	ip, fp, #2
	return (a - b) & COUNTER_MAX;
    2c0e:	eba6 000c 	sub.w	r0, r6, ip
    2c12:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    2c16:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2c1a:	bf88      	it	hi
    2c1c:	4666      	movhi	r6, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2c1e:	2000      	movs	r0, #0
    2c20:	f8c9 0000 	str.w	r0, [r9]
    2c24:	f8d9 0000 	ldr.w	r0, [r9]
    p_reg->EVTENSET = mask;
    2c28:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    2c2c:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    2c30:	f8ca 0540 	str.w	r0, [sl, #1344]	; 0x540
     return p_reg->COUNTER;
    2c34:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	} while ((now2 != now) &&
    2c38:	4583      	cmp	fp, r0
    2c3a:	d006      	beq.n	2c4a <compare_set+0xd6>
	return (a - b) & COUNTER_MAX;
    2c3c:	1a30      	subs	r0, r6, r0
    2c3e:	3802      	subs	r0, #2
    2c40:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    2c44:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2c48:	d81b      	bhi.n	2c82 <compare_set+0x10e>
	return (a - b) & COUNTER_MAX;
    2c4a:	eba6 0608 	sub.w	r6, r6, r8
    2c4e:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    2c52:	1936      	adds	r6, r6, r4
    2c54:	f145 0300 	adc.w	r3, r5, #0
    2c58:	4634      	mov	r4, r6
    2c5a:	461d      	mov	r5, r3
	cc_data[chan].target_time = target_time;
    2c5c:	4914      	ldr	r1, [pc, #80]	; (2cb0 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
    2c5e:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    2c60:	013b      	lsls	r3, r7, #4
    2c62:	eb01 1207 	add.w	r2, r1, r7, lsl #4
	cc_data[chan].callback = handler;
    2c66:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    2c68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2c6a:	6053      	str	r3, [r2, #4]
	cc_data[chan].target_time = target_time;
    2c6c:	e9c2 4502 	strd	r4, r5, [r2, #8]
	return ret;
    2c70:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
    2c72:	4638      	mov	r0, r7
    2c74:	9900      	ldr	r1, [sp, #0]
    2c76:	f7ff ff2d 	bl	2ad4 <compare_int_unlock>
}
    2c7a:	4620      	mov	r0, r4
    2c7c:	b003      	add	sp, #12
    2c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2c82:	4630      	mov	r0, r6
    2c84:	e7af      	b.n	2be6 <compare_set+0x72>
		atomic_or(&force_isr_mask, BIT(chan));
    2c86:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2c88:	4a0b      	ldr	r2, [pc, #44]	; (2cb8 <compare_set+0x144>)
    2c8a:	f3bf 8f5b 	dmb	ish
    2c8e:	40bb      	lsls	r3, r7
    2c90:	e852 0f00 	ldrex	r0, [r2]
    2c94:	4318      	orrs	r0, r3
    2c96:	e842 0100 	strex	r1, r0, [r2]
    2c9a:	2900      	cmp	r1, #0
    2c9c:	d1f8      	bne.n	2c90 <compare_set+0x11c>
    2c9e:	f3bf 8f5b 	dmb	ish
    2ca2:	e7db      	b.n	2c5c <compare_set+0xe8>
			return -EINVAL;
    2ca4:	f06f 0415 	mvn.w	r4, #21
    2ca8:	e7e3      	b.n	2c72 <compare_set+0xfe>
    2caa:	bf00      	nop
    2cac:	01000001 	.word	0x01000001
    2cb0:	200001a8 	.word	0x200001a8
    2cb4:	40011000 	.word	0x40011000
    2cb8:	200008e0 	.word	0x200008e0

00002cbc <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    2cbc:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    2cbe:	4b19      	ldr	r3, [pc, #100]	; (2d24 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    2cc0:	4d19      	ldr	r5, [pc, #100]	; (2d28 <sys_clock_driver_init+0x6c>)
    2cc2:	2400      	movs	r4, #0
    2cc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2cc8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2ccc:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    2cd0:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    2cd4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2cd8:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2cdc:	4b13      	ldr	r3, [pc, #76]	; (2d2c <sys_clock_driver_init+0x70>)
    2cde:	2602      	movs	r6, #2
    2ce0:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    2ce4:	2101      	movs	r1, #1
    2ce6:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    2cea:	2011      	movs	r0, #17
    2cec:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    2cf0:	4622      	mov	r2, r4
    2cf2:	f7fe fe73 	bl	19dc <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    2cf6:	2011      	movs	r0, #17
    2cf8:	f7fe fe54 	bl	19a4 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    2cfc:	4a0c      	ldr	r2, [pc, #48]	; (2d30 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    2cfe:	2301      	movs	r3, #1
    2d00:	60ab      	str	r3, [r5, #8]
    2d02:	602b      	str	r3, [r5, #0]
    2d04:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    2d06:	4b0b      	ldr	r3, [pc, #44]	; (2d34 <sys_clock_driver_init+0x78>)
    2d08:	4a0b      	ldr	r2, [pc, #44]	; (2d38 <sys_clock_driver_init+0x7c>)
    2d0a:	9300      	str	r3, [sp, #0]
    2d0c:	9401      	str	r4, [sp, #4]
    2d0e:	2300      	movs	r3, #0
    2d10:	4620      	mov	r0, r4
    2d12:	f7ff ff2f 	bl	2b74 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    2d16:	4630      	mov	r0, r6
    2d18:	f7ff faf4 	bl	2304 <z_nrf_clock_control_lf_on>

	return 0;
}
    2d1c:	4620      	mov	r0, r4
    2d1e:	b002      	add	sp, #8
    2d20:	bd70      	pop	{r4, r5, r6, pc}
    2d22:	bf00      	nop
    2d24:	200001a8 	.word	0x200001a8
    2d28:	40011000 	.word	0x40011000
    2d2c:	e000e100 	.word	0xe000e100
    2d30:	200008e4 	.word	0x200008e4
    2d34:	00002a55 	.word	0x00002a55
    2d38:	007fffff 	.word	0x007fffff

00002d3c <rtc_nrf_isr>:
{
    2d3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    2d40:	4c33      	ldr	r4, [pc, #204]	; (2e10 <rtc_nrf_isr+0xd4>)
    2d42:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    2d46:	079a      	lsls	r2, r3, #30
    2d48:	d50b      	bpl.n	2d62 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2d4a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    2d4e:	b143      	cbz	r3, 2d62 <rtc_nrf_isr+0x26>
		overflow_cnt++;
    2d50:	4a30      	ldr	r2, [pc, #192]	; (2e14 <rtc_nrf_isr+0xd8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2d52:	2300      	movs	r3, #0
    2d54:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    2d58:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    2d5c:	6813      	ldr	r3, [r2, #0]
    2d5e:	3301      	adds	r3, #1
    2d60:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    2d62:	f04f 0320 	mov.w	r3, #32
    2d66:	f3ef 8211 	mrs	r2, BASEPRI
    2d6a:	f383 8812 	msr	BASEPRI_MAX, r3
    2d6e:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    2d72:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    2d76:	03db      	lsls	r3, r3, #15
    2d78:	d529      	bpl.n	2dce <rtc_nrf_isr+0x92>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2d7a:	f3bf 8f5b 	dmb	ish
    2d7e:	4b26      	ldr	r3, [pc, #152]	; (2e18 <rtc_nrf_isr+0xdc>)
    2d80:	e853 1f00 	ldrex	r1, [r3]
    2d84:	f021 0001 	bic.w	r0, r1, #1
    2d88:	e843 0500 	strex	r5, r0, [r3]
    2d8c:	2d00      	cmp	r5, #0
    2d8e:	d1f7      	bne.n	2d80 <rtc_nrf_isr+0x44>
    2d90:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    2d94:	b911      	cbnz	r1, 2d9c <rtc_nrf_isr+0x60>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2d96:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    2d9a:	b1c3      	cbz	r3, 2dce <rtc_nrf_isr+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2d9c:	2500      	movs	r5, #0
    2d9e:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    2da2:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
	__asm__ volatile(
    2da6:	f382 8811 	msr	BASEPRI, r2
    2daa:	f3bf 8f6f 	isb	sy
		curr_time = z_nrf_rtc_timer_read();
    2dae:	f7ff febf 	bl	2b30 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    2db2:	f04f 0320 	mov.w	r3, #32
    2db6:	f3ef 8211 	mrs	r2, BASEPRI
    2dba:	f383 8812 	msr	BASEPRI_MAX, r3
    2dbe:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    2dc2:	4b16      	ldr	r3, [pc, #88]	; (2e1c <rtc_nrf_isr+0xe0>)
    2dc4:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    2dc8:	42b0      	cmp	r0, r6
    2dca:	41b9      	sbcs	r1, r7
    2dcc:	d206      	bcs.n	2ddc <rtc_nrf_isr+0xa0>
	__asm__ volatile(
    2dce:	f382 8811 	msr	BASEPRI, r2
    2dd2:	f3bf 8f6f 	isb	sy
}
    2dd6:	b003      	add	sp, #12
    2dd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    2ddc:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    2de0:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
    2de4:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    2de8:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
    2dec:	601d      	str	r5, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    2dee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2df2:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    2df6:	f382 8811 	msr	BASEPRI, r2
    2dfa:	f3bf 8f6f 	isb	sy
		if (handler) {
    2dfe:	2900      	cmp	r1, #0
    2e00:	d0e9      	beq.n	2dd6 <rtc_nrf_isr+0x9a>
			handler(chan, expire_time, user_context);
    2e02:	9000      	str	r0, [sp, #0]
    2e04:	4632      	mov	r2, r6
    2e06:	463b      	mov	r3, r7
    2e08:	4628      	mov	r0, r5
    2e0a:	4788      	blx	r1
}
    2e0c:	e7e3      	b.n	2dd6 <rtc_nrf_isr+0x9a>
    2e0e:	bf00      	nop
    2e10:	40011000 	.word	0x40011000
    2e14:	200008e8 	.word	0x200008e8
    2e18:	200008e0 	.word	0x200008e0
    2e1c:	200001a8 	.word	0x200001a8

00002e20 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    2e20:	1c43      	adds	r3, r0, #1
{
    2e22:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    2e24:	d021      	beq.n	2e6a <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    2e26:	2801      	cmp	r0, #1
    2e28:	dd21      	ble.n	2e6e <sys_clock_set_timeout+0x4e>
    2e2a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2e2e:	da20      	bge.n	2e72 <sys_clock_set_timeout+0x52>
    2e30:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    2e32:	f7ff fe7d 	bl	2b30 <z_nrf_rtc_timer_read>
    2e36:	4b10      	ldr	r3, [pc, #64]	; (2e78 <sys_clock_set_timeout+0x58>)
    2e38:	e9d3 1300 	ldrd	r1, r3, [r3]
    2e3c:	1a42      	subs	r2, r0, r1
		ticks = 0;
    2e3e:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
	if (cyc > MAX_CYCLES) {
    2e42:	480e      	ldr	r0, [pc, #56]	; (2e7c <sys_clock_set_timeout+0x5c>)
		ticks = 0;
    2e44:	bf28      	it	cs
    2e46:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    2e48:	3201      	adds	r2, #1
    2e4a:	4422      	add	r2, r4
	if (cyc > MAX_CYCLES) {
    2e4c:	4282      	cmp	r2, r0
    2e4e:	bf28      	it	cs
    2e50:	4602      	movcs	r2, r0
	uint64_t target_time = cyc + last_count;
    2e52:	1852      	adds	r2, r2, r1
    2e54:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    2e58:	4909      	ldr	r1, [pc, #36]	; (2e80 <sys_clock_set_timeout+0x60>)
    2e5a:	9001      	str	r0, [sp, #4]
    2e5c:	9100      	str	r1, [sp, #0]
    2e5e:	f143 0300 	adc.w	r3, r3, #0
    2e62:	f7ff fe87 	bl	2b74 <compare_set>
}
    2e66:	b002      	add	sp, #8
    2e68:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    2e6a:	4804      	ldr	r0, [pc, #16]	; (2e7c <sys_clock_set_timeout+0x5c>)
    2e6c:	e7e0      	b.n	2e30 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    2e6e:	2400      	movs	r4, #0
    2e70:	e7df      	b.n	2e32 <sys_clock_set_timeout+0x12>
    2e72:	4c02      	ldr	r4, [pc, #8]	; (2e7c <sys_clock_set_timeout+0x5c>)
    2e74:	e7dd      	b.n	2e32 <sys_clock_set_timeout+0x12>
    2e76:	bf00      	nop
    2e78:	200001b8 	.word	0x200001b8
    2e7c:	007fffff 	.word	0x007fffff
    2e80:	00002a55 	.word	0x00002a55

00002e84 <sys_clock_elapsed>:
{
    2e84:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    2e86:	f7ff fe53 	bl	2b30 <z_nrf_rtc_timer_read>
    2e8a:	4b02      	ldr	r3, [pc, #8]	; (2e94 <sys_clock_elapsed+0x10>)
    2e8c:	681b      	ldr	r3, [r3, #0]
}
    2e8e:	1ac0      	subs	r0, r0, r3
    2e90:	bd08      	pop	{r3, pc}
    2e92:	bf00      	nop
    2e94:	200001b8 	.word	0x200001b8

00002e98 <nrf_gpio_pin_clear>:
    *p_pin = pin_number & 0x1F;
    2e98:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    2e9c:	0940      	lsrs	r0, r0, #5
        case 0: return NRF_P0;
    2e9e:	2801      	cmp	r0, #1
    2ea0:	4b04      	ldr	r3, [pc, #16]	; (2eb4 <nrf_gpio_pin_clear+0x1c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    2ea2:	f04f 0201 	mov.w	r2, #1
        case 0: return NRF_P0;
    2ea6:	bf18      	it	ne
    2ea8:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    2eac:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
    2eae:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
}
    2eb2:	4770      	bx	lr
    2eb4:	50000300 	.word	0x50000300

00002eb8 <nrf_pin_configure>:
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input)
{
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    2eb8:	f400 5380 	and.w	r3, r0, #4096	; 0x1000
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2ebc:	2b00      	cmp	r3, #0
{
    2ebe:	b530      	push	{r4, r5, lr}
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2ec0:	bf16      	itet	ne
    2ec2:	2100      	movne	r1, #0
    2ec4:	4614      	moveq	r4, r2
    2ec6:	2401      	movne	r4, #1
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    2ec8:	f3c0 1581 	ubfx	r5, r0, #6, #2
    *p_pin = pin_number & 0x1F;
    2ecc:	f000 021f 	and.w	r2, r0, #31
        case 0: return NRF_P0;
    2ed0:	f010 0f20 	tst.w	r0, #32
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    2ed4:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    2ed8:	ea40 0085 	orr.w	r0, r0, r5, lsl #2
        case 0: return NRF_P0;
    2edc:	4b06      	ldr	r3, [pc, #24]	; (2ef8 <nrf_pin_configure+0x40>)
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    2ede:	ea40 0001 	orr.w	r0, r0, r1
        case 0: return NRF_P0;
    2ee2:	bf08      	it	eq
    2ee4:	f04f 43a0 	moveq.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    2ee8:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    2eec:	ea40 0044 	orr.w	r0, r0, r4, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    2ef0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
}
    2ef4:	bd30      	pop	{r4, r5, pc}
    2ef6:	bf00      	nop
    2ef8:	50000300 	.word	0x50000300

00002efc <nrf_gpio_pin_set>:
    *p_pin = pin_number & 0x1F;
    2efc:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    2f00:	0940      	lsrs	r0, r0, #5
        case 0: return NRF_P0;
    2f02:	2801      	cmp	r0, #1
    2f04:	4b04      	ldr	r3, [pc, #16]	; (2f18 <nrf_gpio_pin_set+0x1c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2f06:	f04f 0201 	mov.w	r2, #1
        case 0: return NRF_P0;
    2f0a:	bf18      	it	ne
    2f0c:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2f10:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    2f12:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}
    2f16:	4770      	bx	lr
    2f18:	50000300 	.word	0x50000300

00002f1c <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    2f1c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    2f20:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    2f24:	2a08      	cmp	r2, #8
    2f26:	d106      	bne.n	2f36 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    2f28:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    2f2c:	2b05      	cmp	r3, #5
    2f2e:	d802      	bhi.n	2f36 <nrf52_errata_103+0x1a>
    2f30:	4a02      	ldr	r2, [pc, #8]	; (2f3c <nrf52_errata_103+0x20>)
    2f32:	5cd0      	ldrb	r0, [r2, r3]
    2f34:	4770      	bx	lr
                        return false;
    2f36:	2000      	movs	r0, #0
}
    2f38:	4770      	bx	lr
    2f3a:	bf00      	nop
    2f3c:	0000680a 	.word	0x0000680a

00002f40 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    2f40:	4a02      	ldr	r2, [pc, #8]	; (2f4c <nvmc_wait+0xc>)
    2f42:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    2f46:	2b00      	cmp	r3, #0
    2f48:	d0fb      	beq.n	2f42 <nvmc_wait+0x2>
}
    2f4a:	4770      	bx	lr
    2f4c:	4001e000 	.word	0x4001e000

00002f50 <SystemInit>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    2f50:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    2f54:	b510      	push	{r4, lr}
            if (var1 == 0x08)
    2f56:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    2f5a:	2a08      	cmp	r2, #8
    2f5c:	d14e      	bne.n	2ffc <SystemInit+0xac>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
    2f5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2f62:	2100      	movs	r1, #0
    2f64:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    2f68:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    2f6c:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    2f70:	f502 4240 	add.w	r2, r2, #49152	; 0xc000
    2f74:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
    2f78:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    2f7c:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
    2f80:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    2f84:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
    2f88:	f8c2 1528 	str.w	r1, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    2f8c:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
    2f90:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    2f94:	f8d3 1414 	ldr.w	r1, [r3, #1044]	; 0x414
    2f98:	f8c2 1530 	str.w	r1, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    2f9c:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    2fa0:	f8c2 1534 	str.w	r1, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    2fa4:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
    2fa8:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    2fac:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
    2fb0:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    2fb4:	f8d3 1424 	ldr.w	r1, [r3, #1060]	; 0x424
    2fb8:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    2fbc:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
    2fc0:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    2fc4:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
    2fc8:	f8c2 1550 	str.w	r1, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    2fcc:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
    2fd0:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    2fd4:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
    2fd8:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    2fdc:	f8d3 1438 	ldr.w	r1, [r3, #1080]	; 0x438
    2fe0:	f8c2 1564 	str.w	r1, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    2fe4:	f8d3 143c 	ldr.w	r1, [r3, #1084]	; 0x43c
    2fe8:	f8c2 1568 	str.w	r1, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    2fec:	f8d3 1440 	ldr.w	r1, [r3, #1088]	; 0x440
    2ff0:	f8c2 156c 	str.w	r1, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    2ff4:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
    2ff8:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    2ffc:	f7ff ff8e 	bl	2f1c <nrf52_errata_103>
    3000:	b118      	cbz	r0, 300a <SystemInit+0xba>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    3002:	4b3b      	ldr	r3, [pc, #236]	; (30f0 <SystemInit+0x1a0>)
    3004:	4a3b      	ldr	r2, [pc, #236]	; (30f4 <SystemInit+0x1a4>)
    3006:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    300a:	f7ff ff87 	bl	2f1c <nrf52_errata_103>
    300e:	b118      	cbz	r0, 3018 <SystemInit+0xc8>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    3010:	4b39      	ldr	r3, [pc, #228]	; (30f8 <SystemInit+0x1a8>)
    3012:	22fb      	movs	r2, #251	; 0xfb
    3014:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    3018:	f7ff ff80 	bl	2f1c <nrf52_errata_103>
    301c:	b170      	cbz	r0, 303c <SystemInit+0xec>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    301e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    3022:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    3026:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
    302a:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    302e:	f022 020f 	bic.w	r2, r2, #15
    3032:	f003 030f 	and.w	r3, r3, #15
    3036:	4313      	orrs	r3, r2
    3038:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    303c:	f7ff ff6e 	bl	2f1c <nrf52_errata_103>
    3040:	b120      	cbz	r0, 304c <SystemInit+0xfc>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    3042:	4b2e      	ldr	r3, [pc, #184]	; (30fc <SystemInit+0x1ac>)
    3044:	f44f 7200 	mov.w	r2, #512	; 0x200
    3048:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    304c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    3050:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    3054:	2b08      	cmp	r3, #8
    3056:	d11a      	bne.n	308e <SystemInit+0x13e>

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    3058:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    305c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    3060:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    3062:	bf44      	itt	mi
    3064:	f06f 0201 	mvnmi.w	r2, #1
    3068:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    306c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    3070:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
            {
                switch(var2)
    3074:	2b05      	cmp	r3, #5
    3076:	d802      	bhi.n	307e <SystemInit+0x12e>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    3078:	4a21      	ldr	r2, [pc, #132]	; (3100 <SystemInit+0x1b0>)
    307a:	5cd3      	ldrb	r3, [r2, r3]
    307c:	b13b      	cbz	r3, 308e <SystemInit+0x13e>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    307e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    3082:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    3086:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    308a:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    308e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    3092:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3096:	2a00      	cmp	r2, #0
    3098:	db03      	blt.n	30a2 <SystemInit+0x152>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    309a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    309e:	2b00      	cmp	r3, #0
    30a0:	da22      	bge.n	30e8 <SystemInit+0x198>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    30a2:	4918      	ldr	r1, [pc, #96]	; (3104 <SystemInit+0x1b4>)
    30a4:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    30a6:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    30aa:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    30ae:	2412      	movs	r4, #18
    nvmc_wait();
    30b0:	f7ff ff46 	bl	2f40 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    30b4:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    30b8:	f7ff ff42 	bl	2f40 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    30bc:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    30c0:	f7ff ff3e 	bl	2f40 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    30c4:	2300      	movs	r3, #0
    30c6:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    30ca:	f7ff ff39 	bl	2f40 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    30ce:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    30d2:	490d      	ldr	r1, [pc, #52]	; (3108 <SystemInit+0x1b8>)
    30d4:	4b0d      	ldr	r3, [pc, #52]	; (310c <SystemInit+0x1bc>)
    30d6:	68ca      	ldr	r2, [r1, #12]
    30d8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    30dc:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    30de:	60cb      	str	r3, [r1, #12]
    30e0:	f3bf 8f4f 	dsb	sy
    __NOP();
    30e4:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    30e6:	e7fd      	b.n	30e4 <SystemInit+0x194>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    30e8:	4b09      	ldr	r3, [pc, #36]	; (3110 <SystemInit+0x1c0>)
    30ea:	4a0a      	ldr	r2, [pc, #40]	; (3114 <SystemInit+0x1c4>)
    30ec:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    30ee:	bd10      	pop	{r4, pc}
    30f0:	40005000 	.word	0x40005000
    30f4:	00038148 	.word	0x00038148
    30f8:	4000f000 	.word	0x4000f000
    30fc:	40029000 	.word	0x40029000
    3100:	00006804 	.word	0x00006804
    3104:	4001e000 	.word	0x4001e000
    3108:	e000ed00 	.word	0xe000ed00
    310c:	05fa0004 	.word	0x05fa0004
    3110:	20000054 	.word	0x20000054
    3114:	03d09000 	.word	0x03d09000

00003118 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    3118:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    311a:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    311c:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    311e:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
    3122:	fab2 f382 	clz	r3, r2
    3126:	f1c3 031f 	rsb	r3, r3, #31
    312a:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    312c:	fa05 f403 	lsl.w	r4, r5, r3
    3130:	ea22 0404 	bic.w	r4, r2, r4
    3134:	e850 6f00 	ldrex	r6, [r0]
    3138:	4296      	cmp	r6, r2
    313a:	d104      	bne.n	3146 <nrfx_flag32_alloc+0x2e>
    313c:	e840 4c00 	strex	ip, r4, [r0]
    3140:	f1bc 0f00 	cmp.w	ip, #0
    3144:	d1f6      	bne.n	3134 <nrfx_flag32_alloc+0x1c>
    3146:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    314a:	d1e7      	bne.n	311c <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    314c:	4801      	ldr	r0, [pc, #4]	; (3154 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
    314e:	700b      	strb	r3, [r1, #0]
}
    3150:	bd70      	pop	{r4, r5, r6, pc}
    3152:	bf00      	nop
    3154:	0bad0000 	.word	0x0bad0000

00003158 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    3158:	6803      	ldr	r3, [r0, #0]
    315a:	40cb      	lsrs	r3, r1
    315c:	07db      	lsls	r3, r3, #31
{
    315e:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    3160:	d414      	bmi.n	318c <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    3162:	2301      	movs	r3, #1
    3164:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    3166:	6802      	ldr	r2, [r0, #0]
    3168:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    316c:	ea43 0102 	orr.w	r1, r3, r2
    3170:	e850 4f00 	ldrex	r4, [r0]
    3174:	4294      	cmp	r4, r2
    3176:	d104      	bne.n	3182 <nrfx_flag32_free+0x2a>
    3178:	e840 1c00 	strex	ip, r1, [r0]
    317c:	f1bc 0f00 	cmp.w	ip, #0
    3180:	d1f6      	bne.n	3170 <nrfx_flag32_free+0x18>
    3182:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    3186:	d1ee      	bne.n	3166 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    3188:	4801      	ldr	r0, [pc, #4]	; (3190 <nrfx_flag32_free+0x38>)
}
    318a:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    318c:	4801      	ldr	r0, [pc, #4]	; (3194 <nrfx_flag32_free+0x3c>)
    318e:	e7fc      	b.n	318a <nrfx_flag32_free+0x32>
    3190:	0bad0000 	.word	0x0bad0000
    3194:	0bad0004 	.word	0x0bad0004

00003198 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    3198:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    319a:	4604      	mov	r4, r0
    319c:	b118      	cbz	r0, 31a6 <clock_stop+0xe>
    319e:	2801      	cmp	r0, #1
    31a0:	d022      	beq.n	31e8 <clock_stop+0x50>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    31a2:	b003      	add	sp, #12
    31a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
    31a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    31aa:	2202      	movs	r2, #2
    31ac:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    31b0:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    31b4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    31b8:	2201      	movs	r2, #1
    31ba:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    31bc:	4607      	mov	r7, r0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    31be:	2301      	movs	r3, #1
    31c0:	f88d 3007 	strb.w	r3, [sp, #7]
    31c4:	f242 7510 	movw	r5, #10000	; 0x2710
    31c8:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    31cc:	b1cc      	cbz	r4, 3202 <clock_stop+0x6a>
    31ce:	2c01      	cmp	r4, #1
    31d0:	d1e7      	bne.n	31a2 <clock_stop+0xa>
            if (p_clk_src != NULL)
    31d2:	b3c7      	cbz	r7, 3246 <clock_stop+0xae>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    31d4:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    31d8:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    31dc:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    31de:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    31e2:	03da      	lsls	r2, r3, #15
    31e4:	d521      	bpl.n	322a <clock_stop+0x92>
    31e6:	e016      	b.n	3216 <clock_stop+0x7e>
    p_reg->INTENCLR = mask;
    31e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    31ec:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    31ee:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    31f2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    31f6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    31fa:	6058      	str	r0, [r3, #4]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    31fc:	f10d 0707 	add.w	r7, sp, #7
    3200:	e7dd      	b.n	31be <clock_stop+0x26>
            if (p_clk_src != NULL)
    3202:	b1b7      	cbz	r7, 3232 <clock_stop+0x9a>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3204:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    3208:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    320c:	603b      	str	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    320e:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    3212:	03d8      	lsls	r0, r3, #15
    3214:	d5c5      	bpl.n	31a2 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    3216:	f89d 0007 	ldrb.w	r0, [sp, #7]
    321a:	2801      	cmp	r0, #1
    321c:	d103      	bne.n	3226 <clock_stop+0x8e>
    321e:	f002 f95a 	bl	54d6 <nrfx_busy_wait>
    3222:	3d01      	subs	r5, #1
    3224:	d1d2      	bne.n	31cc <clock_stop+0x34>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    3226:	2c01      	cmp	r4, #1
    3228:	d1bb      	bne.n	31a2 <clock_stop+0xa>
            m_clock_cb.hfclk_started = false;
    322a:	4b0c      	ldr	r3, [pc, #48]	; (325c <clock_stop+0xc4>)
    322c:	2200      	movs	r2, #0
    322e:	715a      	strb	r2, [r3, #5]
    3230:	e7b7      	b.n	31a2 <clock_stop+0xa>
    3232:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    3236:	03d9      	lsls	r1, r3, #15
    3238:	d5b3      	bpl.n	31a2 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    323a:	2001      	movs	r0, #1
    323c:	f002 f94b 	bl	54d6 <nrfx_busy_wait>
    3240:	3d01      	subs	r5, #1
    3242:	d1f6      	bne.n	3232 <clock_stop+0x9a>
    3244:	e7ad      	b.n	31a2 <clock_stop+0xa>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3246:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    324a:	03db      	lsls	r3, r3, #15
    324c:	d5ed      	bpl.n	322a <clock_stop+0x92>
    324e:	2001      	movs	r0, #1
    3250:	f002 f941 	bl	54d6 <nrfx_busy_wait>
    3254:	3d01      	subs	r5, #1
    3256:	d1f6      	bne.n	3246 <clock_stop+0xae>
    3258:	e7e7      	b.n	322a <clock_stop+0x92>
    325a:	bf00      	nop
    325c:	200008ec 	.word	0x200008ec

00003260 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    3260:	4b04      	ldr	r3, [pc, #16]	; (3274 <nrfx_clock_init+0x14>)
    3262:	791a      	ldrb	r2, [r3, #4]
    3264:	b922      	cbnz	r2, 3270 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    3266:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    3268:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    326a:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    326c:	4802      	ldr	r0, [pc, #8]	; (3278 <nrfx_clock_init+0x18>)
    326e:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    3270:	4802      	ldr	r0, [pc, #8]	; (327c <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    3272:	4770      	bx	lr
    3274:	200008ec 	.word	0x200008ec
    3278:	0bad0000 	.word	0x0bad0000
    327c:	0bad000c 	.word	0x0bad000c

00003280 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3280:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    3284:	b510      	push	{r4, lr}
    3286:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    328a:	b16a      	cbz	r2, 32a8 <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    328c:	2200      	movs	r2, #0
    328e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    3292:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    3296:	2201      	movs	r2, #1
    3298:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    329c:	4b11      	ldr	r3, [pc, #68]	; (32e4 <nrfx_power_clock_irq_handler+0x64>)
    329e:	7958      	ldrb	r0, [r3, #5]
    32a0:	b910      	cbnz	r0, 32a8 <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    32a2:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    32a4:	681b      	ldr	r3, [r3, #0]
    32a6:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    32a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    32ac:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    32b0:	b172      	cbz	r2, 32d0 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    32b2:	2200      	movs	r2, #0
    32b4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    32b8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    32bc:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    32c0:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    32c4:	0792      	lsls	r2, r2, #30
    32c6:	d104      	bne.n	32d2 <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    32c8:	2201      	movs	r2, #1
    32ca:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    32ce:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    32d0:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    32d2:	2202      	movs	r2, #2
    32d4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    32d8:	4b02      	ldr	r3, [pc, #8]	; (32e4 <nrfx_power_clock_irq_handler+0x64>)
}
    32da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    32de:	681b      	ldr	r3, [r3, #0]
    32e0:	2001      	movs	r0, #1
    32e2:	4718      	bx	r3
    32e4:	200008ec 	.word	0x200008ec

000032e8 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    32e8:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    32ea:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    32ee:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
    32f0:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    32f2:	6002      	str	r2, [r0, #0]
}
    32f4:	4802      	ldr	r0, [pc, #8]	; (3300 <nrf_gpio_pin_port_decode+0x18>)
    32f6:	bf18      	it	ne
    32f8:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    32fc:	4770      	bx	lr
    32fe:	bf00      	nop
    3300:	50000300 	.word	0x50000300

00003304 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    3304:	4b03      	ldr	r3, [pc, #12]	; (3314 <pin_in_use_by_te+0x10>)
    3306:	3008      	adds	r0, #8
    3308:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    330c:	f3c0 1040 	ubfx	r0, r0, #5, #1
    3310:	4770      	bx	lr
    3312:	bf00      	nop
    3314:	20000058 	.word	0x20000058

00003318 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    3318:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    331a:	f100 0308 	add.w	r3, r0, #8
    331e:	4c0c      	ldr	r4, [pc, #48]	; (3350 <call_handler+0x38>)
    3320:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    3324:	05da      	lsls	r2, r3, #23
{
    3326:	4605      	mov	r5, r0
    3328:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    332a:	d507      	bpl.n	333c <call_handler+0x24>
    332c:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    3330:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    3334:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    3338:	6852      	ldr	r2, [r2, #4]
    333a:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    333c:	68a3      	ldr	r3, [r4, #8]
    333e:	b12b      	cbz	r3, 334c <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    3340:	68e2      	ldr	r2, [r4, #12]
    3342:	4631      	mov	r1, r6
    3344:	4628      	mov	r0, r5
    }
}
    3346:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    334a:	4718      	bx	r3
}
    334c:	bd70      	pop	{r4, r5, r6, pc}
    334e:	bf00      	nop
    3350:	20000058 	.word	0x20000058

00003354 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3354:	4a12      	ldr	r2, [pc, #72]	; (33a0 <release_handler+0x4c>)
    3356:	3008      	adds	r0, #8
{
    3358:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    335a:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    335e:	05d9      	lsls	r1, r3, #23
    3360:	d51b      	bpl.n	339a <release_handler+0x46>
    3362:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    3366:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    336a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    336e:	f102 040e 	add.w	r4, r2, #14
    3372:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    3374:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    3378:	f413 7f80 	tst.w	r3, #256	; 0x100
    337c:	d003      	beq.n	3386 <release_handler+0x32>
    337e:	f3c3 2343 	ubfx	r3, r3, #9, #4
    3382:	4299      	cmp	r1, r3
    3384:	d009      	beq.n	339a <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    3386:	3001      	adds	r0, #1
    3388:	2830      	cmp	r0, #48	; 0x30
    338a:	d1f3      	bne.n	3374 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    338c:	2300      	movs	r3, #0
    338e:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    3392:	4804      	ldr	r0, [pc, #16]	; (33a4 <release_handler+0x50>)
}
    3394:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    3396:	f7ff bedf 	b.w	3158 <nrfx_flag32_free>
}
    339a:	bc10      	pop	{r4}
    339c:	4770      	bx	lr
    339e:	bf00      	nop
    33a0:	20000058 	.word	0x20000058
    33a4:	200000cc 	.word	0x200000cc

000033a8 <pin_handler_trigger_uninit>:
{
    33a8:	b538      	push	{r3, r4, r5, lr}
    33aa:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    33ac:	f7ff ffaa 	bl	3304 <pin_in_use_by_te>
    33b0:	4c09      	ldr	r4, [pc, #36]	; (33d8 <pin_handler_trigger_uninit+0x30>)
    33b2:	f102 0508 	add.w	r5, r2, #8
    33b6:	b140      	cbz	r0, 33ca <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    33b8:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    33bc:	4907      	ldr	r1, [pc, #28]	; (33dc <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    33be:	0b5b      	lsrs	r3, r3, #13
    33c0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    33c4:	2000      	movs	r0, #0
    33c6:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    33ca:	4610      	mov	r0, r2
    33cc:	f7ff ffc2 	bl	3354 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    33d0:	2300      	movs	r3, #0
    33d2:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    33d6:	bd38      	pop	{r3, r4, r5, pc}
    33d8:	20000058 	.word	0x20000058
    33dc:	40006000 	.word	0x40006000

000033e0 <nrfx_gpiote_input_configure>:
{
    33e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    33e4:	4604      	mov	r4, r0
    33e6:	b085      	sub	sp, #20
    33e8:	4690      	mov	r8, r2
    33ea:	461d      	mov	r5, r3
    if (p_input_config)
    33ec:	b1f1      	cbz	r1, 342c <nrfx_gpiote_input_configure+0x4c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    33ee:	4f4e      	ldr	r7, [pc, #312]	; (3528 <nrfx_gpiote_input_configure+0x148>)
    33f0:	f100 0908 	add.w	r9, r0, #8
    33f4:	f837 6019 	ldrh.w	r6, [r7, r9, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    33f8:	07b3      	lsls	r3, r6, #30
    33fa:	d502      	bpl.n	3402 <nrfx_gpiote_input_configure+0x22>
    33fc:	f7ff ff82 	bl	3304 <pin_in_use_by_te>
    3400:	bb18      	cbnz	r0, 344a <nrfx_gpiote_input_configure+0x6a>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    3402:	2300      	movs	r3, #0
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    3404:	f026 0602 	bic.w	r6, r6, #2
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    3408:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    340c:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    3410:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    3414:	f10d 020f 	add.w	r2, sp, #15
    3418:	460b      	mov	r3, r1
    341a:	4620      	mov	r0, r4
    341c:	f10d 010e 	add.w	r1, sp, #14
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    3420:	f046 0601 	orr.w	r6, r6, #1
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    3424:	f002 f8a4 	bl	5570 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    3428:	f827 6019 	strh.w	r6, [r7, r9, lsl #1]
    if (p_trigger_config)
    342c:	f1b8 0f00 	cmp.w	r8, #0
    3430:	d026      	beq.n	3480 <nrfx_gpiote_input_configure+0xa0>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3432:	4b3d      	ldr	r3, [pc, #244]	; (3528 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    3434:	f898 7000 	ldrb.w	r7, [r8]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    3438:	f8d8 2004 	ldr.w	r2, [r8, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    343c:	f104 0608 	add.w	r6, r4, #8
    3440:	f833 1016 	ldrh.w	r1, [r3, r6, lsl #1]
        if (pin_is_output(pin))
    3444:	0788      	lsls	r0, r1, #30
    3446:	d502      	bpl.n	344e <nrfx_gpiote_input_configure+0x6e>
            if (use_evt)
    3448:	b192      	cbz	r2, 3470 <nrfx_gpiote_input_configure+0x90>
            return NRFX_ERROR_INVALID_PARAM;
    344a:	4838      	ldr	r0, [pc, #224]	; (352c <nrfx_gpiote_input_configure+0x14c>)
    344c:	e01a      	b.n	3484 <nrfx_gpiote_input_configure+0xa4>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    344e:	f021 0120 	bic.w	r1, r1, #32
    3452:	04c9      	lsls	r1, r1, #19
    3454:	0cc9      	lsrs	r1, r1, #19
    3456:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
            if (use_evt)
    345a:	b14a      	cbz	r2, 3470 <nrfx_gpiote_input_configure+0x90>
                if (!edge)
    345c:	2f03      	cmp	r7, #3
    345e:	d8f4      	bhi.n	344a <nrfx_gpiote_input_configure+0x6a>
                uint8_t ch = *p_trigger_config->p_in_channel;
    3460:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    3464:	b98f      	cbnz	r7, 348a <nrfx_gpiote_input_configure+0xaa>
    3466:	4a32      	ldr	r2, [pc, #200]	; (3530 <nrfx_gpiote_input_configure+0x150>)
    3468:	f50c 7ca2 	add.w	ip, ip, #324	; 0x144
    346c:	f842 702c 	str.w	r7, [r2, ip, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    3470:	f833 2016 	ldrh.w	r2, [r3, r6, lsl #1]
    3474:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    3478:	ea42 0287 	orr.w	r2, r2, r7, lsl #2
    347c:	f823 2016 	strh.w	r2, [r3, r6, lsl #1]
    if (p_handler_config)
    3480:	bb4d      	cbnz	r5, 34d6 <nrfx_gpiote_input_configure+0xf6>
        err = NRFX_SUCCESS;
    3482:	482c      	ldr	r0, [pc, #176]	; (3534 <nrfx_gpiote_input_configure+0x154>)
}
    3484:	b005      	add	sp, #20
    3486:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    348a:	ea4f 028c 	mov.w	r2, ip, lsl #2
    348e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    3492:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    3496:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
    349a:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    349e:	f020 0003 	bic.w	r0, r0, #3
    34a2:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    34a6:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    34aa:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
    34ae:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    34b2:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    34b6:	0220      	lsls	r0, r4, #8
    34b8:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    34bc:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
    34c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
    34c4:	ea40 000e 	orr.w	r0, r0, lr
    34c8:	f041 0120 	orr.w	r1, r1, #32
    34cc:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
    34d0:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    34d4:	e7cc      	b.n	3470 <nrfx_gpiote_input_configure+0x90>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    34d6:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    34da:	4620      	mov	r0, r4
    34dc:	f7ff ff3a 	bl	3354 <release_handler>
    if (!handler)
    34e0:	2e00      	cmp	r6, #0
    34e2:	d0ce      	beq.n	3482 <nrfx_gpiote_input_configure+0xa2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    34e4:	4d10      	ldr	r5, [pc, #64]	; (3528 <nrfx_gpiote_input_configure+0x148>)
    34e6:	e9d5 2300 	ldrd	r2, r3, [r5]
    34ea:	4296      	cmp	r6, r2
    34ec:	d101      	bne.n	34f2 <nrfx_gpiote_input_configure+0x112>
    34ee:	429f      	cmp	r7, r3
    34f0:	d018      	beq.n	3524 <nrfx_gpiote_input_configure+0x144>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    34f2:	4811      	ldr	r0, [pc, #68]	; (3538 <nrfx_gpiote_input_configure+0x158>)
    34f4:	f10d 010f 	add.w	r1, sp, #15
    34f8:	f7ff fe0e 	bl	3118 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    34fc:	4b0d      	ldr	r3, [pc, #52]	; (3534 <nrfx_gpiote_input_configure+0x154>)
    34fe:	4298      	cmp	r0, r3
    3500:	d1c0      	bne.n	3484 <nrfx_gpiote_input_configure+0xa4>
        handler_id = (int32_t)id;
    3502:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    3506:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    350a:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    350e:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    3510:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    3512:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    3516:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    351a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    351e:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    3522:	e7ae      	b.n	3482 <nrfx_gpiote_input_configure+0xa2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    3524:	2200      	movs	r2, #0
    3526:	e7ee      	b.n	3506 <nrfx_gpiote_input_configure+0x126>
    3528:	20000058 	.word	0x20000058
    352c:	0bad0004 	.word	0x0bad0004
    3530:	40006000 	.word	0x40006000
    3534:	0bad0000 	.word	0x0bad0000
    3538:	200000cc 	.word	0x200000cc

0000353c <nrfx_gpiote_output_configure>:
{
    353c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    3540:	4604      	mov	r4, r0
    3542:	4615      	mov	r5, r2
    if (p_config)
    3544:	b309      	cbz	r1, 358a <nrfx_gpiote_output_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3546:	4f32      	ldr	r7, [pc, #200]	; (3610 <nrfx_gpiote_output_configure+0xd4>)
    3548:	f100 0808 	add.w	r8, r0, #8
    354c:	f837 6018 	ldrh.w	r6, [r7, r8, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    3550:	07b2      	lsls	r2, r6, #30
    3552:	d403      	bmi.n	355c <nrfx_gpiote_output_configure+0x20>
    3554:	f7ff fed6 	bl	3304 <pin_in_use_by_te>
    3558:	2800      	cmp	r0, #0
    355a:	d157      	bne.n	360c <nrfx_gpiote_output_configure+0xd0>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    355c:	f016 0f1c 	tst.w	r6, #28
    3560:	d002      	beq.n	3568 <nrfx_gpiote_output_configure+0x2c>
    3562:	784b      	ldrb	r3, [r1, #1]
    3564:	2b01      	cmp	r3, #1
    3566:	d051      	beq.n	360c <nrfx_gpiote_output_configure+0xd0>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    3568:	2301      	movs	r3, #1
    356a:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    356e:	2300      	movs	r3, #0
    3570:	e9cd 1300 	strd	r1, r3, [sp]
    3574:	1c4a      	adds	r2, r1, #1
    3576:	1c8b      	adds	r3, r1, #2
    3578:	4620      	mov	r0, r4
    357a:	f10d 010f 	add.w	r1, sp, #15
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    357e:	f046 0603 	orr.w	r6, r6, #3
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    3582:	f001 fff5 	bl	5570 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    3586:	f827 6018 	strh.w	r6, [r7, r8, lsl #1]
    if (p_task_config)
    358a:	b91d      	cbnz	r5, 3594 <nrfx_gpiote_output_configure+0x58>
    return NRFX_SUCCESS;
    358c:	4821      	ldr	r0, [pc, #132]	; (3614 <nrfx_gpiote_output_configure+0xd8>)
}
    358e:	b004      	add	sp, #16
    3590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3594:	4e1e      	ldr	r6, [pc, #120]	; (3610 <nrfx_gpiote_output_configure+0xd4>)
    3596:	f104 0708 	add.w	r7, r4, #8
    359a:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    359e:	0783      	lsls	r3, r0, #30
    35a0:	d534      	bpl.n	360c <nrfx_gpiote_output_configure+0xd0>
        uint32_t ch = p_task_config->task_ch;
    35a2:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    35a6:	4661      	mov	r1, ip
    35a8:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    35aa:	f020 0020 	bic.w	r0, r0, #32
    35ae:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    35b2:	04c0      	lsls	r0, r0, #19
    35b4:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    35b8:	0cc0      	lsrs	r0, r0, #19
    35ba:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    35be:	2300      	movs	r3, #0
    35c0:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    35c4:	786a      	ldrb	r2, [r5, #1]
    35c6:	2a00      	cmp	r2, #0
    35c8:	d0e0      	beq.n	358c <nrfx_gpiote_output_configure+0x50>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    35ca:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    35ce:	78ad      	ldrb	r5, [r5, #2]
    35d0:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    35d4:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    35d8:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    35dc:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    35e0:	0223      	lsls	r3, r4, #8
    35e2:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    35e6:	0412      	lsls	r2, r2, #16
    35e8:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    35ec:	ea43 030e 	orr.w	r3, r3, lr
    35f0:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    35f2:	052a      	lsls	r2, r5, #20
    35f4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    35f8:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    35fc:	4313      	orrs	r3, r2
    35fe:	f040 0020 	orr.w	r0, r0, #32
    3602:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    3606:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    360a:	e7bf      	b.n	358c <nrfx_gpiote_output_configure+0x50>
{
    360c:	4802      	ldr	r0, [pc, #8]	; (3618 <nrfx_gpiote_output_configure+0xdc>)
    360e:	e7be      	b.n	358e <nrfx_gpiote_output_configure+0x52>
    3610:	20000058 	.word	0x20000058
    3614:	0bad0000 	.word	0x0bad0000
    3618:	0bad0004 	.word	0x0bad0004

0000361c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    361c:	4b01      	ldr	r3, [pc, #4]	; (3624 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    361e:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    3622:	4770      	bx	lr
    3624:	20000058 	.word	0x20000058

00003628 <nrfx_gpiote_channel_get>:
{
    3628:	b508      	push	{r3, lr}
    362a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    362c:	f7ff fe6a 	bl	3304 <pin_in_use_by_te>
    3630:	b138      	cbz	r0, 3642 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3632:	4b05      	ldr	r3, [pc, #20]	; (3648 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    3634:	4805      	ldr	r0, [pc, #20]	; (364c <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3636:	3208      	adds	r2, #8
    3638:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    363c:	0b5b      	lsrs	r3, r3, #13
    363e:	700b      	strb	r3, [r1, #0]
}
    3640:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    3642:	4803      	ldr	r0, [pc, #12]	; (3650 <nrfx_gpiote_channel_get+0x28>)
    3644:	e7fc      	b.n	3640 <nrfx_gpiote_channel_get+0x18>
    3646:	bf00      	nop
    3648:	20000058 	.word	0x20000058
    364c:	0bad0000 	.word	0x0bad0000
    3650:	0bad0004 	.word	0x0bad0004

00003654 <nrfx_gpiote_init>:
{
    3654:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    3656:	4c0f      	ldr	r4, [pc, #60]	; (3694 <nrfx_gpiote_init+0x40>)
    3658:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    365c:	b9bd      	cbnz	r5, 368e <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    365e:	2260      	movs	r2, #96	; 0x60
    3660:	4629      	mov	r1, r5
    3662:	f104 0010 	add.w	r0, r4, #16
    3666:	f001 fce0 	bl	502a <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    366a:	2006      	movs	r0, #6
    366c:	f7fe f99a 	bl	19a4 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3670:	4b09      	ldr	r3, [pc, #36]	; (3698 <nrfx_gpiote_init+0x44>)
    return err_code;
    3672:	480a      	ldr	r0, [pc, #40]	; (369c <nrfx_gpiote_init+0x48>)
    3674:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    3678:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    367c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    3680:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    3684:	2301      	movs	r3, #1
    3686:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    368a:	6763      	str	r3, [r4, #116]	; 0x74
}
    368c:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    368e:	4804      	ldr	r0, [pc, #16]	; (36a0 <nrfx_gpiote_init+0x4c>)
    3690:	e7fc      	b.n	368c <nrfx_gpiote_init+0x38>
    3692:	bf00      	nop
    3694:	20000058 	.word	0x20000058
    3698:	40006000 	.word	0x40006000
    369c:	0bad0000 	.word	0x0bad0000
    36a0:	0bad0005 	.word	0x0bad0005

000036a4 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    36a4:	4b03      	ldr	r3, [pc, #12]	; (36b4 <nrfx_gpiote_is_init+0x10>)
    36a6:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    36aa:	3800      	subs	r0, #0
    36ac:	bf18      	it	ne
    36ae:	2001      	movne	r0, #1
    36b0:	4770      	bx	lr
    36b2:	bf00      	nop
    36b4:	20000058 	.word	0x20000058

000036b8 <nrfx_gpiote_channel_free>:
{
    36b8:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    36ba:	4801      	ldr	r0, [pc, #4]	; (36c0 <nrfx_gpiote_channel_free+0x8>)
    36bc:	f7ff bd4c 	b.w	3158 <nrfx_flag32_free>
    36c0:	200000c8 	.word	0x200000c8

000036c4 <nrfx_gpiote_channel_alloc>:
{
    36c4:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    36c6:	4801      	ldr	r0, [pc, #4]	; (36cc <nrfx_gpiote_channel_alloc+0x8>)
    36c8:	f7ff bd26 	b.w	3118 <nrfx_flag32_alloc>
    36cc:	200000c8 	.word	0x200000c8

000036d0 <nrfx_gpiote_trigger_enable>:
{
    36d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    36d2:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    36d4:	f7ff fe16 	bl	3304 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    36d8:	f104 0208 	add.w	r2, r4, #8
    36dc:	4b1e      	ldr	r3, [pc, #120]	; (3758 <nrfx_gpiote_trigger_enable+0x88>)
    36de:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    36e2:	b1e8      	cbz	r0, 3720 <nrfx_gpiote_trigger_enable+0x50>
    36e4:	f013 0502 	ands.w	r5, r3, #2
    36e8:	d11a      	bne.n	3720 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    36ea:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    36ec:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    36ee:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    36f2:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    36f6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    36fa:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    36fe:	6005      	str	r5, [r0, #0]
    3700:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    3702:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    3706:	f040 0001 	orr.w	r0, r0, #1
    370a:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    370e:	b129      	cbz	r1, 371c <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    3710:	2201      	movs	r2, #1
    3712:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    3716:	4a11      	ldr	r2, [pc, #68]	; (375c <nrfx_gpiote_trigger_enable+0x8c>)
    3718:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    371c:	b003      	add	sp, #12
    371e:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3720:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    3724:	2b04      	cmp	r3, #4
    3726:	d012      	beq.n	374e <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    3728:	2b05      	cmp	r3, #5
    372a:	d012      	beq.n	3752 <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    372c:	a801      	add	r0, sp, #4
    372e:	9401      	str	r4, [sp, #4]
    3730:	f7ff fdda 	bl	32e8 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    3734:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    3736:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    373a:	40d9      	lsrs	r1, r3
    373c:	f001 0101 	and.w	r1, r1, #1
    3740:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    3742:	4620      	mov	r0, r4
}
    3744:	b003      	add	sp, #12
    3746:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    374a:	f001 bf5a 	b.w	5602 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    374e:	2103      	movs	r1, #3
    3750:	e7f7      	b.n	3742 <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    3752:	2102      	movs	r1, #2
    3754:	e7f5      	b.n	3742 <nrfx_gpiote_trigger_enable+0x72>
    3756:	bf00      	nop
    3758:	20000058 	.word	0x20000058
    375c:	40006000 	.word	0x40006000

00003760 <nrfx_gpiote_trigger_disable>:
{
    3760:	b508      	push	{r3, lr}
    3762:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3764:	f7ff fdce 	bl	3304 <pin_in_use_by_te>
    3768:	b1c0      	cbz	r0, 379c <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    376a:	f102 0108 	add.w	r1, r2, #8
    376e:	4b0e      	ldr	r3, [pc, #56]	; (37a8 <nrfx_gpiote_trigger_disable+0x48>)
    3770:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3774:	0799      	lsls	r1, r3, #30
    3776:	d411      	bmi.n	379c <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3778:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    377a:	2201      	movs	r2, #1
    377c:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    377e:	009b      	lsls	r3, r3, #2
    3780:	490a      	ldr	r1, [pc, #40]	; (37ac <nrfx_gpiote_trigger_disable+0x4c>)
    3782:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3786:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    378a:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    378e:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    3792:	f022 0203 	bic.w	r2, r2, #3
    3796:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    379a:	bd08      	pop	{r3, pc}
    379c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    37a0:	2100      	movs	r1, #0
    37a2:	4610      	mov	r0, r2
    37a4:	f001 bf2d 	b.w	5602 <nrf_gpio_cfg_sense_set>
    37a8:	20000058 	.word	0x20000058
    37ac:	40006000 	.word	0x40006000

000037b0 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    37b0:	4b0e      	ldr	r3, [pc, #56]	; (37ec <nrfx_gpiote_pin_uninit+0x3c>)
    37b2:	f100 0208 	add.w	r2, r0, #8
{
    37b6:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    37b8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    37bc:	07db      	lsls	r3, r3, #31
{
    37be:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    37c0:	d511      	bpl.n	37e6 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    37c2:	f7ff ffcd 	bl	3760 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    37c6:	4620      	mov	r0, r4
    37c8:	f7ff fdee 	bl	33a8 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    37cc:	a801      	add	r0, sp, #4
    37ce:	9401      	str	r4, [sp, #4]
    37d0:	f7ff fd8a 	bl	32e8 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    37d4:	9b01      	ldr	r3, [sp, #4]
    37d6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    37da:	2202      	movs	r2, #2
    37dc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    37e0:	4803      	ldr	r0, [pc, #12]	; (37f0 <nrfx_gpiote_pin_uninit+0x40>)
}
    37e2:	b002      	add	sp, #8
    37e4:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    37e6:	4803      	ldr	r0, [pc, #12]	; (37f4 <nrfx_gpiote_pin_uninit+0x44>)
    37e8:	e7fb      	b.n	37e2 <nrfx_gpiote_pin_uninit+0x32>
    37ea:	bf00      	nop
    37ec:	20000058 	.word	0x20000058
    37f0:	0bad0000 	.word	0x0bad0000
    37f4:	0bad0004 	.word	0x0bad0004

000037f8 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    37f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    37fc:	4b68      	ldr	r3, [pc, #416]	; (39a0 <nrfx_gpiote_irq_handler+0x1a8>)
    return p_reg->INTENSET & mask;
    37fe:	4869      	ldr	r0, [pc, #420]	; (39a4 <nrfx_gpiote_irq_handler+0x1ac>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3800:	4969      	ldr	r1, [pc, #420]	; (39a8 <nrfx_gpiote_irq_handler+0x1b0>)
    uint32_t status = 0;
    3802:	2600      	movs	r6, #0
{
    3804:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    3806:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3808:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    380a:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    380c:	b135      	cbz	r5, 381c <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    380e:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    3812:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3814:	bf1e      	ittt	ne
    3816:	601c      	strne	r4, [r3, #0]
    3818:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    381a:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    381c:	3304      	adds	r3, #4
    381e:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    3820:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3824:	d1f1      	bne.n	380a <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3826:	f8df 917c 	ldr.w	r9, [pc, #380]	; 39a4 <nrfx_gpiote_irq_handler+0x1ac>
    382a:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    382e:	2b00      	cmp	r3, #0
    3830:	f000 8099 	beq.w	3966 <nrfx_gpiote_irq_handler+0x16e>
        *p_masks = gpio_regs[i]->LATCH;
    3834:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    3838:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    383c:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    383e:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    3842:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
    3846:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    3848:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    384c:	f04f 0800 	mov.w	r8, #0
            while (latch[i])
    3850:	f10d 0a10 	add.w	sl, sp, #16
    3854:	ea4f 1348 	mov.w	r3, r8, lsl #5
    3858:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    385a:	f04f 0b01 	mov.w	fp, #1
    385e:	e049      	b.n	38f4 <nrfx_gpiote_irq_handler+0xfc>
                pin += 32 * i;
    3860:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3862:	4a52      	ldr	r2, [pc, #328]	; (39ac <nrfx_gpiote_irq_handler+0x1b4>)
                uint32_t pin = NRF_CTZ(latch[i]);
    3864:	fa94 f4a4 	rbit	r4, r4
    3868:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    386c:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    386e:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3870:	f104 0308 	add.w	r3, r4, #8
    3874:	9403      	str	r4, [sp, #12]
    3876:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
    387a:	f81a 3000 	ldrb.w	r3, [sl, r0]
    bit = BITMASK_RELBIT_GET(bit);
    387e:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    3882:	fa0b f202 	lsl.w	r2, fp, r2
    3886:	ea23 0302 	bic.w	r3, r3, r2
    388a:	f80a 3000 	strb.w	r3, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    388e:	a803      	add	r0, sp, #12
    3890:	f7ff fd2a 	bl	32e8 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    3894:	9b03      	ldr	r3, [sp, #12]
    3896:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    389a:	08b9      	lsrs	r1, r7, #2
    389c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    38a0:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
    38a4:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    38a6:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    38a8:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
    38ac:	d52c      	bpl.n	3908 <nrfx_gpiote_irq_handler+0x110>
        call_handler(pin, trigger);
    38ae:	4620      	mov	r0, r4
    38b0:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    38b2:	b2dd      	uxtb	r5, r3
    38b4:	f7ff fd30 	bl	3318 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    38b8:	a803      	add	r0, sp, #12
    38ba:	9403      	str	r4, [sp, #12]
    38bc:	f7ff fd14 	bl	32e8 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    38c0:	9b03      	ldr	r3, [sp, #12]
    38c2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    38c6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    38ca:	f3c3 4301 	ubfx	r3, r3, #16, #2
    38ce:	429d      	cmp	r5, r3
    38d0:	d107      	bne.n	38e2 <nrfx_gpiote_irq_handler+0xea>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    38d2:	2100      	movs	r1, #0
    38d4:	4620      	mov	r0, r4
    38d6:	f001 fe94 	bl	5602 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    38da:	4629      	mov	r1, r5
    38dc:	4620      	mov	r0, r4
    38de:	f001 fe90 	bl	5602 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    38e2:	a803      	add	r0, sp, #12
    38e4:	9403      	str	r4, [sp, #12]
    38e6:	f7ff fcff 	bl	32e8 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    38ea:	9b03      	ldr	r3, [sp, #12]
    38ec:	fa0b f303 	lsl.w	r3, fp, r3
    38f0:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
    38f4:	f85a 4028 	ldr.w	r4, [sl, r8, lsl #2]
    38f8:	2c00      	cmp	r4, #0
    38fa:	d1b1      	bne.n	3860 <nrfx_gpiote_irq_handler+0x68>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    38fc:	f1b8 0f00 	cmp.w	r8, #0
    3900:	d11d      	bne.n	393e <nrfx_gpiote_irq_handler+0x146>
    3902:	f04f 0801 	mov.w	r8, #1
    3906:	e7a5      	b.n	3854 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    3908:	2b02      	cmp	r3, #2
    390a:	d10c      	bne.n	3926 <nrfx_gpiote_irq_handler+0x12e>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    390c:	2103      	movs	r1, #3
    390e:	4620      	mov	r0, r4
    3910:	f001 fe77 	bl	5602 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    3914:	f005 0305 	and.w	r3, r5, #5
    3918:	2b01      	cmp	r3, #1
    391a:	d1e2      	bne.n	38e2 <nrfx_gpiote_irq_handler+0xea>
            call_handler(pin, trigger);
    391c:	4639      	mov	r1, r7
    391e:	4620      	mov	r0, r4
    3920:	f7ff fcfa 	bl	3318 <call_handler>
    3924:	e7dd      	b.n	38e2 <nrfx_gpiote_irq_handler+0xea>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    3926:	2102      	movs	r1, #2
    3928:	4620      	mov	r0, r4
    392a:	9301      	str	r3, [sp, #4]
    392c:	f001 fe69 	bl	5602 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    3930:	2d03      	cmp	r5, #3
    3932:	d0f3      	beq.n	391c <nrfx_gpiote_irq_handler+0x124>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    3934:	9b01      	ldr	r3, [sp, #4]
    3936:	2b03      	cmp	r3, #3
    3938:	d1d3      	bne.n	38e2 <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    393a:	2d02      	cmp	r5, #2
    393c:	e7ed      	b.n	391a <nrfx_gpiote_irq_handler+0x122>
        *p_masks = gpio_regs[i]->LATCH;
    393e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3942:	f8c9 417c 	str.w	r4, [r9, #380]	; 0x17c
    3946:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
    394a:	4919      	ldr	r1, [pc, #100]	; (39b0 <nrfx_gpiote_irq_handler+0x1b8>)
    394c:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
    3950:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    3952:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    3956:	f8d1 2520 	ldr.w	r2, [r1, #1312]	; 0x520
    395a:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
    395c:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
    395e:	f8c1 2520 	str.w	r2, [r1, #1312]	; 0x520
    3962:	f47f af73 	bne.w	384c <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
    3966:	2401      	movs	r4, #1
    while (mask)
    3968:	b916      	cbnz	r6, 3970 <nrfx_gpiote_irq_handler+0x178>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    396a:	b007      	add	sp, #28
    396c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    3970:	fa96 f3a6 	rbit	r3, r6
    3974:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    3978:	fa04 f203 	lsl.w	r2, r4, r3
    397c:	009b      	lsls	r3, r3, #2
    397e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3982:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    3986:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    398a:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    398e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    3992:	f3c0 2005 	ubfx	r0, r0, #8, #6
    3996:	f3c1 4101 	ubfx	r1, r1, #16, #2
    399a:	f7ff fcbd 	bl	3318 <call_handler>
    399e:	e7e3      	b.n	3968 <nrfx_gpiote_irq_handler+0x170>
    39a0:	40006100 	.word	0x40006100
    39a4:	40006000 	.word	0x40006000
    39a8:	40006120 	.word	0x40006120
    39ac:	20000058 	.word	0x20000058
    39b0:	50000300 	.word	0x50000300

000039b4 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    39b4:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    39b6:	4801      	ldr	r0, [pc, #4]	; (39bc <nrfx_ppi_channel_alloc+0x8>)
    39b8:	f7ff bbae 	b.w	3118 <nrfx_flag32_alloc>
    39bc:	200000d4 	.word	0x200000d4

000039c0 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    39c0:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    39c2:	4c14      	ldr	r4, [pc, #80]	; (3a14 <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    39c4:	4a14      	ldr	r2, [pc, #80]	; (3a18 <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    39c6:	4915      	ldr	r1, [pc, #84]	; (3a1c <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    39c8:	2303      	movs	r3, #3
    39ca:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    39cc:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    39ce:	4b14      	ldr	r3, [pc, #80]	; (3a20 <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
    39d0:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    39d2:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    39d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    39d8:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    39da:	2300      	movs	r3, #0
    39dc:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    39de:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    39e0:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    39e2:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    39e4:	4a0f      	ldr	r2, [pc, #60]	; (3a24 <_DoInit+0x64>)
    39e6:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    39e8:	2210      	movs	r2, #16
    39ea:	66a2      	str	r2, [r4, #104]	; 0x68
  STRCPY((char*)&p->acID[7], "RTT");
    39ec:	1de0      	adds	r0, r4, #7
  p->aDown[0].RdOff         = 0u;
    39ee:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    39f0:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    39f2:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    39f4:	f001 faf4 	bl	4fe0 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    39f8:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    39fc:	490a      	ldr	r1, [pc, #40]	; (3a28 <_DoInit+0x68>)
    39fe:	4620      	mov	r0, r4
    3a00:	f001 faee 	bl	4fe0 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    3a04:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    3a08:	2320      	movs	r3, #32
    3a0a:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    3a0c:	f3bf 8f5f 	dmb	sy
}
    3a10:	bd10      	pop	{r4, pc}
    3a12:	bf00      	nop
    3a14:	200008f4 	.word	0x200008f4
    3a18:	00006810 	.word	0x00006810
    3a1c:	00006819 	.word	0x00006819
    3a20:	20000bbd 	.word	0x20000bbd
    3a24:	20000bad 	.word	0x20000bad
    3a28:	0000681d 	.word	0x0000681d

00003a2c <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3a2c:	4b0e      	ldr	r3, [pc, #56]	; (3a68 <z_sys_init_run_level+0x3c>)
{
    3a2e:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3a30:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    3a34:	3001      	adds	r0, #1
    3a36:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    3a3a:	42a6      	cmp	r6, r4
    3a3c:	d800      	bhi.n	3a40 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    3a3e:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    3a40:	e9d4 3500 	ldrd	r3, r5, [r4]
    3a44:	4628      	mov	r0, r5
    3a46:	4798      	blx	r3
		if (dev != NULL) {
    3a48:	b165      	cbz	r5, 3a64 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    3a4a:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    3a4c:	b130      	cbz	r0, 3a5c <z_sys_init_run_level+0x30>
				if (rc < 0) {
    3a4e:	2800      	cmp	r0, #0
    3a50:	bfb8      	it	lt
    3a52:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
    3a54:	28ff      	cmp	r0, #255	; 0xff
    3a56:	bfa8      	it	ge
    3a58:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    3a5a:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    3a5c:	785a      	ldrb	r2, [r3, #1]
    3a5e:	f042 0201 	orr.w	r2, r2, #1
    3a62:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3a64:	3408      	adds	r4, #8
    3a66:	e7e8      	b.n	3a3a <z_sys_init_run_level+0xe>
    3a68:	00005cec 	.word	0x00005cec

00003a6c <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    3a6c:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    3a6e:	4b0a      	ldr	r3, [pc, #40]	; (3a98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT>)
    3a70:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    3a72:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    3a74:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    3a76:	f7ff ffd9 	bl	3a2c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    3a7a:	f000 ff51 	bl	4920 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    3a7e:	2003      	movs	r0, #3
    3a80:	f7ff ffd4 	bl	3a2c <z_sys_init_run_level>

	z_init_static_threads();
    3a84:	f000 f93c 	bl	3d00 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    3a88:	f001 f93c 	bl	4d04 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    3a8c:	4a03      	ldr	r2, [pc, #12]	; (3a9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4>)
    3a8e:	7b13      	ldrb	r3, [r2, #12]
    3a90:	f023 0301 	bic.w	r3, r3, #1
    3a94:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    3a96:	bd08      	pop	{r3, pc}
    3a98:	20000fbd 	.word	0x20000fbd
    3a9c:	20000248 	.word	0x20000248

00003aa0 <z_bss_zero>:
{
    3aa0:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    3aa2:	4803      	ldr	r0, [pc, #12]	; (3ab0 <z_bss_zero+0x10>)
    3aa4:	4a03      	ldr	r2, [pc, #12]	; (3ab4 <z_bss_zero+0x14>)
    3aa6:	2100      	movs	r1, #0
    3aa8:	1a12      	subs	r2, r2, r0
    3aaa:	f001 fde6 	bl	567a <z_early_memset>
}
    3aae:	bd08      	pop	{r3, pc}
    3ab0:	200001a8 	.word	0x200001a8
    3ab4:	20000fc0 	.word	0x20000fc0

00003ab8 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    3ab8:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    3aba:	2300      	movs	r3, #0
{
    3abc:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    3abe:	2201      	movs	r2, #1
    3ac0:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    3ac4:	4e13      	ldr	r6, [pc, #76]	; (3b14 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    3ac6:	4d14      	ldr	r5, [pc, #80]	; (3b18 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    3ac8:	9301      	str	r3, [sp, #4]
    3aca:	220f      	movs	r2, #15
    3acc:	e9cd 3202 	strd	r3, r2, [sp, #8]
    3ad0:	4912      	ldr	r1, [pc, #72]	; (3b1c <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    3ad2:	2318      	movs	r3, #24
    3ad4:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    3ad8:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    3adc:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    3ade:	f44f 70b0 	mov.w	r0, #352	; 0x160
    3ae2:	fb00 1104 	mla	r1, r0, r4, r1
    3ae6:	4b0e      	ldr	r3, [pc, #56]	; (3b20 <z_init_cpu+0x68>)
    3ae8:	9500      	str	r5, [sp, #0]
    3aea:	f44f 72a0 	mov.w	r2, #320	; 0x140
    3aee:	4630      	mov	r0, r6
    3af0:	f000 f8d4 	bl	3c9c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3af4:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    3af6:	4a0b      	ldr	r2, [pc, #44]	; (3b24 <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    3af8:	60ee      	str	r6, [r5, #12]
    3afa:	f023 0304 	bic.w	r3, r3, #4
    3afe:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    3b00:	f44f 6302 	mov.w	r3, #2080	; 0x820
    3b04:	fb04 3303 	mla	r3, r4, r3, r3
    3b08:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
    3b0a:	752c      	strb	r4, [r5, #20]
	_kernel.cpus[id].irq_stack =
    3b0c:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    3b0e:	b006      	add	sp, #24
    3b10:	bd70      	pop	{r4, r5, r6, pc}
    3b12:	bf00      	nop
    3b14:	200001c8 	.word	0x200001c8
    3b18:	2000099c 	.word	0x2000099c
    3b1c:	200017e0 	.word	0x200017e0
    3b20:	00003db9 	.word	0x00003db9
    3b24:	20000fc0 	.word	0x20000fc0

00003b28 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    3b28:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    3b2a:	4b2d      	ldr	r3, [pc, #180]	; (3be0 <z_cstart+0xb8>)
    3b2c:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    3b2e:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    3b32:	4d2c      	ldr	r5, [pc, #176]	; (3be4 <z_cstart+0xbc>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    3b34:	4e2c      	ldr	r6, [pc, #176]	; (3be8 <z_cstart+0xc0>)
    3b36:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3b38:	4f2c      	ldr	r7, [pc, #176]	; (3bec <z_cstart+0xc4>)
    3b3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3b3e:	2400      	movs	r4, #0
    3b40:	616b      	str	r3, [r5, #20]
    3b42:	23e0      	movs	r3, #224	; 0xe0
    3b44:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    3b48:	77ec      	strb	r4, [r5, #31]
    3b4a:	762c      	strb	r4, [r5, #24]
    3b4c:	766c      	strb	r4, [r5, #25]
    3b4e:	76ac      	strb	r4, [r5, #26]
    3b50:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    3b54:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3b56:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    3b5a:	626b      	str	r3, [r5, #36]	; 0x24
    3b5c:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    3b60:	f7fe f920 	bl	1da4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    3b64:	f7fd ff00 	bl	1968 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    3b68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3b6c:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    3b6e:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    3b70:	f7fe fa52 	bl	2018 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    3b74:	f7fe f9b8 	bl	1ee8 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    3b78:	f240 1301 	movw	r3, #257	; 0x101
    3b7c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    3b80:	ab06      	add	r3, sp, #24
    3b82:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    3b84:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
    3b88:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    3b8a:	f001 fd50 	bl	562e <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    3b8e:	4620      	mov	r0, r4
    3b90:	f7ff ff4c 	bl	3a2c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    3b94:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    3b96:	4d16      	ldr	r5, [pc, #88]	; (3bf0 <z_cstart+0xc8>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    3b98:	f7ff ff48 	bl	3a2c <z_sys_init_run_level>
	z_sched_init();
    3b9c:	f000 fc68 	bl	4470 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3ba0:	4b14      	ldr	r3, [pc, #80]	; (3bf4 <z_cstart+0xcc>)
	_kernel.ready_q.cache = &z_main_thread;
    3ba2:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3ba4:	9305      	str	r3, [sp, #20]
    3ba6:	2301      	movs	r3, #1
    3ba8:	4913      	ldr	r1, [pc, #76]	; (3bf8 <z_cstart+0xd0>)
    3baa:	9400      	str	r4, [sp, #0]
    3bac:	e9cd 4303 	strd	r4, r3, [sp, #12]
    3bb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3bb4:	463b      	mov	r3, r7
    3bb6:	e9cd 4401 	strd	r4, r4, [sp, #4]
    3bba:	4628      	mov	r0, r5
    3bbc:	f000 f86e 	bl	3c9c <z_setup_new_thread>
    3bc0:	7b6a      	ldrb	r2, [r5, #13]
    3bc2:	4606      	mov	r6, r0
    3bc4:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    3bc8:	4628      	mov	r0, r5
    3bca:	736a      	strb	r2, [r5, #13]
    3bcc:	f001 fe15 	bl	57fa <z_ready_thread>
	z_init_cpu(0);
    3bd0:	4620      	mov	r0, r4
    3bd2:	f7ff ff71 	bl	3ab8 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    3bd6:	463a      	mov	r2, r7
    3bd8:	4631      	mov	r1, r6
    3bda:	4628      	mov	r0, r5
    3bdc:	f7fd ffbc 	bl	1b58 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    3be0:	200017e0 	.word	0x200017e0
    3be4:	e000ed00 	.word	0xe000ed00
    3be8:	2000099c 	.word	0x2000099c
    3bec:	00003a6d 	.word	0x00003a6d
    3bf0:	20000248 	.word	0x20000248
    3bf4:	00006824 	.word	0x00006824
    3bf8:	20001940 	.word	0x20001940

00003bfc <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    3bfc:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    3bfe:	4b0e      	ldr	r3, [pc, #56]	; (3c38 <init_mem_slab_module+0x3c>)
    3c00:	4c0e      	ldr	r4, [pc, #56]	; (3c3c <init_mem_slab_module+0x40>)
    3c02:	42a3      	cmp	r3, r4
    3c04:	d301      	bcc.n	3c0a <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
    3c06:	2000      	movs	r0, #0
	return rc;
}
    3c08:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    3c0a:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
    3c0e:	ea41 0200 	orr.w	r2, r1, r0
    3c12:	f012 0203 	ands.w	r2, r2, #3
    3c16:	d10b      	bne.n	3c30 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    3c18:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    3c1a:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    3c1c:	42aa      	cmp	r2, r5
    3c1e:	d101      	bne.n	3c24 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    3c20:	331c      	adds	r3, #28
    3c22:	e7ee      	b.n	3c02 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    3c24:	695e      	ldr	r6, [r3, #20]
    3c26:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    3c28:	3201      	adds	r2, #1
		slab->free_list = p;
    3c2a:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
    3c2c:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
    3c2e:	e7f5      	b.n	3c1c <init_mem_slab_module+0x20>
	return rc;
    3c30:	f06f 0015 	mvn.w	r0, #21
    3c34:	e7e8      	b.n	3c08 <init_mem_slab_module+0xc>
    3c36:	bf00      	nop
    3c38:	20000154 	.word	0x20000154
    3c3c:	20000154 	.word	0x20000154

00003c40 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    3c40:	b573      	push	{r0, r1, r4, r5, r6, lr}
    3c42:	460c      	mov	r4, r1
	__asm__ volatile(
    3c44:	f04f 0520 	mov.w	r5, #32
    3c48:	f3ef 8111 	mrs	r1, BASEPRI
    3c4c:	f385 8812 	msr	BASEPRI_MAX, r5
    3c50:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    3c54:	6945      	ldr	r5, [r0, #20]
    3c56:	b15d      	cbz	r5, 3c70 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
    3c58:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    3c5a:	682b      	ldr	r3, [r5, #0]
    3c5c:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    3c5e:	6983      	ldr	r3, [r0, #24]
    3c60:	3301      	adds	r3, #1
    3c62:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    3c64:	2000      	movs	r0, #0
	__asm__ volatile(
    3c66:	f381 8811 	msr	BASEPRI, r1
    3c6a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    3c6e:	e011      	b.n	3c94 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    3c70:	ea52 0603 	orrs.w	r6, r2, r3
    3c74:	d103      	bne.n	3c7e <k_mem_slab_alloc+0x3e>
		*mem = NULL;
    3c76:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
    3c78:	f06f 000b 	mvn.w	r0, #11
    3c7c:	e7f3      	b.n	3c66 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    3c7e:	e9cd 2300 	strd	r2, r3, [sp]
    3c82:	4602      	mov	r2, r0
    3c84:	3008      	adds	r0, #8
    3c86:	f000 fb07 	bl	4298 <z_pend_curr>
		if (result == 0) {
    3c8a:	b918      	cbnz	r0, 3c94 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    3c8c:	4b02      	ldr	r3, [pc, #8]	; (3c98 <k_mem_slab_alloc+0x58>)
    3c8e:	689b      	ldr	r3, [r3, #8]
    3c90:	695b      	ldr	r3, [r3, #20]
    3c92:	6023      	str	r3, [r4, #0]
}
    3c94:	b002      	add	sp, #8
    3c96:	bd70      	pop	{r4, r5, r6, pc}
    3c98:	2000099c 	.word	0x2000099c

00003c9c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    3c9c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    3ca0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    3ca2:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    3ca4:	2604      	movs	r6, #4
    3ca6:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    3ca8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    3caa:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    3cac:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
    3cb0:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    3cb2:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    3cb4:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3cb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    3cba:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    3cbc:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    3cc0:	3720      	adds	r7, #32
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    3cc2:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    3cc6:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    3cca:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    3ccc:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    3cce:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    3cd0:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3cd4:	9202      	str	r2, [sp, #8]
    3cd6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    3cd8:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    3cda:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3cdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3cde:	9200      	str	r2, [sp, #0]
    3ce0:	4642      	mov	r2, r8
{
    3ce2:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3ce4:	f7fd ff06 	bl	1af4 <arch_new_thread>
	if (!_current) {
    3ce8:	4b04      	ldr	r3, [pc, #16]	; (3cfc <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    3cea:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    3cec:	689b      	ldr	r3, [r3, #8]
    3cee:	b103      	cbz	r3, 3cf2 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    3cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    3cf2:	6723      	str	r3, [r4, #112]	; 0x70
}
    3cf4:	4640      	mov	r0, r8
    3cf6:	b004      	add	sp, #16
    3cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3cfc:	2000099c 	.word	0x2000099c

00003d00 <z_init_static_threads>:
{
    3d00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3d04:	4c29      	ldr	r4, [pc, #164]	; (3dac <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    3d06:	4d2a      	ldr	r5, [pc, #168]	; (3db0 <z_init_static_threads+0xb0>)
{
    3d08:	b087      	sub	sp, #28
    3d0a:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    3d0c:	42ae      	cmp	r6, r5
    3d0e:	f104 0430 	add.w	r4, r4, #48	; 0x30
    3d12:	d30f      	bcc.n	3d34 <z_init_static_threads+0x34>
	k_sched_lock();
    3d14:	f000 fb7c 	bl	4410 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    3d18:	4c24      	ldr	r4, [pc, #144]	; (3dac <z_init_static_threads+0xac>)

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    3d1a:	f8df 9098 	ldr.w	r9, [pc, #152]	; 3db4 <z_init_static_threads+0xb4>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    3d1e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    3d22:	f240 37e7 	movw	r7, #999	; 0x3e7
    3d26:	42ac      	cmp	r4, r5
    3d28:	d320      	bcc.n	3d6c <z_init_static_threads+0x6c>
}
    3d2a:	b007      	add	sp, #28
    3d2c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    3d30:	f000 bb82 	b.w	4438 <k_sched_unlock>
		z_setup_new_thread(
    3d34:	f854 3c04 	ldr.w	r3, [r4, #-4]
    3d38:	9305      	str	r3, [sp, #20]
    3d3a:	f854 3c10 	ldr.w	r3, [r4, #-16]
    3d3e:	9304      	str	r3, [sp, #16]
    3d40:	f854 3c14 	ldr.w	r3, [r4, #-20]
    3d44:	9303      	str	r3, [sp, #12]
    3d46:	f854 3c18 	ldr.w	r3, [r4, #-24]
    3d4a:	9302      	str	r3, [sp, #8]
    3d4c:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    3d50:	9301      	str	r3, [sp, #4]
    3d52:	f854 3c20 	ldr.w	r3, [r4, #-32]
    3d56:	9300      	str	r3, [sp, #0]
    3d58:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    3d5c:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    3d60:	f7ff ff9c 	bl	3c9c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    3d64:	f854 3c30 	ldr.w	r3, [r4, #-48]
    3d68:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    3d6a:	e7ce      	b.n	3d0a <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    3d6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3d6e:	1c5a      	adds	r2, r3, #1
    3d70:	d00d      	beq.n	3d8e <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    3d72:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    3d76:	2100      	movs	r1, #0
    3d78:	4638      	mov	r0, r7
    3d7a:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    3d7e:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    3d82:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    3d86:	d104      	bne.n	3d92 <z_init_static_threads+0x92>
	z_sched_start(thread);
    3d88:	4640      	mov	r0, r8
    3d8a:	f000 faf1 	bl	4370 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    3d8e:	3430      	adds	r4, #48	; 0x30
    3d90:	e7c9      	b.n	3d26 <z_init_static_threads+0x26>
    3d92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3d96:	2300      	movs	r3, #0
    3d98:	f7fc f9b2 	bl	100 <__aeabi_uldivmod>
    3d9c:	4602      	mov	r2, r0
    3d9e:	460b      	mov	r3, r1
    3da0:	f108 0018 	add.w	r0, r8, #24
    3da4:	4649      	mov	r1, r9
    3da6:	f000 fcc9 	bl	473c <z_add_timeout>
    3daa:	e7f0      	b.n	3d8e <z_init_static_threads+0x8e>
    3dac:	20000154 	.word	0x20000154
    3db0:	20000154 	.word	0x20000154
    3db4:	00005767 	.word	0x00005767

00003db8 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    3db8:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    3dba:	4c0b      	ldr	r4, [pc, #44]	; (3de8 <idle+0x30>)
	return !z_sys_post_kernel;
    3dbc:	4d0b      	ldr	r5, [pc, #44]	; (3dec <idle+0x34>)
	__asm__ volatile(
    3dbe:	f04f 0220 	mov.w	r2, #32
    3dc2:	f3ef 8311 	mrs	r3, BASEPRI
    3dc6:	f382 8812 	msr	BASEPRI_MAX, r2
    3dca:	f3bf 8f6f 	isb	sy
    3dce:	f001 fd6c 	bl	58aa <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    3dd2:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    3dd4:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    3dd6:	b913      	cbnz	r3, 3dde <idle+0x26>
	arch_cpu_idle();
    3dd8:	f7fd fdcc 	bl	1974 <arch_cpu_idle>
}
    3ddc:	e7ef      	b.n	3dbe <idle+0x6>
    3dde:	f7fd fc25 	bl	162c <pm_system_suspend>
    3de2:	2800      	cmp	r0, #0
    3de4:	d1eb      	bne.n	3dbe <idle+0x6>
    3de6:	e7f7      	b.n	3dd8 <idle+0x20>
    3de8:	2000099c 	.word	0x2000099c
    3dec:	20000fbd 	.word	0x20000fbd

00003df0 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    3df0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    3df4:	4604      	mov	r4, r0
    3df6:	4617      	mov	r7, r2
    3df8:	461e      	mov	r6, r3
    3dfa:	f04f 0320 	mov.w	r3, #32
    3dfe:	f3ef 8811 	mrs	r8, BASEPRI
    3e02:	f383 8812 	msr	BASEPRI_MAX, r3
    3e06:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    3e0a:	68c3      	ldr	r3, [r0, #12]
    3e0c:	4a32      	ldr	r2, [pc, #200]	; (3ed8 <z_impl_k_mutex_lock+0xe8>)
    3e0e:	b17b      	cbz	r3, 3e30 <z_impl_k_mutex_lock+0x40>
    3e10:	6880      	ldr	r0, [r0, #8]
    3e12:	6891      	ldr	r1, [r2, #8]
    3e14:	4288      	cmp	r0, r1
    3e16:	d019      	beq.n	3e4c <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    3e18:	ea57 0306 	orrs.w	r3, r7, r6
    3e1c:	d118      	bne.n	3e50 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    3e1e:	f388 8811 	msr	BASEPRI, r8
    3e22:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    3e26:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    3e2a:	b002      	add	sp, #8
    3e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    3e30:	6891      	ldr	r1, [r2, #8]
    3e32:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    3e36:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    3e38:	3301      	adds	r3, #1
    3e3a:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    3e3c:	6893      	ldr	r3, [r2, #8]
    3e3e:	60a3      	str	r3, [r4, #8]
    3e40:	f388 8811 	msr	BASEPRI, r8
    3e44:	f3bf 8f6f 	isb	sy
		return 0;
    3e48:	2000      	movs	r0, #0
    3e4a:	e7ee      	b.n	3e2a <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
    3e4c:	6921      	ldr	r1, [r4, #16]
    3e4e:	e7f2      	b.n	3e36 <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    3e50:	f991 100e 	ldrsb.w	r1, [r1, #14]
    3e54:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    3e58:	4299      	cmp	r1, r3
    3e5a:	bfa8      	it	ge
    3e5c:	4619      	movge	r1, r3
    3e5e:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    3e62:	4291      	cmp	r1, r2
    3e64:	bfb8      	it	lt
    3e66:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    3e68:	428b      	cmp	r3, r1
    3e6a:	dd2e      	ble.n	3eca <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    3e6c:	f001 fc5a 	bl	5724 <adjust_owner_prio.isra.0>
    3e70:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    3e72:	e9cd 7600 	strd	r7, r6, [sp]
    3e76:	4819      	ldr	r0, [pc, #100]	; (3edc <z_impl_k_mutex_lock+0xec>)
    3e78:	4622      	mov	r2, r4
    3e7a:	4641      	mov	r1, r8
    3e7c:	f000 fa0c 	bl	4298 <z_pend_curr>
	if (got_mutex == 0) {
    3e80:	2800      	cmp	r0, #0
    3e82:	d0e1      	beq.n	3e48 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
    3e84:	f04f 0320 	mov.w	r3, #32
    3e88:	f3ef 8611 	mrs	r6, BASEPRI
    3e8c:	f383 8812 	msr	BASEPRI_MAX, r3
    3e90:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    3e94:	6823      	ldr	r3, [r4, #0]
    3e96:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3e98:	429c      	cmp	r4, r3
    3e9a:	d00a      	beq.n	3eb2 <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    3e9c:	b14b      	cbz	r3, 3eb2 <z_impl_k_mutex_lock+0xc2>
    3e9e:	f993 300e 	ldrsb.w	r3, [r3, #14]
    3ea2:	4299      	cmp	r1, r3
    3ea4:	bfa8      	it	ge
    3ea6:	4619      	movge	r1, r3
    3ea8:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    3eac:	4299      	cmp	r1, r3
    3eae:	bfb8      	it	lt
    3eb0:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    3eb2:	68a0      	ldr	r0, [r4, #8]
    3eb4:	f001 fc36 	bl	5724 <adjust_owner_prio.isra.0>
    3eb8:	b948      	cbnz	r0, 3ece <z_impl_k_mutex_lock+0xde>
    3eba:	b945      	cbnz	r5, 3ece <z_impl_k_mutex_lock+0xde>
	__asm__ volatile(
    3ebc:	f386 8811 	msr	BASEPRI, r6
    3ec0:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
    3ec4:	f06f 000a 	mvn.w	r0, #10
    3ec8:	e7af      	b.n	3e2a <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
    3eca:	2500      	movs	r5, #0
    3ecc:	e7d1      	b.n	3e72 <z_impl_k_mutex_lock+0x82>
		z_reschedule(&lock, key);
    3ece:	4803      	ldr	r0, [pc, #12]	; (3edc <z_impl_k_mutex_lock+0xec>)
    3ed0:	4631      	mov	r1, r6
    3ed2:	f000 fa3b 	bl	434c <z_reschedule>
    3ed6:	e7f5      	b.n	3ec4 <z_impl_k_mutex_lock+0xd4>
    3ed8:	2000099c 	.word	0x2000099c
    3edc:	20000fbe 	.word	0x20000fbe

00003ee0 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    3ee0:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    3ee2:	6883      	ldr	r3, [r0, #8]
{
    3ee4:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    3ee6:	2b00      	cmp	r3, #0
    3ee8:	d032      	beq.n	3f50 <z_impl_k_mutex_unlock+0x70>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    3eea:	4a1c      	ldr	r2, [pc, #112]	; (3f5c <z_impl_k_mutex_unlock+0x7c>)
    3eec:	6892      	ldr	r2, [r2, #8]
    3eee:	4293      	cmp	r3, r2
    3ef0:	d131      	bne.n	3f56 <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    3ef2:	7bda      	ldrb	r2, [r3, #15]
    3ef4:	3a01      	subs	r2, #1
    3ef6:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    3ef8:	68c3      	ldr	r3, [r0, #12]
    3efa:	2b01      	cmp	r3, #1
    3efc:	d905      	bls.n	3f0a <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    3efe:	3b01      	subs	r3, #1
    3f00:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    3f02:	f000 fa99 	bl	4438 <k_sched_unlock>

	return 0;
    3f06:	2000      	movs	r0, #0
}
    3f08:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    3f0a:	f04f 0320 	mov.w	r3, #32
    3f0e:	f3ef 8511 	mrs	r5, BASEPRI
    3f12:	f383 8812 	msr	BASEPRI_MAX, r3
    3f16:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    3f1a:	6901      	ldr	r1, [r0, #16]
    3f1c:	6880      	ldr	r0, [r0, #8]
    3f1e:	f001 fc01 	bl	5724 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    3f22:	4620      	mov	r0, r4
    3f24:	f001 fc79 	bl	581a <z_unpend_first_thread>
	mutex->owner = new_owner;
    3f28:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    3f2a:	b158      	cbz	r0, 3f44 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
    3f2c:	f990 200e 	ldrsb.w	r2, [r0, #14]
    3f30:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    3f32:	2200      	movs	r2, #0
    3f34:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    3f36:	f001 fc60 	bl	57fa <z_ready_thread>
		z_reschedule(&lock, key);
    3f3a:	4809      	ldr	r0, [pc, #36]	; (3f60 <z_impl_k_mutex_unlock+0x80>)
    3f3c:	4629      	mov	r1, r5
    3f3e:	f000 fa05 	bl	434c <z_reschedule>
    3f42:	e7de      	b.n	3f02 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    3f44:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    3f46:	f385 8811 	msr	BASEPRI, r5
    3f4a:	f3bf 8f6f 	isb	sy
    3f4e:	e7d8      	b.n	3f02 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    3f50:	f06f 0015 	mvn.w	r0, #21
    3f54:	e7d8      	b.n	3f08 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    3f56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3f5a:	e7d5      	b.n	3f08 <z_impl_k_mutex_unlock+0x28>
    3f5c:	2000099c 	.word	0x2000099c
    3f60:	20000fbe 	.word	0x20000fbe

00003f64 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    3f64:	b538      	push	{r3, r4, r5, lr}
    3f66:	4604      	mov	r4, r0
	__asm__ volatile(
    3f68:	f04f 0320 	mov.w	r3, #32
    3f6c:	f3ef 8511 	mrs	r5, BASEPRI
    3f70:	f383 8812 	msr	BASEPRI_MAX, r3
    3f74:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    3f78:	f001 fc4f 	bl	581a <z_unpend_first_thread>

	if (thread != NULL) {
    3f7c:	b148      	cbz	r0, 3f92 <z_impl_k_sem_give+0x2e>
    3f7e:	2200      	movs	r2, #0
    3f80:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    3f82:	f001 fc3a 	bl	57fa <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    3f86:	4629      	mov	r1, r5
    3f88:	4805      	ldr	r0, [pc, #20]	; (3fa0 <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    3f8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    3f8e:	f000 b9dd 	b.w	434c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    3f92:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    3f96:	429a      	cmp	r2, r3
    3f98:	bf18      	it	ne
    3f9a:	3301      	addne	r3, #1
    3f9c:	60a3      	str	r3, [r4, #8]
}
    3f9e:	e7f2      	b.n	3f86 <z_impl_k_sem_give+0x22>
    3fa0:	20000fbe 	.word	0x20000fbe

00003fa4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    3fa4:	b513      	push	{r0, r1, r4, lr}
    3fa6:	f04f 0420 	mov.w	r4, #32
    3faa:	f3ef 8111 	mrs	r1, BASEPRI
    3fae:	f384 8812 	msr	BASEPRI_MAX, r4
    3fb2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    3fb6:	6884      	ldr	r4, [r0, #8]
    3fb8:	b144      	cbz	r4, 3fcc <z_impl_k_sem_take+0x28>
		sem->count--;
    3fba:	3c01      	subs	r4, #1
    3fbc:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    3fbe:	f381 8811 	msr	BASEPRI, r1
    3fc2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    3fc6:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    3fc8:	b002      	add	sp, #8
    3fca:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    3fcc:	ea52 0403 	orrs.w	r4, r2, r3
    3fd0:	d106      	bne.n	3fe0 <z_impl_k_sem_take+0x3c>
    3fd2:	f381 8811 	msr	BASEPRI, r1
    3fd6:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    3fda:	f06f 000f 	mvn.w	r0, #15
    3fde:	e7f3      	b.n	3fc8 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    3fe0:	e9cd 2300 	strd	r2, r3, [sp]
    3fe4:	4602      	mov	r2, r0
    3fe6:	4802      	ldr	r0, [pc, #8]	; (3ff0 <z_impl_k_sem_take+0x4c>)
    3fe8:	f000 f956 	bl	4298 <z_pend_curr>
	return ret;
    3fec:	e7ec      	b.n	3fc8 <z_impl_k_sem_take+0x24>
    3fee:	bf00      	nop
    3ff0:	20000fbe 	.word	0x20000fbe

00003ff4 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    3ff4:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    3ff6:	4d07      	ldr	r5, [pc, #28]	; (4014 <z_reset_time_slice+0x20>)
    3ff8:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    3ffa:	b154      	cbz	r4, 4012 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    3ffc:	f7fe ff42 	bl	2e84 <sys_clock_elapsed>
    4000:	4b05      	ldr	r3, [pc, #20]	; (4018 <z_reset_time_slice+0x24>)
    4002:	4404      	add	r4, r0
    4004:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    4006:	6828      	ldr	r0, [r5, #0]
    4008:	2100      	movs	r1, #0
	}
}
    400a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    400e:	f001 bc5c 	b.w	58ca <z_set_timeout_expiry>
}
    4012:	bd38      	pop	{r3, r4, r5, pc}
    4014:	200009cc 	.word	0x200009cc
    4018:	2000099c 	.word	0x2000099c

0000401c <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    401c:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    401e:	4d0d      	ldr	r5, [pc, #52]	; (4054 <update_cache+0x38>)
    4020:	462b      	mov	r3, r5
    4022:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4026:	429c      	cmp	r4, r3
    4028:	d000      	beq.n	402c <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    402a:	b904      	cbnz	r4, 402e <update_cache+0x12>
    402c:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    402e:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    4030:	b938      	cbnz	r0, 4042 <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
    4032:	7b5a      	ldrb	r2, [r3, #13]
    4034:	06d2      	lsls	r2, r2, #27
    4036:	d104      	bne.n	4042 <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    4038:	69a2      	ldr	r2, [r4, #24]
    403a:	b912      	cbnz	r2, 4042 <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
    403c:	89da      	ldrh	r2, [r3, #14]
    403e:	2a7f      	cmp	r2, #127	; 0x7f
    4040:	d805      	bhi.n	404e <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    4042:	429c      	cmp	r4, r3
    4044:	d002      	beq.n	404c <update_cache+0x30>
			z_reset_time_slice(thread);
    4046:	4620      	mov	r0, r4
    4048:	f7ff ffd4 	bl	3ff4 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    404c:	4623      	mov	r3, r4
    404e:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    4050:	bd38      	pop	{r3, r4, r5, pc}
    4052:	bf00      	nop
    4054:	2000099c 	.word	0x2000099c

00004058 <move_thread_to_end_of_prio_q>:
{
    4058:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    405a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    405e:	7b43      	ldrb	r3, [r0, #13]
    4060:	2a00      	cmp	r2, #0
{
    4062:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    4064:	da04      	bge.n	4070 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4066:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    406a:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    406c:	f001 fb69 	bl	5742 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    4070:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    4072:	4a15      	ldr	r2, [pc, #84]	; (40c8 <move_thread_to_end_of_prio_q+0x70>)
    4074:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4078:	4610      	mov	r0, r2
    407a:	734b      	strb	r3, [r1, #13]
    407c:	f850 3f20 	ldr.w	r3, [r0, #32]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    4080:	6a54      	ldr	r4, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4082:	4283      	cmp	r3, r0
    4084:	bf08      	it	eq
    4086:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4088:	b923      	cbnz	r3, 4094 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    408a:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
    408e:	6021      	str	r1, [r4, #0]
	list->tail = node;
    4090:	6251      	str	r1, [r2, #36]	; 0x24
}
    4092:	e00c      	b.n	40ae <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
    4094:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    4098:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    409c:	42b5      	cmp	r5, r6
    409e:	d00e      	beq.n	40be <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
    40a0:	42ae      	cmp	r6, r5
    40a2:	dd0c      	ble.n	40be <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    40a4:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    40a6:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    40aa:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    40ac:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    40ae:	6890      	ldr	r0, [r2, #8]
    40b0:	1a43      	subs	r3, r0, r1
    40b2:	4258      	negs	r0, r3
}
    40b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    40b8:	4158      	adcs	r0, r3
    40ba:	f7ff bfaf 	b.w	401c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    40be:	429c      	cmp	r4, r3
    40c0:	d0e3      	beq.n	408a <move_thread_to_end_of_prio_q+0x32>
    40c2:	681b      	ldr	r3, [r3, #0]
    40c4:	e7e0      	b.n	4088 <move_thread_to_end_of_prio_q+0x30>
    40c6:	bf00      	nop
    40c8:	2000099c 	.word	0x2000099c

000040cc <ready_thread>:
{
    40cc:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    40ce:	f990 300d 	ldrsb.w	r3, [r0, #13]
    40d2:	7b42      	ldrb	r2, [r0, #13]
    40d4:	2b00      	cmp	r3, #0
    40d6:	db29      	blt.n	412c <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    40d8:	06d3      	lsls	r3, r2, #27
    40da:	d127      	bne.n	412c <ready_thread+0x60>
	return node->next != NULL;
    40dc:	6983      	ldr	r3, [r0, #24]
    40de:	bb2b      	cbnz	r3, 412c <ready_thread+0x60>
	return list->head == list;
    40e0:	4913      	ldr	r1, [pc, #76]	; (4130 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
    40e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
    40e6:	7342      	strb	r2, [r0, #13]
    40e8:	460a      	mov	r2, r1
    40ea:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    40ee:	4294      	cmp	r4, r2
    40f0:	bf18      	it	ne
    40f2:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
    40f4:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    40f6:	b923      	cbnz	r3, 4102 <ready_thread+0x36>
	node->prev = tail;
    40f8:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
    40fc:	6020      	str	r0, [r4, #0]
	list->tail = node;
    40fe:	6248      	str	r0, [r1, #36]	; 0x24
}
    4100:	e00c      	b.n	411c <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
    4102:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    4106:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    410a:	42b5      	cmp	r5, r6
    410c:	d00a      	beq.n	4124 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    410e:	42ae      	cmp	r6, r5
    4110:	dd08      	ble.n	4124 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
    4112:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4114:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    4118:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    411a:	6058      	str	r0, [r3, #4]
}
    411c:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    411e:	2000      	movs	r0, #0
    4120:	f7ff bf7c 	b.w	401c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    4124:	42a3      	cmp	r3, r4
    4126:	d0e7      	beq.n	40f8 <ready_thread+0x2c>
    4128:	681b      	ldr	r3, [r3, #0]
    412a:	e7e4      	b.n	40f6 <ready_thread+0x2a>
}
    412c:	bc70      	pop	{r4, r5, r6}
    412e:	4770      	bx	lr
    4130:	2000099c 	.word	0x2000099c

00004134 <unready_thread>:
{
    4134:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    4136:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    413a:	7b43      	ldrb	r3, [r0, #13]
    413c:	2a00      	cmp	r2, #0
{
    413e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    4140:	da04      	bge.n	414c <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4142:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4146:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    4148:	f001 fafb 	bl	5742 <sys_dlist_remove>
	update_cache(thread == _current);
    414c:	4b04      	ldr	r3, [pc, #16]	; (4160 <unready_thread+0x2c>)
    414e:	6898      	ldr	r0, [r3, #8]
    4150:	1a43      	subs	r3, r0, r1
    4152:	4258      	negs	r0, r3
    4154:	4158      	adcs	r0, r3
}
    4156:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    415a:	f7ff bf5f 	b.w	401c <update_cache>
    415e:	bf00      	nop
    4160:	2000099c 	.word	0x2000099c

00004164 <pend>:
{
    4164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4168:	4606      	mov	r6, r0
    416a:	4615      	mov	r5, r2
    416c:	461c      	mov	r4, r3
	__asm__ volatile(
    416e:	f04f 0320 	mov.w	r3, #32
    4172:	f3ef 8711 	mrs	r7, BASEPRI
    4176:	f383 8812 	msr	BASEPRI_MAX, r3
    417a:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    417e:	f001 fb14 	bl	57aa <add_to_waitq_locked>
	__asm__ volatile(
    4182:	f387 8811 	msr	BASEPRI, r7
    4186:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    418a:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    418e:	bf08      	it	eq
    4190:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    4194:	d008      	beq.n	41a8 <pend+0x44>
    4196:	462a      	mov	r2, r5
    4198:	4623      	mov	r3, r4
    419a:	f106 0018 	add.w	r0, r6, #24
    419e:	4903      	ldr	r1, [pc, #12]	; (41ac <pend+0x48>)
}
    41a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    41a4:	f000 baca 	b.w	473c <z_add_timeout>
    41a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    41ac:	00005767 	.word	0x00005767

000041b0 <k_sched_time_slice_set>:
{
    41b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    41b2:	4604      	mov	r4, r0
    41b4:	460d      	mov	r5, r1
	__asm__ volatile(
    41b6:	f04f 0320 	mov.w	r3, #32
    41ba:	f3ef 8711 	mrs	r7, BASEPRI
    41be:	f383 8812 	msr	BASEPRI_MAX, r3
    41c2:	f3bf 8f6f 	isb	sy
			return (uint32_t)((t * to_hz + off) / from_hz);
    41c6:	2600      	movs	r6, #0
    41c8:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    41cc:	f240 30e7 	movw	r0, #999	; 0x3e7
    41d0:	4631      	mov	r1, r6
    41d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    41d6:	2300      	movs	r3, #0
    41d8:	fbe4 010c 	umlal	r0, r1, r4, ip
    41dc:	f7fb ff90 	bl	100 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    41e0:	42b4      	cmp	r4, r6
    41e2:	dd02      	ble.n	41ea <k_sched_time_slice_set+0x3a>
			slice_ticks = MAX(2, slice_ticks);
    41e4:	2802      	cmp	r0, #2
    41e6:	bfb8      	it	lt
    41e8:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    41ea:	4a07      	ldr	r2, [pc, #28]	; (4208 <k_sched_time_slice_set+0x58>)
		_current_cpu->slice_ticks = 0;
    41ec:	4b07      	ldr	r3, [pc, #28]	; (420c <k_sched_time_slice_set+0x5c>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    41ee:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
    41f0:	4a07      	ldr	r2, [pc, #28]	; (4210 <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
    41f2:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
    41f4:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
    41f6:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
    41f8:	f7ff fefc 	bl	3ff4 <z_reset_time_slice>
	__asm__ volatile(
    41fc:	f387 8811 	msr	BASEPRI, r7
    4200:	f3bf 8f6f 	isb	sy
}
    4204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4206:	bf00      	nop
    4208:	200009cc 	.word	0x200009cc
    420c:	2000099c 	.word	0x2000099c
    4210:	200009c8 	.word	0x200009c8

00004214 <z_time_slice>:
{
    4214:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    4216:	f04f 0320 	mov.w	r3, #32
    421a:	f3ef 8511 	mrs	r5, BASEPRI
    421e:	f383 8812 	msr	BASEPRI_MAX, r3
    4222:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    4226:	4b17      	ldr	r3, [pc, #92]	; (4284 <z_time_slice+0x70>)
    4228:	4a17      	ldr	r2, [pc, #92]	; (4288 <z_time_slice+0x74>)
    422a:	689c      	ldr	r4, [r3, #8]
    422c:	6811      	ldr	r1, [r2, #0]
    422e:	428c      	cmp	r4, r1
    4230:	d107      	bne.n	4242 <z_time_slice+0x2e>
	z_reset_time_slice(curr);
    4232:	4620      	mov	r0, r4
    4234:	f7ff fede 	bl	3ff4 <z_reset_time_slice>
	__asm__ volatile(
    4238:	f385 8811 	msr	BASEPRI, r5
    423c:	f3bf 8f6f 	isb	sy
}
    4240:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    4242:	2100      	movs	r1, #0
    4244:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
    4246:	4a11      	ldr	r2, [pc, #68]	; (428c <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
    4248:	6812      	ldr	r2, [r2, #0]
    424a:	b1c2      	cbz	r2, 427e <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    424c:	89e2      	ldrh	r2, [r4, #14]
    424e:	2a7f      	cmp	r2, #127	; 0x7f
    4250:	d815      	bhi.n	427e <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    4252:	7b62      	ldrb	r2, [r4, #13]
    4254:	06d2      	lsls	r2, r2, #27
    4256:	d112      	bne.n	427e <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    4258:	4a0d      	ldr	r2, [pc, #52]	; (4290 <z_time_slice+0x7c>)
    425a:	f994 100e 	ldrsb.w	r1, [r4, #14]
    425e:	6812      	ldr	r2, [r2, #0]
    4260:	4291      	cmp	r1, r2
    4262:	db0c      	blt.n	427e <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    4264:	4a0b      	ldr	r2, [pc, #44]	; (4294 <z_time_slice+0x80>)
    4266:	4294      	cmp	r4, r2
    4268:	d009      	beq.n	427e <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    426a:	691a      	ldr	r2, [r3, #16]
    426c:	4282      	cmp	r2, r0
    426e:	dc03      	bgt.n	4278 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
    4270:	4620      	mov	r0, r4
    4272:	f7ff fef1 	bl	4058 <move_thread_to_end_of_prio_q>
    4276:	e7dc      	b.n	4232 <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
    4278:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
    427a:	611a      	str	r2, [r3, #16]
    427c:	e7dc      	b.n	4238 <z_time_slice+0x24>
    427e:	2200      	movs	r2, #0
    4280:	e7fb      	b.n	427a <z_time_slice+0x66>
    4282:	bf00      	nop
    4284:	2000099c 	.word	0x2000099c
    4288:	200009c4 	.word	0x200009c4
    428c:	200009cc 	.word	0x200009cc
    4290:	200009c8 	.word	0x200009c8
    4294:	200001c8 	.word	0x200001c8

00004298 <z_pend_curr>:
{
    4298:	b510      	push	{r4, lr}
	pending_current = _current;
    429a:	4b07      	ldr	r3, [pc, #28]	; (42b8 <z_pend_curr+0x20>)
    429c:	6898      	ldr	r0, [r3, #8]
    429e:	4b07      	ldr	r3, [pc, #28]	; (42bc <z_pend_curr+0x24>)
{
    42a0:	460c      	mov	r4, r1
	pending_current = _current;
    42a2:	6018      	str	r0, [r3, #0]
{
    42a4:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    42a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    42aa:	f7ff ff5b 	bl	4164 <pend>
	ret = arch_swap(key);
    42ae:	4620      	mov	r0, r4
}
    42b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    42b4:	f7fd bbca 	b.w	1a4c <arch_swap>
    42b8:	2000099c 	.word	0x2000099c
    42bc:	200009c4 	.word	0x200009c4

000042c0 <z_set_prio>:
{
    42c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    42c2:	4604      	mov	r4, r0
	__asm__ volatile(
    42c4:	f04f 0320 	mov.w	r3, #32
    42c8:	f3ef 8611 	mrs	r6, BASEPRI
    42cc:	f383 8812 	msr	BASEPRI_MAX, r3
    42d0:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    42d4:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    42d6:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    42d8:	b249      	sxtb	r1, r1
    42da:	d119      	bne.n	4310 <z_set_prio+0x50>
	return node->next != NULL;
    42dc:	6985      	ldr	r5, [r0, #24]
    42de:	b9bd      	cbnz	r5, 4310 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    42e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    42e4:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    42e6:	f001 fa2c 	bl	5742 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    42ea:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    42ec:	4a16      	ldr	r2, [pc, #88]	; (4348 <z_set_prio+0x88>)
				thread->base.prio = prio;
    42ee:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    42f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    42f4:	7343      	strb	r3, [r0, #13]
    42f6:	4613      	mov	r3, r2
    42f8:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    42fc:	4298      	cmp	r0, r3
    42fe:	bf18      	it	ne
    4300:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
    4302:	6a50      	ldr	r0, [r2, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4304:	b95d      	cbnz	r5, 431e <z_set_prio+0x5e>
	node->prev = tail;
    4306:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
    430a:	6004      	str	r4, [r0, #0]
	list->tail = node;
    430c:	6254      	str	r4, [r2, #36]	; 0x24
}
    430e:	e011      	b.n	4334 <z_set_prio+0x74>
			thread->base.prio = prio;
    4310:	73a1      	strb	r1, [r4, #14]
    4312:	2000      	movs	r0, #0
	__asm__ volatile(
    4314:	f386 8811 	msr	BASEPRI, r6
    4318:	f3bf 8f6f 	isb	sy
}
    431c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
    431e:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
    4322:	42b9      	cmp	r1, r7
    4324:	d00b      	beq.n	433e <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    4326:	428f      	cmp	r7, r1
    4328:	dd09      	ble.n	433e <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
    432a:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
    432c:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    4330:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    4332:	606c      	str	r4, [r5, #4]
			update_cache(1);
    4334:	2001      	movs	r0, #1
    4336:	f7ff fe71 	bl	401c <update_cache>
    433a:	2001      	movs	r0, #1
    433c:	e7ea      	b.n	4314 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
    433e:	42a8      	cmp	r0, r5
    4340:	d0e1      	beq.n	4306 <z_set_prio+0x46>
    4342:	682d      	ldr	r5, [r5, #0]
    4344:	e7de      	b.n	4304 <z_set_prio+0x44>
    4346:	bf00      	nop
    4348:	2000099c 	.word	0x2000099c

0000434c <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    434c:	b949      	cbnz	r1, 4362 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    434e:	f3ef 8005 	mrs	r0, IPSR
    4352:	b930      	cbnz	r0, 4362 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    4354:	4b05      	ldr	r3, [pc, #20]	; (436c <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    4356:	69da      	ldr	r2, [r3, #28]
    4358:	689b      	ldr	r3, [r3, #8]
    435a:	429a      	cmp	r2, r3
    435c:	d001      	beq.n	4362 <z_reschedule+0x16>
    435e:	f7fd bb75 	b.w	1a4c <arch_swap>
    4362:	f381 8811 	msr	BASEPRI, r1
    4366:	f3bf 8f6f 	isb	sy
}
    436a:	4770      	bx	lr
    436c:	2000099c 	.word	0x2000099c

00004370 <z_sched_start>:
{
    4370:	b510      	push	{r4, lr}
	__asm__ volatile(
    4372:	f04f 0220 	mov.w	r2, #32
    4376:	f3ef 8411 	mrs	r4, BASEPRI
    437a:	f382 8812 	msr	BASEPRI_MAX, r2
    437e:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    4382:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    4384:	0751      	lsls	r1, r2, #29
    4386:	d404      	bmi.n	4392 <z_sched_start+0x22>
	__asm__ volatile(
    4388:	f384 8811 	msr	BASEPRI, r4
    438c:	f3bf 8f6f 	isb	sy
}
    4390:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4392:	f022 0204 	bic.w	r2, r2, #4
    4396:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    4398:	f7ff fe98 	bl	40cc <ready_thread>
	z_reschedule(&sched_spinlock, key);
    439c:	4621      	mov	r1, r4
    439e:	4802      	ldr	r0, [pc, #8]	; (43a8 <z_sched_start+0x38>)
}
    43a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    43a4:	f7ff bfd2 	b.w	434c <z_reschedule>
    43a8:	20000fbe 	.word	0x20000fbe

000043ac <z_impl_k_thread_suspend>:
{
    43ac:	b570      	push	{r4, r5, r6, lr}
    43ae:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    43b0:	3018      	adds	r0, #24
    43b2:	f001 fa64 	bl	587e <z_abort_timeout>
	__asm__ volatile(
    43b6:	f04f 0320 	mov.w	r3, #32
    43ba:	f3ef 8611 	mrs	r6, BASEPRI
    43be:	f383 8812 	msr	BASEPRI_MAX, r3
    43c2:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    43c6:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    43ca:	7b63      	ldrb	r3, [r4, #13]
    43cc:	2a00      	cmp	r2, #0
    43ce:	da05      	bge.n	43dc <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    43d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    43d4:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    43d6:	4620      	mov	r0, r4
    43d8:	f001 f9b3 	bl	5742 <sys_dlist_remove>
		update_cache(thread == _current);
    43dc:	4d0b      	ldr	r5, [pc, #44]	; (440c <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    43de:	7b63      	ldrb	r3, [r4, #13]
    43e0:	68a8      	ldr	r0, [r5, #8]
    43e2:	f043 0310 	orr.w	r3, r3, #16
    43e6:	7363      	strb	r3, [r4, #13]
    43e8:	1b03      	subs	r3, r0, r4
    43ea:	4258      	negs	r0, r3
    43ec:	4158      	adcs	r0, r3
    43ee:	f7ff fe15 	bl	401c <update_cache>
	__asm__ volatile(
    43f2:	f386 8811 	msr	BASEPRI, r6
    43f6:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    43fa:	68ab      	ldr	r3, [r5, #8]
    43fc:	42a3      	cmp	r3, r4
    43fe:	d103      	bne.n	4408 <z_impl_k_thread_suspend+0x5c>
}
    4400:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    4404:	f001 ba31 	b.w	586a <z_reschedule_unlocked>
}
    4408:	bd70      	pop	{r4, r5, r6, pc}
    440a:	bf00      	nop
    440c:	2000099c 	.word	0x2000099c

00004410 <k_sched_lock>:
	__asm__ volatile(
    4410:	f04f 0320 	mov.w	r3, #32
    4414:	f3ef 8111 	mrs	r1, BASEPRI
    4418:	f383 8812 	msr	BASEPRI_MAX, r3
    441c:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    4420:	4b04      	ldr	r3, [pc, #16]	; (4434 <k_sched_lock+0x24>)
    4422:	689a      	ldr	r2, [r3, #8]
    4424:	7bd3      	ldrb	r3, [r2, #15]
    4426:	3b01      	subs	r3, #1
    4428:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    442a:	f381 8811 	msr	BASEPRI, r1
    442e:	f3bf 8f6f 	isb	sy
}
    4432:	4770      	bx	lr
    4434:	2000099c 	.word	0x2000099c

00004438 <k_sched_unlock>:
{
    4438:	b510      	push	{r4, lr}
	__asm__ volatile(
    443a:	f04f 0320 	mov.w	r3, #32
    443e:	f3ef 8411 	mrs	r4, BASEPRI
    4442:	f383 8812 	msr	BASEPRI_MAX, r3
    4446:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    444a:	4b08      	ldr	r3, [pc, #32]	; (446c <k_sched_unlock+0x34>)
    444c:	689a      	ldr	r2, [r3, #8]
    444e:	7bd3      	ldrb	r3, [r2, #15]
    4450:	3301      	adds	r3, #1
    4452:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    4454:	2000      	movs	r0, #0
    4456:	f7ff fde1 	bl	401c <update_cache>
	__asm__ volatile(
    445a:	f384 8811 	msr	BASEPRI, r4
    445e:	f3bf 8f6f 	isb	sy
}
    4462:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    4466:	f001 ba00 	b.w	586a <z_reschedule_unlocked>
    446a:	bf00      	nop
    446c:	2000099c 	.word	0x2000099c

00004470 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    4470:	4b04      	ldr	r3, [pc, #16]	; (4484 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    4472:	2100      	movs	r1, #0
    4474:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    4478:	e9c3 2208 	strd	r2, r2, [r3, #32]
    447c:	4608      	mov	r0, r1
    447e:	f7ff be97 	b.w	41b0 <k_sched_time_slice_set>
    4482:	bf00      	nop
    4484:	2000099c 	.word	0x2000099c

00004488 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    4488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    448a:	f04f 0320 	mov.w	r3, #32
    448e:	f3ef 8511 	mrs	r5, BASEPRI
    4492:	f383 8812 	msr	BASEPRI_MAX, r3
    4496:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    449a:	4919      	ldr	r1, [pc, #100]	; (4500 <z_impl_k_yield+0x78>)
    449c:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    449e:	7b43      	ldrb	r3, [r0, #13]
    44a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    44a4:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    44a6:	f001 f94c 	bl	5742 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    44aa:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    44ac:	460a      	mov	r2, r1
    44ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
    44b2:	7343      	strb	r3, [r0, #13]
    44b4:	f852 3f20 	ldr.w	r3, [r2, #32]!
	return (node == list->tail) ? NULL : node->next;
    44b8:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    44ba:	4293      	cmp	r3, r2
    44bc:	bf08      	it	eq
    44be:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    44c0:	b923      	cbnz	r3, 44cc <z_impl_k_yield+0x44>
	node->prev = tail;
    44c2:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
    44c6:	6020      	str	r0, [r4, #0]
	list->tail = node;
    44c8:	6248      	str	r0, [r1, #36]	; 0x24
}
    44ca:	e00c      	b.n	44e6 <z_impl_k_yield+0x5e>
	int32_t b1 = thread_1->base.prio;
    44cc:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    44d0:	f993 700e 	ldrsb.w	r7, [r3, #14]
	if (b1 != b2) {
    44d4:	42be      	cmp	r6, r7
    44d6:	d00e      	beq.n	44f6 <z_impl_k_yield+0x6e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    44d8:	42b7      	cmp	r7, r6
    44da:	dd0c      	ble.n	44f6 <z_impl_k_yield+0x6e>
	sys_dnode_t *const prev = successor->prev;
    44dc:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    44de:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    44e2:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    44e4:	6058      	str	r0, [r3, #4]
	}
	queue_thread(_current);
	update_cache(1);
    44e6:	2001      	movs	r0, #1
    44e8:	f7ff fd98 	bl	401c <update_cache>
    44ec:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    44ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    44f2:	f7fd baab 	b.w	1a4c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    44f6:	42a3      	cmp	r3, r4
    44f8:	d0e3      	beq.n	44c2 <z_impl_k_yield+0x3a>
    44fa:	681b      	ldr	r3, [r3, #0]
    44fc:	e7e0      	b.n	44c0 <z_impl_k_yield+0x38>
    44fe:	bf00      	nop
    4500:	2000099c 	.word	0x2000099c

00004504 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    4504:	ea50 0301 	orrs.w	r3, r0, r1
{
    4508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    450c:	4605      	mov	r5, r0
    450e:	460e      	mov	r6, r1
	if (ticks == 0) {
    4510:	d103      	bne.n	451a <z_tick_sleep+0x16>
	z_impl_k_yield();
    4512:	f7ff ffb9 	bl	4488 <z_impl_k_yield>
		k_yield();
		return 0;
    4516:	2000      	movs	r0, #0
    4518:	e02c      	b.n	4574 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    451a:	1c83      	adds	r3, r0, #2
    451c:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
    4520:	db2a      	blt.n	4578 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    4522:	f001 f9ee 	bl	5902 <sys_clock_tick_get_32>
    4526:	1944      	adds	r4, r0, r5
    4528:	f04f 0320 	mov.w	r3, #32
    452c:	f3ef 8811 	mrs	r8, BASEPRI
    4530:	f383 8812 	msr	BASEPRI_MAX, r3
    4534:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    4538:	4f11      	ldr	r7, [pc, #68]	; (4580 <z_tick_sleep+0x7c>)
    453a:	4b12      	ldr	r3, [pc, #72]	; (4584 <z_tick_sleep+0x80>)
    453c:	68b8      	ldr	r0, [r7, #8]
    453e:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    4540:	f7ff fdf8 	bl	4134 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    4544:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    4546:	4910      	ldr	r1, [pc, #64]	; (4588 <z_tick_sleep+0x84>)
    4548:	462a      	mov	r2, r5
    454a:	4633      	mov	r3, r6
    454c:	3018      	adds	r0, #24
    454e:	f000 f8f5 	bl	473c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    4552:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    4554:	7b53      	ldrb	r3, [r2, #13]
    4556:	f043 0310 	orr.w	r3, r3, #16
    455a:	7353      	strb	r3, [r2, #13]
    455c:	4640      	mov	r0, r8
    455e:	f7fd fa75 	bl	1a4c <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    4562:	f001 f9ce 	bl	5902 <sys_clock_tick_get_32>
    4566:	1a20      	subs	r0, r4, r0
    4568:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    456c:	2801      	cmp	r0, #1
    456e:	f173 0300 	sbcs.w	r3, r3, #0
    4572:	dbd0      	blt.n	4516 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
    4574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    4578:	f06f 0401 	mvn.w	r4, #1
    457c:	1a24      	subs	r4, r4, r0
    457e:	e7d3      	b.n	4528 <z_tick_sleep+0x24>
    4580:	2000099c 	.word	0x2000099c
    4584:	200009c4 	.word	0x200009c4
    4588:	00005767 	.word	0x00005767

0000458c <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    458c:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    4590:	bf08      	it	eq
    4592:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    4596:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4598:	d106      	bne.n	45a8 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    459a:	4b08      	ldr	r3, [pc, #32]	; (45bc <z_impl_k_sleep+0x30>)
    459c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    459e:	f7ff ff05 	bl	43ac <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    45a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    45a6:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    45a8:	f7ff ffac 	bl	4504 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    45ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    45b0:	fb80 0303 	smull	r0, r3, r0, r3
    45b4:	0bc0      	lsrs	r0, r0, #15
    45b6:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    45ba:	e7f4      	b.n	45a6 <z_impl_k_sleep+0x1a>
    45bc:	2000099c 	.word	0x2000099c

000045c0 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    45c0:	4b01      	ldr	r3, [pc, #4]	; (45c8 <z_impl_z_current_get+0x8>)
    45c2:	6898      	ldr	r0, [r3, #8]
    45c4:	4770      	bx	lr
    45c6:	bf00      	nop
    45c8:	2000099c 	.word	0x2000099c

000045cc <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    45cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    45d0:	4604      	mov	r4, r0
    45d2:	f04f 0320 	mov.w	r3, #32
    45d6:	f3ef 8611 	mrs	r6, BASEPRI
    45da:	f383 8812 	msr	BASEPRI_MAX, r3
    45de:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    45e2:	7b43      	ldrb	r3, [r0, #13]
    45e4:	071a      	lsls	r2, r3, #28
    45e6:	d505      	bpl.n	45f4 <z_thread_abort+0x28>
	__asm__ volatile(
    45e8:	f386 8811 	msr	BASEPRI, r6
    45ec:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    45f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    45f4:	f023 0220 	bic.w	r2, r3, #32
    45f8:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    45fc:	09d2      	lsrs	r2, r2, #7
    45fe:	d120      	bne.n	4642 <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    4600:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    4602:	68a3      	ldr	r3, [r4, #8]
    4604:	b113      	cbz	r3, 460c <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
    4606:	4620      	mov	r0, r4
    4608:	f001 f8a3 	bl	5752 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    460c:	f104 0018 	add.w	r0, r4, #24
    4610:	f001 f935 	bl	587e <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    4614:	f104 0758 	add.w	r7, r4, #88	; 0x58
    4618:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    461c:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    461e:	42bd      	cmp	r5, r7
    4620:	d000      	beq.n	4624 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    4622:	b9b5      	cbnz	r5, 4652 <z_thread_abort+0x86>
		update_cache(1);
    4624:	2001      	movs	r0, #1
    4626:	f7ff fcf9 	bl	401c <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    462a:	4b10      	ldr	r3, [pc, #64]	; (466c <z_thread_abort+0xa0>)
    462c:	689b      	ldr	r3, [r3, #8]
    462e:	42a3      	cmp	r3, r4
    4630:	d1da      	bne.n	45e8 <z_thread_abort+0x1c>
    4632:	f3ef 8305 	mrs	r3, IPSR
    4636:	2b00      	cmp	r3, #0
    4638:	d1d6      	bne.n	45e8 <z_thread_abort+0x1c>
    463a:	4630      	mov	r0, r6
    463c:	f7fd fa06 	bl	1a4c <arch_swap>
	return ret;
    4640:	e7d2      	b.n	45e8 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4642:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    4646:	f043 0308 	orr.w	r3, r3, #8
    464a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    464c:	f001 f879 	bl	5742 <sys_dlist_remove>
}
    4650:	e7d7      	b.n	4602 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
    4652:	4628      	mov	r0, r5
    4654:	f001 f87d 	bl	5752 <unpend_thread_no_timeout>
    4658:	f105 0018 	add.w	r0, r5, #24
    465c:	f001 f90f 	bl	587e <z_abort_timeout>
    4660:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    4664:	4628      	mov	r0, r5
    4666:	f7ff fd31 	bl	40cc <ready_thread>
    466a:	e7d7      	b.n	461c <z_thread_abort+0x50>
    466c:	2000099c 	.word	0x2000099c

00004670 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    4670:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    4672:	4806      	ldr	r0, [pc, #24]	; (468c <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    4674:	4a06      	ldr	r2, [pc, #24]	; (4690 <z_data_copy+0x20>)
    4676:	4907      	ldr	r1, [pc, #28]	; (4694 <z_data_copy+0x24>)
    4678:	1a12      	subs	r2, r2, r0
    467a:	f001 f800 	bl	567e <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    467e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    4682:	4a05      	ldr	r2, [pc, #20]	; (4698 <z_data_copy+0x28>)
    4684:	4905      	ldr	r1, [pc, #20]	; (469c <z_data_copy+0x2c>)
    4686:	4806      	ldr	r0, [pc, #24]	; (46a0 <z_data_copy+0x30>)
    4688:	f000 bff9 	b.w	567e <z_early_memcpy>
    468c:	20000000 	.word	0x20000000
    4690:	200001a4 	.word	0x200001a4
    4694:	00006860 	.word	0x00006860
    4698:	00000000 	.word	0x00000000
    469c:	00006860 	.word	0x00006860
    46a0:	20000000 	.word	0x20000000

000046a4 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    46a4:	4b03      	ldr	r3, [pc, #12]	; (46b4 <elapsed+0x10>)
    46a6:	681b      	ldr	r3, [r3, #0]
    46a8:	b90b      	cbnz	r3, 46ae <elapsed+0xa>
    46aa:	f7fe bbeb 	b.w	2e84 <sys_clock_elapsed>
}
    46ae:	2000      	movs	r0, #0
    46b0:	4770      	bx	lr
    46b2:	bf00      	nop
    46b4:	200009d0 	.word	0x200009d0

000046b8 <next_timeout>:
	return list->head == list;
    46b8:	4b11      	ldr	r3, [pc, #68]	; (4700 <next_timeout+0x48>)

static int32_t next_timeout(void)
{
    46ba:	b510      	push	{r4, lr}
    46bc:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    46be:	429c      	cmp	r4, r3
    46c0:	d10a      	bne.n	46d8 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    46c2:	f7ff ffef 	bl	46a4 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    46c6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    46ca:	4b0e      	ldr	r3, [pc, #56]	; (4704 <next_timeout+0x4c>)
    46cc:	691b      	ldr	r3, [r3, #16]
    46ce:	b113      	cbz	r3, 46d6 <next_timeout+0x1e>
    46d0:	4298      	cmp	r0, r3
    46d2:	bfa8      	it	ge
    46d4:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    46d6:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    46d8:	f7ff ffe4 	bl	46a4 <elapsed>
	if ((to == NULL) ||
    46dc:	2c00      	cmp	r4, #0
    46de:	d0f2      	beq.n	46c6 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    46e0:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    46e4:	1a1b      	subs	r3, r3, r0
    46e6:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    46ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    46ee:	f172 0100 	sbcs.w	r1, r2, #0
    46f2:	dae8      	bge.n	46c6 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    46f4:	2a00      	cmp	r2, #0
    46f6:	bfac      	ite	ge
    46f8:	4618      	movge	r0, r3
    46fa:	2000      	movlt	r0, #0
    46fc:	e7e5      	b.n	46ca <next_timeout+0x12>
    46fe:	bf00      	nop
    4700:	200000d8 	.word	0x200000d8
    4704:	2000099c 	.word	0x2000099c

00004708 <remove_timeout>:
	return (node == list->tail) ? NULL : node->next;
    4708:	4a0b      	ldr	r2, [pc, #44]	; (4738 <remove_timeout+0x30>)
    470a:	6803      	ldr	r3, [r0, #0]
    470c:	6852      	ldr	r2, [r2, #4]
    470e:	4290      	cmp	r0, r2
{
    4710:	b530      	push	{r4, r5, lr}
    4712:	d009      	beq.n	4728 <remove_timeout+0x20>
	if (next(t) != NULL) {
    4714:	b143      	cbz	r3, 4728 <remove_timeout+0x20>
		next(t)->dticks += t->dticks;
    4716:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    471a:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    471e:	1912      	adds	r2, r2, r4
    4720:	eb41 0105 	adc.w	r1, r1, r5
    4724:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    4728:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    472a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    472c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    472e:	2300      	movs	r3, #0
	node->prev = NULL;
    4730:	e9c0 3300 	strd	r3, r3, [r0]
}
    4734:	bd30      	pop	{r4, r5, pc}
    4736:	bf00      	nop
    4738:	200000d8 	.word	0x200000d8

0000473c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    473c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    4740:	bf08      	it	eq
    4742:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    4746:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4748:	4604      	mov	r4, r0
    474a:	461d      	mov	r5, r3
    474c:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    474e:	d061      	beq.n	4814 <z_add_timeout+0xd8>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    4750:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    4752:	f04f 0320 	mov.w	r3, #32
    4756:	f3ef 8711 	mrs	r7, BASEPRI
    475a:	f383 8812 	msr	BASEPRI_MAX, r3
    475e:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    4762:	3201      	adds	r2, #1
    4764:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
    4768:	da24      	bge.n	47b4 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    476a:	4930      	ldr	r1, [pc, #192]	; (482c <z_add_timeout+0xf0>)
    476c:	e9d1 2000 	ldrd	r2, r0, [r1]
    4770:	f06f 0301 	mvn.w	r3, #1
    4774:	1a9b      	subs	r3, r3, r2
    4776:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    477a:	eb62 0000 	sbc.w	r0, r2, r0
    477e:	1b9e      	subs	r6, r3, r6
    4780:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
    4784:	2e01      	cmp	r6, #1
    4786:	f170 0300 	sbcs.w	r3, r0, #0
    478a:	da01      	bge.n	4790 <z_add_timeout+0x54>
    478c:	2601      	movs	r6, #1
    478e:	2000      	movs	r0, #0
    4790:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
    4794:	4e26      	ldr	r6, [pc, #152]	; (4830 <z_add_timeout+0xf4>)
    4796:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
    479a:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    479c:	45b4      	cmp	ip, r6
    479e:	bf08      	it	eq
    47a0:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    47a4:	f1bc 0f00 	cmp.w	ip, #0
    47a8:	d10d      	bne.n	47c6 <z_add_timeout+0x8a>
	node->prev = tail;
    47aa:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
    47ae:	602c      	str	r4, [r5, #0]
	list->tail = node;
    47b0:	6074      	str	r4, [r6, #4]
}
    47b2:	e01c      	b.n	47ee <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
    47b4:	f7ff ff76 	bl	46a4 <elapsed>
    47b8:	3601      	adds	r6, #1
    47ba:	f145 0500 	adc.w	r5, r5, #0
    47be:	1836      	adds	r6, r6, r0
    47c0:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    47c4:	e7e4      	b.n	4790 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
    47c6:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
    47ca:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
    47ce:	4293      	cmp	r3, r2
    47d0:	eb71 0e00 	sbcs.w	lr, r1, r0
    47d4:	da1f      	bge.n	4816 <z_add_timeout+0xda>
				t->dticks -= to->dticks;
    47d6:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
    47d8:	f8dc 3004 	ldr.w	r3, [ip, #4]
    47dc:	eb60 0001 	sbc.w	r0, r0, r1
    47e0:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
    47e4:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
    47e8:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    47ea:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
    47ee:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    47f0:	42b3      	cmp	r3, r6
    47f2:	d00b      	beq.n	480c <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    47f4:	429c      	cmp	r4, r3
    47f6:	d109      	bne.n	480c <z_add_timeout+0xd0>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    47f8:	f7ff ff5e 	bl	46b8 <next_timeout>

			if (next_time == 0 ||
    47fc:	b118      	cbz	r0, 4806 <z_add_timeout+0xca>
			    _current_cpu->slice_ticks != next_time) {
    47fe:	4b0d      	ldr	r3, [pc, #52]	; (4834 <z_add_timeout+0xf8>)
			if (next_time == 0 ||
    4800:	691b      	ldr	r3, [r3, #16]
    4802:	4283      	cmp	r3, r0
    4804:	d002      	beq.n	480c <z_add_timeout+0xd0>
				sys_clock_set_timeout(next_time, false);
    4806:	2100      	movs	r1, #0
    4808:	f7fe fb0a 	bl	2e20 <sys_clock_set_timeout>
	__asm__ volatile(
    480c:	f387 8811 	msr	BASEPRI, r7
    4810:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    4814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
    4816:	1a9b      	subs	r3, r3, r2
    4818:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    481c:	45ac      	cmp	ip, r5
    481e:	e9c4 3104 	strd	r3, r1, [r4, #16]
    4822:	d0c2      	beq.n	47aa <z_add_timeout+0x6e>
    4824:	f8dc c000 	ldr.w	ip, [ip]
    4828:	e7bc      	b.n	47a4 <z_add_timeout+0x68>
    482a:	bf00      	nop
    482c:	200002c8 	.word	0x200002c8
    4830:	200000d8 	.word	0x200000d8
    4834:	2000099c 	.word	0x2000099c

00004838 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    4838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    483c:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    483e:	f7ff fce9 	bl	4214 <z_time_slice>
	__asm__ volatile(
    4842:	f04f 0320 	mov.w	r3, #32
    4846:	f3ef 8411 	mrs	r4, BASEPRI
    484a:	f383 8812 	msr	BASEPRI_MAX, r3
    484e:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    4852:	4e24      	ldr	r6, [pc, #144]	; (48e4 <sys_clock_announce+0xac>)
	return list->head == list;
    4854:	f8df 8090 	ldr.w	r8, [pc, #144]	; 48e8 <sys_clock_announce+0xb0>
    4858:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    485a:	4d24      	ldr	r5, [pc, #144]	; (48ec <sys_clock_announce+0xb4>)
    485c:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    4860:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4862:	4540      	cmp	r0, r8
		curr_tick += dt;
    4864:	e9d5 1e00 	ldrd	r1, lr, [r5]
    4868:	ea4f 77e2 	mov.w	r7, r2, asr #31
    486c:	d00b      	beq.n	4886 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    486e:	b150      	cbz	r0, 4886 <sys_clock_announce+0x4e>
    4870:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
    4874:	429a      	cmp	r2, r3
    4876:	eb77 090c 	sbcs.w	r9, r7, ip
    487a:	da16      	bge.n	48aa <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    487c:	1a9b      	subs	r3, r3, r2
    487e:	eb6c 0c07 	sbc.w	ip, ip, r7
    4882:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    4886:	1851      	adds	r1, r2, r1
    4888:	eb4e 0707 	adc.w	r7, lr, r7
    488c:	e9c5 1700 	strd	r1, r7, [r5]
	announce_remaining = 0;
    4890:	2500      	movs	r5, #0
    4892:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    4894:	f7ff ff10 	bl	46b8 <next_timeout>
    4898:	4629      	mov	r1, r5
    489a:	f7fe fac1 	bl	2e20 <sys_clock_set_timeout>
	__asm__ volatile(
    489e:	f384 8811 	msr	BASEPRI, r4
    48a2:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    48a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    48aa:	1859      	adds	r1, r3, r1
    48ac:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
    48b0:	1ad3      	subs	r3, r2, r3
    48b2:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    48b4:	2200      	movs	r2, #0
    48b6:	2300      	movs	r3, #0
    48b8:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
    48bc:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
    48c0:	f7ff ff22 	bl	4708 <remove_timeout>
    48c4:	f384 8811 	msr	BASEPRI, r4
    48c8:	f3bf 8f6f 	isb	sy
		t->fn(t);
    48cc:	6883      	ldr	r3, [r0, #8]
    48ce:	4798      	blx	r3
	__asm__ volatile(
    48d0:	f04f 0320 	mov.w	r3, #32
    48d4:	f3ef 8411 	mrs	r4, BASEPRI
    48d8:	f383 8812 	msr	BASEPRI_MAX, r3
    48dc:	f3bf 8f6f 	isb	sy
	return k;
    48e0:	e7bc      	b.n	485c <sys_clock_announce+0x24>
    48e2:	bf00      	nop
    48e4:	200009d0 	.word	0x200009d0
    48e8:	200000d8 	.word	0x200000d8
    48ec:	200002c8 	.word	0x200002c8

000048f0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    48f0:	b510      	push	{r4, lr}
    48f2:	f04f 0320 	mov.w	r3, #32
    48f6:	f3ef 8411 	mrs	r4, BASEPRI
    48fa:	f383 8812 	msr	BASEPRI_MAX, r3
    48fe:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    4902:	f7fe fabf 	bl	2e84 <sys_clock_elapsed>
    4906:	4a05      	ldr	r2, [pc, #20]	; (491c <sys_clock_tick_get+0x2c>)
    4908:	e9d2 3100 	ldrd	r3, r1, [r2]
    490c:	18c0      	adds	r0, r0, r3
    490e:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
    4912:	f384 8811 	msr	BASEPRI, r4
    4916:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    491a:	bd10      	pop	{r4, pc}
    491c:	200002c8 	.word	0x200002c8

00004920 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    4920:	4a02      	ldr	r2, [pc, #8]	; (492c <boot_banner+0xc>)
    4922:	4903      	ldr	r1, [pc, #12]	; (4930 <boot_banner+0x10>)
    4924:	4803      	ldr	r0, [pc, #12]	; (4934 <boot_banner+0x14>)
    4926:	f000 ba16 	b.w	4d56 <printk>
    492a:	bf00      	nop
    492c:	0000685c 	.word	0x0000685c
    4930:	00006829 	.word	0x00006829
    4934:	00006836 	.word	0x00006836

00004938 <nrf_cc3xx_platform_init_no_rng>:
    4938:	b510      	push	{r4, lr}
    493a:	4c0a      	ldr	r4, [pc, #40]	; (4964 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    493c:	6823      	ldr	r3, [r4, #0]
    493e:	b11b      	cbz	r3, 4948 <nrf_cc3xx_platform_init_no_rng+0x10>
    4940:	2301      	movs	r3, #1
    4942:	6023      	str	r3, [r4, #0]
    4944:	2000      	movs	r0, #0
    4946:	bd10      	pop	{r4, pc}
    4948:	f000 f8ce 	bl	4ae8 <CC_LibInitNoRng>
    494c:	2800      	cmp	r0, #0
    494e:	d0f7      	beq.n	4940 <nrf_cc3xx_platform_init_no_rng+0x8>
    4950:	3801      	subs	r0, #1
    4952:	2806      	cmp	r0, #6
    4954:	d803      	bhi.n	495e <nrf_cc3xx_platform_init_no_rng+0x26>
    4956:	4b04      	ldr	r3, [pc, #16]	; (4968 <nrf_cc3xx_platform_init_no_rng+0x30>)
    4958:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    495c:	bd10      	pop	{r4, pc}
    495e:	4803      	ldr	r0, [pc, #12]	; (496c <nrf_cc3xx_platform_init_no_rng+0x34>)
    4960:	bd10      	pop	{r4, pc}
    4962:	bf00      	nop
    4964:	200009d4 	.word	0x200009d4
    4968:	00005d04 	.word	0x00005d04
    496c:	ffff8ffe 	.word	0xffff8ffe

00004970 <nrf_cc3xx_platform_abort>:
    4970:	f3bf 8f4f 	dsb	sy
    4974:	4905      	ldr	r1, [pc, #20]	; (498c <nrf_cc3xx_platform_abort+0x1c>)
    4976:	4b06      	ldr	r3, [pc, #24]	; (4990 <nrf_cc3xx_platform_abort+0x20>)
    4978:	68ca      	ldr	r2, [r1, #12]
    497a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    497e:	4313      	orrs	r3, r2
    4980:	60cb      	str	r3, [r1, #12]
    4982:	f3bf 8f4f 	dsb	sy
    4986:	bf00      	nop
    4988:	e7fd      	b.n	4986 <nrf_cc3xx_platform_abort+0x16>
    498a:	bf00      	nop
    498c:	e000ed00 	.word	0xe000ed00
    4990:	05fa0004 	.word	0x05fa0004

00004994 <CC_PalAbort>:
    4994:	b410      	push	{r4}
    4996:	4b09      	ldr	r3, [pc, #36]	; (49bc <CC_PalAbort+0x28>)
    4998:	4909      	ldr	r1, [pc, #36]	; (49c0 <CC_PalAbort+0x2c>)
    499a:	4c0a      	ldr	r4, [pc, #40]	; (49c4 <CC_PalAbort+0x30>)
    499c:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    49a0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    49a4:	6849      	ldr	r1, [r1, #4]
    49a6:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    49aa:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    49ae:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    49b2:	2300      	movs	r3, #0
    49b4:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    49b8:	bc10      	pop	{r4}
    49ba:	4708      	bx	r1
    49bc:	5002b000 	.word	0x5002b000
    49c0:	200000e0 	.word	0x200000e0
    49c4:	5002a000 	.word	0x5002a000

000049c8 <nrf_cc3xx_platform_set_abort>:
    49c8:	e9d0 1200 	ldrd	r1, r2, [r0]
    49cc:	4b01      	ldr	r3, [pc, #4]	; (49d4 <nrf_cc3xx_platform_set_abort+0xc>)
    49ce:	e9c3 1200 	strd	r1, r2, [r3]
    49d2:	4770      	bx	lr
    49d4:	200000e0 	.word	0x200000e0

000049d8 <mutex_free>:
    49d8:	b510      	push	{r4, lr}
    49da:	4604      	mov	r4, r0
    49dc:	b130      	cbz	r0, 49ec <mutex_free+0x14>
    49de:	6863      	ldr	r3, [r4, #4]
    49e0:	06db      	lsls	r3, r3, #27
    49e2:	d502      	bpl.n	49ea <mutex_free+0x12>
    49e4:	2300      	movs	r3, #0
    49e6:	6023      	str	r3, [r4, #0]
    49e8:	6063      	str	r3, [r4, #4]
    49ea:	bd10      	pop	{r4, pc}
    49ec:	4b02      	ldr	r3, [pc, #8]	; (49f8 <mutex_free+0x20>)
    49ee:	4803      	ldr	r0, [pc, #12]	; (49fc <mutex_free+0x24>)
    49f0:	685b      	ldr	r3, [r3, #4]
    49f2:	4798      	blx	r3
    49f4:	e7f3      	b.n	49de <mutex_free+0x6>
    49f6:	bf00      	nop
    49f8:	200000e0 	.word	0x200000e0
    49fc:	00005d20 	.word	0x00005d20

00004a00 <mutex_lock>:
    4a00:	b1b0      	cbz	r0, 4a30 <mutex_lock+0x30>
    4a02:	6843      	ldr	r3, [r0, #4]
    4a04:	b193      	cbz	r3, 4a2c <mutex_lock+0x2c>
    4a06:	06db      	lsls	r3, r3, #27
    4a08:	d50e      	bpl.n	4a28 <mutex_lock+0x28>
    4a0a:	2301      	movs	r3, #1
    4a0c:	e850 2f00 	ldrex	r2, [r0]
    4a10:	4619      	mov	r1, r3
    4a12:	e840 1c00 	strex	ip, r1, [r0]
    4a16:	f09c 0f00 	teq	ip, #0
    4a1a:	d1f7      	bne.n	4a0c <mutex_lock+0xc>
    4a1c:	2a01      	cmp	r2, #1
    4a1e:	d0f5      	beq.n	4a0c <mutex_lock+0xc>
    4a20:	f3bf 8f5f 	dmb	sy
    4a24:	2000      	movs	r0, #0
    4a26:	4770      	bx	lr
    4a28:	4803      	ldr	r0, [pc, #12]	; (4a38 <mutex_lock+0x38>)
    4a2a:	4770      	bx	lr
    4a2c:	4803      	ldr	r0, [pc, #12]	; (4a3c <mutex_lock+0x3c>)
    4a2e:	4770      	bx	lr
    4a30:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    4a34:	4770      	bx	lr
    4a36:	bf00      	nop
    4a38:	ffff8fe9 	.word	0xffff8fe9
    4a3c:	ffff8fea 	.word	0xffff8fea

00004a40 <mutex_unlock>:
    4a40:	b168      	cbz	r0, 4a5e <mutex_unlock+0x1e>
    4a42:	6843      	ldr	r3, [r0, #4]
    4a44:	b13b      	cbz	r3, 4a56 <mutex_unlock+0x16>
    4a46:	06db      	lsls	r3, r3, #27
    4a48:	d507      	bpl.n	4a5a <mutex_unlock+0x1a>
    4a4a:	f3bf 8f5f 	dmb	sy
    4a4e:	2300      	movs	r3, #0
    4a50:	6003      	str	r3, [r0, #0]
    4a52:	4618      	mov	r0, r3
    4a54:	4770      	bx	lr
    4a56:	4803      	ldr	r0, [pc, #12]	; (4a64 <mutex_unlock+0x24>)
    4a58:	4770      	bx	lr
    4a5a:	4803      	ldr	r0, [pc, #12]	; (4a68 <mutex_unlock+0x28>)
    4a5c:	4770      	bx	lr
    4a5e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    4a62:	4770      	bx	lr
    4a64:	ffff8fea 	.word	0xffff8fea
    4a68:	ffff8fe9 	.word	0xffff8fe9

00004a6c <mutex_init>:
    4a6c:	b510      	push	{r4, lr}
    4a6e:	4604      	mov	r4, r0
    4a70:	b120      	cbz	r0, 4a7c <mutex_init+0x10>
    4a72:	2200      	movs	r2, #0
    4a74:	2311      	movs	r3, #17
    4a76:	6022      	str	r2, [r4, #0]
    4a78:	6063      	str	r3, [r4, #4]
    4a7a:	bd10      	pop	{r4, pc}
    4a7c:	4801      	ldr	r0, [pc, #4]	; (4a84 <mutex_init+0x18>)
    4a7e:	f7ff ff89 	bl	4994 <CC_PalAbort>
    4a82:	e7f6      	b.n	4a72 <mutex_init+0x6>
    4a84:	00005d48 	.word	0x00005d48

00004a88 <nrf_cc3xx_platform_set_mutexes>:
    4a88:	b570      	push	{r4, r5, r6, lr}
    4a8a:	e9d0 2300 	ldrd	r2, r3, [r0]
    4a8e:	4c13      	ldr	r4, [pc, #76]	; (4adc <nrf_cc3xx_platform_set_mutexes+0x54>)
    4a90:	4d13      	ldr	r5, [pc, #76]	; (4ae0 <nrf_cc3xx_platform_set_mutexes+0x58>)
    4a92:	6063      	str	r3, [r4, #4]
    4a94:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    4a98:	e9c4 3002 	strd	r3, r0, [r4, #8]
    4a9c:	6022      	str	r2, [r4, #0]
    4a9e:	4b11      	ldr	r3, [pc, #68]	; (4ae4 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    4aa0:	6808      	ldr	r0, [r1, #0]
    4aa2:	6018      	str	r0, [r3, #0]
    4aa4:	6848      	ldr	r0, [r1, #4]
    4aa6:	6058      	str	r0, [r3, #4]
    4aa8:	6888      	ldr	r0, [r1, #8]
    4aaa:	6098      	str	r0, [r3, #8]
    4aac:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
    4ab0:	60d8      	str	r0, [r3, #12]
    4ab2:	6119      	str	r1, [r3, #16]
    4ab4:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    4ab8:	06db      	lsls	r3, r3, #27
    4aba:	d50d      	bpl.n	4ad8 <nrf_cc3xx_platform_set_mutexes+0x50>
    4abc:	2300      	movs	r3, #0
    4abe:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
    4ac2:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
    4ac6:	f505 708a 	add.w	r0, r5, #276	; 0x114
    4aca:	4790      	blx	r2
    4acc:	6823      	ldr	r3, [r4, #0]
    4ace:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    4ad2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4ad6:	4718      	bx	r3
    4ad8:	bd70      	pop	{r4, r5, r6, pc}
    4ada:	bf00      	nop
    4adc:	200000f0 	.word	0x200000f0
    4ae0:	200009ec 	.word	0x200009ec
    4ae4:	20000100 	.word	0x20000100

00004ae8 <CC_LibInitNoRng>:
    4ae8:	b538      	push	{r3, r4, r5, lr}
    4aea:	f000 f82f 	bl	4b4c <CC_HalInit>
    4aee:	b120      	cbz	r0, 4afa <CC_LibInitNoRng+0x12>
    4af0:	2403      	movs	r4, #3
    4af2:	f000 f863 	bl	4bbc <CC_PalTerminate>
    4af6:	4620      	mov	r0, r4
    4af8:	bd38      	pop	{r3, r4, r5, pc}
    4afa:	f000 f831 	bl	4b60 <CC_PalInit>
    4afe:	b998      	cbnz	r0, 4b28 <CC_LibInitNoRng+0x40>
    4b00:	f000 f8ac 	bl	4c5c <CC_PalPowerSaveModeSelect>
    4b04:	b998      	cbnz	r0, 4b2e <CC_LibInitNoRng+0x46>
    4b06:	4d0f      	ldr	r5, [pc, #60]	; (4b44 <CC_LibInitNoRng+0x5c>)
    4b08:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    4b0c:	0e1b      	lsrs	r3, r3, #24
    4b0e:	2bf0      	cmp	r3, #240	; 0xf0
    4b10:	d108      	bne.n	4b24 <CC_LibInitNoRng+0x3c>
    4b12:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    4b16:	4b0c      	ldr	r3, [pc, #48]	; (4b48 <CC_LibInitNoRng+0x60>)
    4b18:	429a      	cmp	r2, r3
    4b1a:	d00a      	beq.n	4b32 <CC_LibInitNoRng+0x4a>
    4b1c:	2407      	movs	r4, #7
    4b1e:	f000 f817 	bl	4b50 <CC_HalTerminate>
    4b22:	e7e6      	b.n	4af2 <CC_LibInitNoRng+0xa>
    4b24:	2406      	movs	r4, #6
    4b26:	e7fa      	b.n	4b1e <CC_LibInitNoRng+0x36>
    4b28:	2404      	movs	r4, #4
    4b2a:	4620      	mov	r0, r4
    4b2c:	bd38      	pop	{r3, r4, r5, pc}
    4b2e:	2400      	movs	r4, #0
    4b30:	e7f5      	b.n	4b1e <CC_LibInitNoRng+0x36>
    4b32:	2001      	movs	r0, #1
    4b34:	f000 f892 	bl	4c5c <CC_PalPowerSaveModeSelect>
    4b38:	4604      	mov	r4, r0
    4b3a:	2800      	cmp	r0, #0
    4b3c:	d1f7      	bne.n	4b2e <CC_LibInitNoRng+0x46>
    4b3e:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    4b42:	e7d8      	b.n	4af6 <CC_LibInitNoRng+0xe>
    4b44:	5002b000 	.word	0x5002b000
    4b48:	20e00000 	.word	0x20e00000

00004b4c <CC_HalInit>:
    4b4c:	2000      	movs	r0, #0
    4b4e:	4770      	bx	lr

00004b50 <CC_HalTerminate>:
    4b50:	2000      	movs	r0, #0
    4b52:	4770      	bx	lr

00004b54 <CC_HalMaskInterrupt>:
    4b54:	4b01      	ldr	r3, [pc, #4]	; (4b5c <CC_HalMaskInterrupt+0x8>)
    4b56:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    4b5a:	4770      	bx	lr
    4b5c:	5002b000 	.word	0x5002b000

00004b60 <CC_PalInit>:
    4b60:	b510      	push	{r4, lr}
    4b62:	4811      	ldr	r0, [pc, #68]	; (4ba8 <CC_PalInit+0x48>)
    4b64:	f000 f848 	bl	4bf8 <CC_PalMutexCreate>
    4b68:	b100      	cbz	r0, 4b6c <CC_PalInit+0xc>
    4b6a:	bd10      	pop	{r4, pc}
    4b6c:	480f      	ldr	r0, [pc, #60]	; (4bac <CC_PalInit+0x4c>)
    4b6e:	f000 f843 	bl	4bf8 <CC_PalMutexCreate>
    4b72:	2800      	cmp	r0, #0
    4b74:	d1f9      	bne.n	4b6a <CC_PalInit+0xa>
    4b76:	4c0e      	ldr	r4, [pc, #56]	; (4bb0 <CC_PalInit+0x50>)
    4b78:	4620      	mov	r0, r4
    4b7a:	f000 f83d 	bl	4bf8 <CC_PalMutexCreate>
    4b7e:	2800      	cmp	r0, #0
    4b80:	d1f3      	bne.n	4b6a <CC_PalInit+0xa>
    4b82:	4b0c      	ldr	r3, [pc, #48]	; (4bb4 <CC_PalInit+0x54>)
    4b84:	480c      	ldr	r0, [pc, #48]	; (4bb8 <CC_PalInit+0x58>)
    4b86:	601c      	str	r4, [r3, #0]
    4b88:	f000 f836 	bl	4bf8 <CC_PalMutexCreate>
    4b8c:	4601      	mov	r1, r0
    4b8e:	2800      	cmp	r0, #0
    4b90:	d1eb      	bne.n	4b6a <CC_PalInit+0xa>
    4b92:	f000 f82d 	bl	4bf0 <CC_PalDmaInit>
    4b96:	4604      	mov	r4, r0
    4b98:	b108      	cbz	r0, 4b9e <CC_PalInit+0x3e>
    4b9a:	4620      	mov	r0, r4
    4b9c:	bd10      	pop	{r4, pc}
    4b9e:	f000 f83f 	bl	4c20 <CC_PalPowerSaveModeInit>
    4ba2:	4620      	mov	r0, r4
    4ba4:	e7fa      	b.n	4b9c <CC_PalInit+0x3c>
    4ba6:	bf00      	nop
    4ba8:	20000138 	.word	0x20000138
    4bac:	2000012c 	.word	0x2000012c
    4bb0:	20000134 	.word	0x20000134
    4bb4:	2000013c 	.word	0x2000013c
    4bb8:	20000130 	.word	0x20000130

00004bbc <CC_PalTerminate>:
    4bbc:	b508      	push	{r3, lr}
    4bbe:	4808      	ldr	r0, [pc, #32]	; (4be0 <CC_PalTerminate+0x24>)
    4bc0:	f000 f824 	bl	4c0c <CC_PalMutexDestroy>
    4bc4:	4807      	ldr	r0, [pc, #28]	; (4be4 <CC_PalTerminate+0x28>)
    4bc6:	f000 f821 	bl	4c0c <CC_PalMutexDestroy>
    4bca:	4807      	ldr	r0, [pc, #28]	; (4be8 <CC_PalTerminate+0x2c>)
    4bcc:	f000 f81e 	bl	4c0c <CC_PalMutexDestroy>
    4bd0:	4806      	ldr	r0, [pc, #24]	; (4bec <CC_PalTerminate+0x30>)
    4bd2:	f000 f81b 	bl	4c0c <CC_PalMutexDestroy>
    4bd6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4bda:	f000 b80b 	b.w	4bf4 <CC_PalDmaTerminate>
    4bde:	bf00      	nop
    4be0:	20000138 	.word	0x20000138
    4be4:	2000012c 	.word	0x2000012c
    4be8:	20000134 	.word	0x20000134
    4bec:	20000130 	.word	0x20000130

00004bf0 <CC_PalDmaInit>:
    4bf0:	2000      	movs	r0, #0
    4bf2:	4770      	bx	lr

00004bf4 <CC_PalDmaTerminate>:
    4bf4:	4770      	bx	lr
    4bf6:	bf00      	nop

00004bf8 <CC_PalMutexCreate>:
    4bf8:	b508      	push	{r3, lr}
    4bfa:	4b03      	ldr	r3, [pc, #12]	; (4c08 <CC_PalMutexCreate+0x10>)
    4bfc:	6802      	ldr	r2, [r0, #0]
    4bfe:	681b      	ldr	r3, [r3, #0]
    4c00:	6810      	ldr	r0, [r2, #0]
    4c02:	4798      	blx	r3
    4c04:	2000      	movs	r0, #0
    4c06:	bd08      	pop	{r3, pc}
    4c08:	200000f0 	.word	0x200000f0

00004c0c <CC_PalMutexDestroy>:
    4c0c:	b508      	push	{r3, lr}
    4c0e:	4b03      	ldr	r3, [pc, #12]	; (4c1c <CC_PalMutexDestroy+0x10>)
    4c10:	6802      	ldr	r2, [r0, #0]
    4c12:	685b      	ldr	r3, [r3, #4]
    4c14:	6810      	ldr	r0, [r2, #0]
    4c16:	4798      	blx	r3
    4c18:	2000      	movs	r0, #0
    4c1a:	bd08      	pop	{r3, pc}
    4c1c:	200000f0 	.word	0x200000f0

00004c20 <CC_PalPowerSaveModeInit>:
    4c20:	b570      	push	{r4, r5, r6, lr}
    4c22:	4c09      	ldr	r4, [pc, #36]	; (4c48 <CC_PalPowerSaveModeInit+0x28>)
    4c24:	4d09      	ldr	r5, [pc, #36]	; (4c4c <CC_PalPowerSaveModeInit+0x2c>)
    4c26:	6920      	ldr	r0, [r4, #16]
    4c28:	68ab      	ldr	r3, [r5, #8]
    4c2a:	4798      	blx	r3
    4c2c:	b118      	cbz	r0, 4c36 <CC_PalPowerSaveModeInit+0x16>
    4c2e:	4b08      	ldr	r3, [pc, #32]	; (4c50 <CC_PalPowerSaveModeInit+0x30>)
    4c30:	4808      	ldr	r0, [pc, #32]	; (4c54 <CC_PalPowerSaveModeInit+0x34>)
    4c32:	685b      	ldr	r3, [r3, #4]
    4c34:	4798      	blx	r3
    4c36:	4a08      	ldr	r2, [pc, #32]	; (4c58 <CC_PalPowerSaveModeInit+0x38>)
    4c38:	68eb      	ldr	r3, [r5, #12]
    4c3a:	6920      	ldr	r0, [r4, #16]
    4c3c:	2100      	movs	r1, #0
    4c3e:	6011      	str	r1, [r2, #0]
    4c40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4c44:	4718      	bx	r3
    4c46:	bf00      	nop
    4c48:	20000100 	.word	0x20000100
    4c4c:	200000f0 	.word	0x200000f0
    4c50:	200000e0 	.word	0x200000e0
    4c54:	00005d6c 	.word	0x00005d6c
    4c58:	200009e8 	.word	0x200009e8

00004c5c <CC_PalPowerSaveModeSelect>:
    4c5c:	b570      	push	{r4, r5, r6, lr}
    4c5e:	4d1b      	ldr	r5, [pc, #108]	; (4ccc <CC_PalPowerSaveModeSelect+0x70>)
    4c60:	4e1b      	ldr	r6, [pc, #108]	; (4cd0 <CC_PalPowerSaveModeSelect+0x74>)
    4c62:	4604      	mov	r4, r0
    4c64:	68b2      	ldr	r2, [r6, #8]
    4c66:	6928      	ldr	r0, [r5, #16]
    4c68:	4790      	blx	r2
    4c6a:	b9f8      	cbnz	r0, 4cac <CC_PalPowerSaveModeSelect+0x50>
    4c6c:	b15c      	cbz	r4, 4c86 <CC_PalPowerSaveModeSelect+0x2a>
    4c6e:	4c19      	ldr	r4, [pc, #100]	; (4cd4 <CC_PalPowerSaveModeSelect+0x78>)
    4c70:	6823      	ldr	r3, [r4, #0]
    4c72:	b1b3      	cbz	r3, 4ca2 <CC_PalPowerSaveModeSelect+0x46>
    4c74:	2b01      	cmp	r3, #1
    4c76:	d01b      	beq.n	4cb0 <CC_PalPowerSaveModeSelect+0x54>
    4c78:	3b01      	subs	r3, #1
    4c7a:	6023      	str	r3, [r4, #0]
    4c7c:	6928      	ldr	r0, [r5, #16]
    4c7e:	68f3      	ldr	r3, [r6, #12]
    4c80:	4798      	blx	r3
    4c82:	2000      	movs	r0, #0
    4c84:	bd70      	pop	{r4, r5, r6, pc}
    4c86:	4c13      	ldr	r4, [pc, #76]	; (4cd4 <CC_PalPowerSaveModeSelect+0x78>)
    4c88:	6821      	ldr	r1, [r4, #0]
    4c8a:	b941      	cbnz	r1, 4c9e <CC_PalPowerSaveModeSelect+0x42>
    4c8c:	4b12      	ldr	r3, [pc, #72]	; (4cd8 <CC_PalPowerSaveModeSelect+0x7c>)
    4c8e:	2201      	movs	r2, #1
    4c90:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    4c94:	4a11      	ldr	r2, [pc, #68]	; (4cdc <CC_PalPowerSaveModeSelect+0x80>)
    4c96:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    4c9a:	2b00      	cmp	r3, #0
    4c9c:	d1fb      	bne.n	4c96 <CC_PalPowerSaveModeSelect+0x3a>
    4c9e:	3101      	adds	r1, #1
    4ca0:	6021      	str	r1, [r4, #0]
    4ca2:	68f3      	ldr	r3, [r6, #12]
    4ca4:	6928      	ldr	r0, [r5, #16]
    4ca6:	4798      	blx	r3
    4ca8:	2000      	movs	r0, #0
    4caa:	bd70      	pop	{r4, r5, r6, pc}
    4cac:	480c      	ldr	r0, [pc, #48]	; (4ce0 <CC_PalPowerSaveModeSelect+0x84>)
    4cae:	bd70      	pop	{r4, r5, r6, pc}
    4cb0:	4a0a      	ldr	r2, [pc, #40]	; (4cdc <CC_PalPowerSaveModeSelect+0x80>)
    4cb2:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    4cb6:	2b00      	cmp	r3, #0
    4cb8:	d1fb      	bne.n	4cb2 <CC_PalPowerSaveModeSelect+0x56>
    4cba:	4a07      	ldr	r2, [pc, #28]	; (4cd8 <CC_PalPowerSaveModeSelect+0x7c>)
    4cbc:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    4cc0:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    4cc4:	f7ff ff46 	bl	4b54 <CC_HalMaskInterrupt>
    4cc8:	6823      	ldr	r3, [r4, #0]
    4cca:	e7d5      	b.n	4c78 <CC_PalPowerSaveModeSelect+0x1c>
    4ccc:	20000100 	.word	0x20000100
    4cd0:	200000f0 	.word	0x200000f0
    4cd4:	200009e8 	.word	0x200009e8
    4cd8:	5002a000 	.word	0x5002a000
    4cdc:	5002b000 	.word	0x5002b000
    4ce0:	ffff8fe9 	.word	0xffff8fe9

00004ce4 <k_msleep.isra.0>:
static inline int32_t k_msleep(int32_t ms)
    4ce4:	4601      	mov	r1, r0
    4ce6:	f240 30e7 	movw	r0, #999	; 0x3e7
    4cea:	b508      	push	{r3, lr}
    4cec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4cf0:	2300      	movs	r3, #0
    4cf2:	eb00 30c1 	add.w	r0, r0, r1, lsl #15
    4cf6:	1449      	asrs	r1, r1, #17
    4cf8:	f7fb fa02 	bl	100 <__aeabi_uldivmod>
}
    4cfc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_sleep(timeout);
    4d00:	f7ff bc44 	b.w	458c <z_impl_k_sleep>

00004d04 <main>:
            break;
        }
    }
}

int main(void) {
    4d04:	b508      	push	{r3, lr}
    config();
    4d06:	f7fb fc03 	bl	510 <config>
    k_msleep(SLEEP_TIME_MS*10);
    4d0a:	f640 30b8 	movw	r0, #3000	; 0xbb8
    4d0e:	f7ff ffe9 	bl	4ce4 <k_msleep.isra.0>
    StateMachine();
    4d12:	f7fb fcad 	bl	670 <StateMachine>

00004d16 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    4d16:	4603      	mov	r3, r0
    4d18:	b158      	cbz	r0, 4d32 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    4d1a:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    4d1c:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    4d20:	2a01      	cmp	r2, #1
    4d22:	d003      	beq.n	4d2c <sys_notify_validate+0x16>
    4d24:	2a03      	cmp	r2, #3
    4d26:	d104      	bne.n	4d32 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    4d28:	6802      	ldr	r2, [r0, #0]
    4d2a:	b112      	cbz	r2, 4d32 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    4d2c:	2000      	movs	r0, #0
    4d2e:	6098      	str	r0, [r3, #8]
    4d30:	4770      	bx	lr
    4d32:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    4d36:	4770      	bx	lr

00004d38 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    4d38:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    4d3a:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    4d3c:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    4d40:	2a03      	cmp	r2, #3
    4d42:	f04f 0200 	mov.w	r2, #0
{
    4d46:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    4d48:	bf0c      	ite	eq
    4d4a:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    4d4c:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    4d4e:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    4d50:	4770      	bx	lr

00004d52 <arch_printk_char_out>:
}
    4d52:	2000      	movs	r0, #0
    4d54:	4770      	bx	lr

00004d56 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    4d56:	b40f      	push	{r0, r1, r2, r3}
    4d58:	b507      	push	{r0, r1, r2, lr}
    4d5a:	a904      	add	r1, sp, #16
    4d5c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    4d60:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    4d62:	f7fb feff 	bl	b64 <vprintk>

	va_end(ap);
}
    4d66:	b003      	add	sp, #12
    4d68:	f85d eb04 	ldr.w	lr, [sp], #4
    4d6c:	b004      	add	sp, #16
    4d6e:	4770      	bx	lr

00004d70 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4d70:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    4d72:	f013 0307 	ands.w	r3, r3, #7
    4d76:	d105      	bne.n	4d84 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    4d78:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    4d7a:	2b00      	cmp	r3, #0
    4d7c:	bf0c      	ite	eq
    4d7e:	2000      	moveq	r0, #0
    4d80:	2003      	movne	r0, #3
    4d82:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    4d84:	2b02      	cmp	r3, #2
    4d86:	d105      	bne.n	4d94 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    4d88:	8b40      	ldrh	r0, [r0, #26]
    4d8a:	fab0 f080 	clz	r0, r0
    4d8e:	0940      	lsrs	r0, r0, #5
    4d90:	0080      	lsls	r0, r0, #2
    4d92:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    4d94:	2b01      	cmp	r3, #1
    4d96:	d105      	bne.n	4da4 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    4d98:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    4d9a:	2b00      	cmp	r3, #0
    4d9c:	bf0c      	ite	eq
    4d9e:	2000      	moveq	r0, #0
    4da0:	2005      	movne	r0, #5
    4da2:	4770      	bx	lr
	int evt = EVT_NOP;
    4da4:	2000      	movs	r0, #0
}
    4da6:	4770      	bx	lr

00004da8 <validate_args>:
{
    4da8:	b510      	push	{r4, lr}
    4daa:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    4dac:	b100      	cbz	r0, 4db0 <validate_args+0x8>
    4dae:	b911      	cbnz	r1, 4db6 <validate_args+0xe>
		return -EINVAL;
    4db0:	f06f 0015 	mvn.w	r0, #21
}
    4db4:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    4db6:	1d08      	adds	r0, r1, #4
    4db8:	f7ff ffad 	bl	4d16 <sys_notify_validate>
	if ((rv == 0)
    4dbc:	2800      	cmp	r0, #0
    4dbe:	d1f9      	bne.n	4db4 <validate_args+0xc>
	    && ((cli->notify.flags
    4dc0:	68a3      	ldr	r3, [r4, #8]
    4dc2:	2b03      	cmp	r3, #3
    4dc4:	d9f6      	bls.n	4db4 <validate_args+0xc>
    4dc6:	e7f3      	b.n	4db0 <validate_args+0x8>

00004dc8 <notify_one>:
{
    4dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4dcc:	460d      	mov	r5, r1
    4dce:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    4dd0:	4619      	mov	r1, r3
    4dd2:	1d28      	adds	r0, r5, #4
{
    4dd4:	4690      	mov	r8, r2
    4dd6:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    4dd8:	f7ff ffae 	bl	4d38 <sys_notify_finalize>
	if (cb) {
    4ddc:	4604      	mov	r4, r0
    4dde:	b138      	cbz	r0, 4df0 <notify_one+0x28>
		cb(mgr, cli, state, res);
    4de0:	4633      	mov	r3, r6
    4de2:	4642      	mov	r2, r8
    4de4:	4629      	mov	r1, r5
    4de6:	4638      	mov	r0, r7
    4de8:	46a4      	mov	ip, r4
}
    4dea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    4dee:	4760      	bx	ip
}
    4df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004df4 <transition_complete>:
{
    4df4:	b410      	push	{r4}
	__asm__ volatile(
    4df6:	f04f 0420 	mov.w	r4, #32
    4dfa:	f3ef 8211 	mrs	r2, BASEPRI
    4dfe:	f384 8812 	msr	BASEPRI_MAX, r4
    4e02:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    4e06:	6141      	str	r1, [r0, #20]
}
    4e08:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    4e0a:	2101      	movs	r1, #1
    4e0c:	f7fb beb8 	b.w	b80 <process_event>

00004e10 <onoff_manager_init>:
{
    4e10:	b538      	push	{r3, r4, r5, lr}
    4e12:	460c      	mov	r4, r1
	if ((mgr == NULL)
    4e14:	4605      	mov	r5, r0
    4e16:	b158      	cbz	r0, 4e30 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    4e18:	b151      	cbz	r1, 4e30 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    4e1a:	680b      	ldr	r3, [r1, #0]
    4e1c:	b143      	cbz	r3, 4e30 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    4e1e:	684b      	ldr	r3, [r1, #4]
    4e20:	b133      	cbz	r3, 4e30 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    4e22:	221c      	movs	r2, #28
    4e24:	2100      	movs	r1, #0
    4e26:	f000 f900 	bl	502a <memset>
    4e2a:	612c      	str	r4, [r5, #16]
	return 0;
    4e2c:	2000      	movs	r0, #0
}
    4e2e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    4e30:	f06f 0015 	mvn.w	r0, #21
    4e34:	e7fb      	b.n	4e2e <onoff_manager_init+0x1e>

00004e36 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    4e36:	b570      	push	{r4, r5, r6, lr}
    4e38:	4605      	mov	r5, r0
    4e3a:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    4e3c:	f7ff ffb4 	bl	4da8 <validate_args>

	if (rv < 0) {
    4e40:	1e04      	subs	r4, r0, #0
    4e42:	db15      	blt.n	4e70 <onoff_request+0x3a>
    4e44:	f04f 0320 	mov.w	r3, #32
    4e48:	f3ef 8211 	mrs	r2, BASEPRI
    4e4c:	f383 8812 	msr	BASEPRI_MAX, r3
    4e50:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    4e54:	8b6b      	ldrh	r3, [r5, #26]
    4e56:	8b2c      	ldrh	r4, [r5, #24]
    4e58:	f64f 71ff 	movw	r1, #65535	; 0xffff
    4e5c:	428b      	cmp	r3, r1
    4e5e:	f004 0407 	and.w	r4, r4, #7
    4e62:	d107      	bne.n	4e74 <onoff_request+0x3e>
	__asm__ volatile(
    4e64:	f382 8811 	msr	BASEPRI, r2
    4e68:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
    4e6c:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    4e70:	4620      	mov	r0, r4
    4e72:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    4e74:	2c02      	cmp	r4, #2
    4e76:	d10c      	bne.n	4e92 <onoff_request+0x5c>
		mgr->refs += 1U;
    4e78:	3301      	adds	r3, #1
    4e7a:	836b      	strh	r3, [r5, #26]
    4e7c:	f382 8811 	msr	BASEPRI, r2
    4e80:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
    4e84:	2300      	movs	r3, #0
    4e86:	4622      	mov	r2, r4
    4e88:	4631      	mov	r1, r6
    4e8a:	4628      	mov	r0, r5
    4e8c:	f7ff ff9c 	bl	4dc8 <notify_one>
    4e90:	e7ee      	b.n	4e70 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
    4e92:	2c06      	cmp	r4, #6
    4e94:	d814      	bhi.n	4ec0 <onoff_request+0x8a>
    4e96:	e8df f004 	tbb	[pc, r4]
    4e9a:	1304      	.short	0x1304
    4e9c:	1a041313 	.word	0x1a041313
    4ea0:	04          	.byte	0x04
    4ea1:	00          	.byte	0x00
	parent->next = child;
    4ea2:	2300      	movs	r3, #0
    4ea4:	6033      	str	r3, [r6, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    4ea6:	686b      	ldr	r3, [r5, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    4ea8:	b93b      	cbnz	r3, 4eba <onoff_request+0x84>
	list->head = node;
    4eaa:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
    4eae:	b9ac      	cbnz	r4, 4edc <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
    4eb0:	2102      	movs	r1, #2
    4eb2:	4628      	mov	r0, r5
    4eb4:	f7fb fe64 	bl	b80 <process_event>
    4eb8:	e7da      	b.n	4e70 <onoff_request+0x3a>
	parent->next = child;
    4eba:	601e      	str	r6, [r3, #0]
	list->tail = node;
    4ebc:	606e      	str	r6, [r5, #4]
}
    4ebe:	e7f6      	b.n	4eae <onoff_request+0x78>
    4ec0:	f382 8811 	msr	BASEPRI, r2
    4ec4:	f3bf 8f6f 	isb	sy
		rv = -EIO;
    4ec8:	f06f 0404 	mvn.w	r4, #4
    4ecc:	e7d0      	b.n	4e70 <onoff_request+0x3a>
    4ece:	f382 8811 	msr	BASEPRI, r2
    4ed2:	f3bf 8f6f 	isb	sy
    4ed6:	f06f 0485 	mvn.w	r4, #133	; 0x85
    4eda:	e7c9      	b.n	4e70 <onoff_request+0x3a>
    4edc:	f382 8811 	msr	BASEPRI, r2
    4ee0:	f3bf 8f6f 	isb	sy
		if (notify) {
    4ee4:	e7c4      	b.n	4e70 <onoff_request+0x3a>

00004ee6 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    4ee6:	4604      	mov	r4, r0
    4ee8:	b508      	push	{r3, lr}
    4eea:	4608      	mov	r0, r1
    4eec:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    4eee:	461a      	mov	r2, r3
    4ef0:	47a0      	blx	r4
	return z_impl_z_current_get();
    4ef2:	f7ff fb65 	bl	45c0 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    4ef6:	f7fc ffe1 	bl	1ebc <z_impl_k_thread_abort>

00004efa <encode_uint>:
{
    4efa:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4efe:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    4f00:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    4f02:	2b6f      	cmp	r3, #111	; 0x6f
{
    4f04:	4680      	mov	r8, r0
    4f06:	460f      	mov	r7, r1
    4f08:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    4f0a:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    4f0e:	d029      	beq.n	4f64 <encode_uint+0x6a>
    4f10:	d824      	bhi.n	4f5c <encode_uint+0x62>
		return 10;
    4f12:	2b58      	cmp	r3, #88	; 0x58
    4f14:	bf0c      	ite	eq
    4f16:	2610      	moveq	r6, #16
    4f18:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
    4f1a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    4f1e:	4632      	mov	r2, r6
    4f20:	2300      	movs	r3, #0
    4f22:	4640      	mov	r0, r8
    4f24:	4639      	mov	r1, r7
    4f26:	f7fb f8eb 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4f2a:	2a09      	cmp	r2, #9
    4f2c:	b2d4      	uxtb	r4, r2
    4f2e:	d81e      	bhi.n	4f6e <encode_uint+0x74>
    4f30:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    4f32:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4f34:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    4f36:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4f3a:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    4f3e:	d301      	bcc.n	4f44 <encode_uint+0x4a>
    4f40:	45d1      	cmp	r9, sl
    4f42:	d811      	bhi.n	4f68 <encode_uint+0x6e>
	if (conv->flag_hash) {
    4f44:	782b      	ldrb	r3, [r5, #0]
    4f46:	069b      	lsls	r3, r3, #26
    4f48:	d505      	bpl.n	4f56 <encode_uint+0x5c>
		if (radix == 8) {
    4f4a:	2e08      	cmp	r6, #8
    4f4c:	d115      	bne.n	4f7a <encode_uint+0x80>
			conv->altform_0 = true;
    4f4e:	78ab      	ldrb	r3, [r5, #2]
    4f50:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    4f54:	70ab      	strb	r3, [r5, #2]
}
    4f56:	4648      	mov	r0, r9
    4f58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    4f5c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    4f60:	2b70      	cmp	r3, #112	; 0x70
    4f62:	e7d7      	b.n	4f14 <encode_uint+0x1a>
	switch (specifier) {
    4f64:	2608      	movs	r6, #8
    4f66:	e7d8      	b.n	4f1a <encode_uint+0x20>
		value /= radix;
    4f68:	4680      	mov	r8, r0
    4f6a:	460f      	mov	r7, r1
    4f6c:	e7d7      	b.n	4f1e <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4f6e:	f1bb 0f19 	cmp.w	fp, #25
    4f72:	bf94      	ite	ls
    4f74:	3437      	addls	r4, #55	; 0x37
    4f76:	3457      	addhi	r4, #87	; 0x57
    4f78:	e7db      	b.n	4f32 <encode_uint+0x38>
		} else if (radix == 16) {
    4f7a:	2e10      	cmp	r6, #16
    4f7c:	d1eb      	bne.n	4f56 <encode_uint+0x5c>
			conv->altform_0c = true;
    4f7e:	78ab      	ldrb	r3, [r5, #2]
    4f80:	f043 0310 	orr.w	r3, r3, #16
    4f84:	e7e6      	b.n	4f54 <encode_uint+0x5a>

00004f86 <outs>:
{
    4f86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4f8a:	4607      	mov	r7, r0
    4f8c:	4688      	mov	r8, r1
    4f8e:	4615      	mov	r5, r2
    4f90:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    4f92:	4614      	mov	r4, r2
    4f94:	42b4      	cmp	r4, r6
    4f96:	d305      	bcc.n	4fa4 <outs+0x1e>
    4f98:	b10e      	cbz	r6, 4f9e <outs+0x18>
	return (int)count;
    4f9a:	1b60      	subs	r0, r4, r5
    4f9c:	e008      	b.n	4fb0 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    4f9e:	7823      	ldrb	r3, [r4, #0]
    4fa0:	2b00      	cmp	r3, #0
    4fa2:	d0fa      	beq.n	4f9a <outs+0x14>
		int rc = out((int)*sp++, ctx);
    4fa4:	f814 0b01 	ldrb.w	r0, [r4], #1
    4fa8:	4641      	mov	r1, r8
    4faa:	47b8      	blx	r7
		if (rc < 0) {
    4fac:	2800      	cmp	r0, #0
    4fae:	daf1      	bge.n	4f94 <outs+0xe>
}
    4fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004fb4 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    4fb4:	4770      	bx	lr

00004fb6 <abort_function>:
{
    4fb6:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    4fb8:	2000      	movs	r0, #0
    4fba:	f7fc faa1 	bl	1500 <sys_reboot>

00004fbe <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    4fbe:	f000 bb41 	b.w	5644 <z_fatal_error>

00004fc2 <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    4fc2:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    4fc4:	6800      	ldr	r0, [r0, #0]
    4fc6:	f000 bb3d 	b.w	5644 <z_fatal_error>

00004fca <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    4fca:	2100      	movs	r1, #0
    4fcc:	2001      	movs	r0, #1
    4fce:	f7ff bff6 	b.w	4fbe <z_arm_fatal_error>

00004fd2 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    4fd2:	b508      	push	{r3, lr}
	handler();
    4fd4:	f7fc fd1a 	bl	1a0c <z_SysNmiOnReset>
	z_arm_int_exit();
}
    4fd8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    4fdc:	f7fc bdf2 	b.w	1bc4 <z_arm_exc_exit>

00004fe0 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    4fe0:	3901      	subs	r1, #1
    4fe2:	4603      	mov	r3, r0
    4fe4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    4fe8:	b90a      	cbnz	r2, 4fee <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    4fea:	701a      	strb	r2, [r3, #0]

	return dest;
}
    4fec:	4770      	bx	lr
		*d = *s;
    4fee:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    4ff2:	e7f7      	b.n	4fe4 <strcpy+0x4>

00004ff4 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    4ff4:	4603      	mov	r3, r0
	size_t n = 0;
    4ff6:	2000      	movs	r0, #0

	while (*s != '\0') {
    4ff8:	5c1a      	ldrb	r2, [r3, r0]
    4ffa:	b902      	cbnz	r2, 4ffe <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    4ffc:	4770      	bx	lr
		n++;
    4ffe:	3001      	adds	r0, #1
    5000:	e7fa      	b.n	4ff8 <strlen+0x4>

00005002 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    5002:	4603      	mov	r3, r0
	size_t n = 0;
    5004:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    5006:	5c1a      	ldrb	r2, [r3, r0]
    5008:	b10a      	cbz	r2, 500e <strnlen+0xc>
    500a:	4288      	cmp	r0, r1
    500c:	d100      	bne.n	5010 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    500e:	4770      	bx	lr
		n++;
    5010:	3001      	adds	r0, #1
    5012:	e7f8      	b.n	5006 <strnlen+0x4>

00005014 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    5014:	b510      	push	{r4, lr}
    5016:	1e43      	subs	r3, r0, #1
    5018:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    501a:	4291      	cmp	r1, r2
    501c:	d100      	bne.n	5020 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    501e:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    5020:	f811 4b01 	ldrb.w	r4, [r1], #1
    5024:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    5028:	e7f7      	b.n	501a <memcpy+0x6>

0000502a <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    502a:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    502c:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    502e:	4603      	mov	r3, r0
	while (n > 0) {
    5030:	4293      	cmp	r3, r2
    5032:	d100      	bne.n	5036 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    5034:	4770      	bx	lr
		*(d_byte++) = c_byte;
    5036:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    503a:	e7f9      	b.n	5030 <memset+0x6>

0000503c <_stdout_hook_default>:
}
    503c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5040:	4770      	bx	lr

00005042 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    5042:	2806      	cmp	r0, #6
    5044:	d108      	bne.n	5058 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    5046:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    504a:	2201      	movs	r2, #1
    504c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    5050:	f3bf 8f4f 	dsb	sy
        __WFE();
    5054:	bf20      	wfe
    while (true)
    5056:	e7fd      	b.n	5054 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    5058:	4770      	bx	lr

0000505a <pm_state_exit_post_ops>:
    505a:	2300      	movs	r3, #0
    505c:	f383 8811 	msr	BASEPRI, r3
    5060:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    5064:	4770      	bx	lr

00005066 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    5066:	6903      	ldr	r3, [r0, #16]
    5068:	b2c9      	uxtb	r1, r1
    506a:	220c      	movs	r2, #12
    506c:	fb01 3302 	mla	r3, r1, r2, r3
    5070:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    5072:	f000 0007 	and.w	r0, r0, #7
    5076:	4770      	bx	lr

00005078 <set_on_state>:
	__asm__ volatile(
    5078:	f04f 0320 	mov.w	r3, #32
    507c:	f3ef 8211 	mrs	r2, BASEPRI
    5080:	f383 8812 	msr	BASEPRI_MAX, r3
    5084:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    5088:	6803      	ldr	r3, [r0, #0]
    508a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    508e:	f043 0302 	orr.w	r3, r3, #2
    5092:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    5094:	f382 8811 	msr	BASEPRI, r2
    5098:	f3bf 8f6f 	isb	sy
}
    509c:	4770      	bx	lr

0000509e <stop>:
{
    509e:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
    50a0:	6903      	ldr	r3, [r0, #16]
	return &data->subsys[type];
    50a2:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    50a4:	f04f 0420 	mov.w	r4, #32
    50a8:	f3ef 8511 	mrs	r5, BASEPRI
    50ac:	f384 8812 	msr	BASEPRI_MAX, r4
    50b0:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    50b4:	260c      	movs	r6, #12
    50b6:	fb06 3401 	mla	r4, r6, r1, r3
    50ba:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    50bc:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    50c0:	d008      	beq.n	50d4 <stop+0x36>
    50c2:	42a2      	cmp	r2, r4
    50c4:	d006      	beq.n	50d4 <stop+0x36>
	__asm__ volatile(
    50c6:	f385 8811 	msr	BASEPRI, r5
    50ca:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    50ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    50d2:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    50d4:	fb06 3301 	mla	r3, r6, r1, r3
    50d8:	2201      	movs	r2, #1
    50da:	641a      	str	r2, [r3, #64]	; 0x40
    50dc:	f385 8811 	msr	BASEPRI, r5
    50e0:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    50e4:	6843      	ldr	r3, [r0, #4]
    50e6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    50ea:	685b      	ldr	r3, [r3, #4]
    50ec:	4798      	blx	r3
	return 0;
    50ee:	2000      	movs	r0, #0
    50f0:	e7ef      	b.n	50d2 <stop+0x34>

000050f2 <api_stop>:
	return stop(dev, subsys, CTX_API);
    50f2:	2280      	movs	r2, #128	; 0x80
    50f4:	f7ff bfd3 	b.w	509e <stop>

000050f8 <async_start>:
{
    50f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    50fa:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    50fc:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    50fe:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    5100:	f04f 0520 	mov.w	r5, #32
    5104:	f3ef 8611 	mrs	r6, BASEPRI
    5108:	f385 8812 	msr	BASEPRI_MAX, r5
    510c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    5110:	250c      	movs	r5, #12
    5112:	fb05 4401 	mla	r4, r5, r1, r4
    5116:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    5118:	f005 0c07 	and.w	ip, r5, #7
    511c:	f1bc 0f01 	cmp.w	ip, #1
    5120:	d10c      	bne.n	513c <async_start+0x44>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    5122:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
    5124:	f386 8811 	msr	BASEPRI, r6
    5128:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    512c:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    5130:	6843      	ldr	r3, [r0, #4]
    5132:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
    5136:	4798      	blx	r3
	return 0;
    5138:	2000      	movs	r0, #0
}
    513a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    513c:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    5140:	42af      	cmp	r7, r5
    5142:	f386 8811 	msr	BASEPRI, r6
    5146:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    514a:	bf0c      	ite	eq
    514c:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    5150:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    5154:	e7f1      	b.n	513a <async_start+0x42>

00005156 <api_start>:
{
    5156:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    5158:	2480      	movs	r4, #128	; 0x80
    515a:	9400      	str	r4, [sp, #0]
    515c:	f7ff ffcc 	bl	50f8 <async_start>
}
    5160:	b002      	add	sp, #8
    5162:	bd10      	pop	{r4, pc}

00005164 <onoff_started_callback>:
	return &data->mgr[type];
    5164:	6900      	ldr	r0, [r0, #16]
{
    5166:	b410      	push	{r4}
	return &data->mgr[type];
    5168:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    516a:	241c      	movs	r4, #28
    516c:	fb03 0004 	mla	r0, r3, r4, r0
    5170:	2100      	movs	r1, #0
}
    5172:	bc10      	pop	{r4}
	notify(mgr, 0);
    5174:	4710      	bx	r2

00005176 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    5176:	2000      	movs	r0, #0
    5178:	f000 b9bc 	b.w	54f4 <nrfx_clock_start>

0000517c <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    517c:	2000      	movs	r0, #0
    517e:	f000 b9f5 	b.w	556c <nrfx_clock_stop>

00005182 <blocking_start_callback>:
{
    5182:	4610      	mov	r0, r2
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    5184:	f7fe beee 	b.w	3f64 <z_impl_k_sem_give>

00005188 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5188:	6843      	ldr	r3, [r0, #4]
    518a:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    518c:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    5190:	600b      	str	r3, [r1, #0]
}
    5192:	2000      	movs	r0, #0
    5194:	4770      	bx	lr

00005196 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5196:	6843      	ldr	r3, [r0, #4]
    5198:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    519a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    519e:	4042      	eors	r2, r0
    51a0:	400a      	ands	r2, r1
    51a2:	4042      	eors	r2, r0
    p_reg->OUT = value;
    51a4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    51a8:	2000      	movs	r0, #0
    51aa:	4770      	bx	lr

000051ac <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    51ac:	6843      	ldr	r3, [r0, #4]
    51ae:	685b      	ldr	r3, [r3, #4]
}
    51b0:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    51b2:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    51b6:	4770      	bx	lr

000051b8 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    51b8:	6843      	ldr	r3, [r0, #4]
    51ba:	685b      	ldr	r3, [r3, #4]
}
    51bc:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    51be:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    51c2:	4770      	bx	lr

000051c4 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    51c4:	6843      	ldr	r3, [r0, #4]
    51c6:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    51c8:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    51cc:	404b      	eors	r3, r1
    p_reg->OUT = value;
    51ce:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    51d2:	2000      	movs	r0, #0
    51d4:	4770      	bx	lr

000051d6 <gpio_nrfx_manage_callback>:
	return port->data;
    51d6:	6903      	ldr	r3, [r0, #16]
	return list->head;
    51d8:	6858      	ldr	r0, [r3, #4]
{
    51da:	b510      	push	{r4, lr}
	if (!sys_slist_is_empty(callbacks)) {
    51dc:	b148      	cbz	r0, 51f2 <gpio_nrfx_manage_callback+0x1c>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    51de:	4288      	cmp	r0, r1
    51e0:	d113      	bne.n	520a <gpio_nrfx_manage_callback+0x34>
Z_GENLIST_REMOVE(slist, snode)
    51e2:	689c      	ldr	r4, [r3, #8]
	return node->next;
    51e4:	6808      	ldr	r0, [r1, #0]
	list->head = node;
    51e6:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    51e8:	42a1      	cmp	r1, r4
    51ea:	d100      	bne.n	51ee <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    51ec:	6098      	str	r0, [r3, #8]
	parent->next = child;
    51ee:	2000      	movs	r0, #0
    51f0:	6008      	str	r0, [r1, #0]
	if (set) {
    51f2:	b97a      	cbnz	r2, 5214 <gpio_nrfx_manage_callback+0x3e>
	return 0;
    51f4:	2000      	movs	r0, #0
}
    51f6:	bd10      	pop	{r4, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    51f8:	4281      	cmp	r1, r0
    51fa:	d106      	bne.n	520a <gpio_nrfx_manage_callback+0x34>
	return node->next;
    51fc:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
    51fe:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    5200:	6898      	ldr	r0, [r3, #8]
    5202:	4281      	cmp	r1, r0
    5204:	d1f3      	bne.n	51ee <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    5206:	609c      	str	r4, [r3, #8]
}
    5208:	e7f1      	b.n	51ee <gpio_nrfx_manage_callback+0x18>
	return node->next;
    520a:	4604      	mov	r4, r0
    520c:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    520e:	2800      	cmp	r0, #0
    5210:	d1f2      	bne.n	51f8 <gpio_nrfx_manage_callback+0x22>
			if (!set) {
    5212:	b13a      	cbz	r2, 5224 <gpio_nrfx_manage_callback+0x4e>
	parent->next = child;
    5214:	685a      	ldr	r2, [r3, #4]
    5216:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    5218:	689a      	ldr	r2, [r3, #8]
	list->head = node;
    521a:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    521c:	2a00      	cmp	r2, #0
    521e:	d1e9      	bne.n	51f4 <gpio_nrfx_manage_callback+0x1e>
	list->tail = node;
    5220:	6099      	str	r1, [r3, #8]
}
    5222:	e7e7      	b.n	51f4 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
    5224:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    5228:	e7e5      	b.n	51f6 <gpio_nrfx_manage_callback+0x20>

0000522a <uarte_nrfx_config_get>:
	*cfg = data->uart_config;
    522a:	6902      	ldr	r2, [r0, #16]
{
    522c:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    522e:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    5232:	e883 0003 	stmia.w	r3, {r0, r1}
}
    5236:	2000      	movs	r0, #0
    5238:	4770      	bx	lr

0000523a <uarte_nrfx_err_check>:
	return config->uarte_regs;
    523a:	6843      	ldr	r3, [r0, #4]
    523c:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    523e:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    5242:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    5246:	4770      	bx	lr

00005248 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    5248:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    524a:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    524c:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    524e:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    5252:	b148      	cbz	r0, 5268 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
    5254:	7c52      	ldrb	r2, [r2, #17]
    5256:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5258:	2000      	movs	r0, #0
    525a:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    525e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5262:	2201      	movs	r2, #1
    5264:	601a      	str	r2, [r3, #0]
	return 0;
    5266:	4770      	bx	lr
		return -1;
    5268:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    526c:	4770      	bx	lr

0000526e <is_tx_ready.isra.0>:
	return config->uarte_regs;
    526e:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    5270:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5272:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    5276:	b940      	cbnz	r0, 528a <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    5278:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    527a:	079b      	lsls	r3, r3, #30
    527c:	d406      	bmi.n	528c <is_tx_ready.isra.0+0x1e>
    527e:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    5282:	3800      	subs	r0, #0
    5284:	bf18      	it	ne
    5286:	2001      	movne	r0, #1
    5288:	4770      	bx	lr
    528a:	2001      	movs	r0, #1
}
    528c:	4770      	bx	lr

0000528e <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
    528e:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    5290:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    5292:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    5296:	05c9      	lsls	r1, r1, #23
    5298:	d518      	bpl.n	52cc <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    529a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    529e:	b1a9      	cbz	r1, 52cc <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    52a0:	f04f 0020 	mov.w	r0, #32
    52a4:	f3ef 8111 	mrs	r1, BASEPRI
    52a8:	f380 8812 	msr	BASEPRI_MAX, r0
    52ac:	f3bf 8f6f 	isb	sy
    52b0:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    52b4:	b130      	cbz	r0, 52c4 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    52b6:	2000      	movs	r0, #0
    52b8:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    52bc:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    52c0:	2001      	movs	r0, #1
    52c2:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
    52c4:	f381 8811 	msr	BASEPRI, r1
    52c8:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    52cc:	6852      	ldr	r2, [r2, #4]
    52ce:	06d2      	lsls	r2, r2, #27
    52d0:	d515      	bpl.n	52fe <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
    52d2:	f04f 0120 	mov.w	r1, #32
    52d6:	f3ef 8211 	mrs	r2, BASEPRI
    52da:	f381 8812 	msr	BASEPRI_MAX, r1
    52de:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    52e2:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    52e6:	b111      	cbz	r1, 52ee <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    52e8:	2100      	movs	r1, #0
    52ea:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    52ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    52f2:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    52f6:	f382 8811 	msr	BASEPRI, r2
    52fa:	f3bf 8f6f 	isb	sy
}
    52fe:	4770      	bx	lr

00005300 <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    5300:	b510      	push	{r4, lr}
    5302:	2200      	movs	r2, #0
    5304:	4604      	mov	r4, r0
    5306:	2101      	movs	r1, #1
    5308:	2028      	movs	r0, #40	; 0x28
    530a:	f7fc fb67 	bl	19dc <z_arm_irq_priority_set>
    530e:	2028      	movs	r0, #40	; 0x28
    5310:	f7fc fb48 	bl	19a4 <arch_irq_enable>
    5314:	4620      	mov	r0, r4
    5316:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    531a:	f7fd ba9f 	b.w	285c <uarte_instance_init.constprop.0>

0000531e <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
    531e:	b510      	push	{r4, lr}
    5320:	2200      	movs	r2, #0
    5322:	4604      	mov	r4, r0
    5324:	2101      	movs	r1, #1
    5326:	2002      	movs	r0, #2
    5328:	f7fc fb58 	bl	19dc <z_arm_irq_priority_set>
    532c:	2002      	movs	r0, #2
    532e:	f7fc fb39 	bl	19a4 <arch_irq_enable>
    5332:	4620      	mov	r0, r4
    5334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5338:	f7fd ba90 	b.w	285c <uarte_instance_init.constprop.0>

0000533c <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    533c:	4770      	bx	lr

0000533e <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    533e:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    5340:	6843      	ldr	r3, [r0, #4]
    5342:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    5344:	7a03      	ldrb	r3, [r0, #8]
    5346:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    534a:	3b01      	subs	r3, #1
    534c:	00db      	lsls	r3, r3, #3
    534e:	6845      	ldr	r5, [r0, #4]
    5350:	6814      	ldr	r4, [r2, #0]
    5352:	441d      	add	r5, r3
    5354:	42ac      	cmp	r4, r5
    5356:	d902      	bls.n	535e <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
    5358:	f06f 0001 	mvn.w	r0, #1
}
    535c:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    535e:	7965      	ldrb	r5, [r4, #5]
    5360:	428d      	cmp	r5, r1
    5362:	d002      	beq.n	536a <pinctrl_lookup_state+0x2c>
		(*state)++;
    5364:	3408      	adds	r4, #8
    5366:	6014      	str	r4, [r2, #0]
    5368:	e7f1      	b.n	534e <pinctrl_lookup_state+0x10>
			return 0;
    536a:	2000      	movs	r0, #0
    536c:	e7f6      	b.n	535c <pinctrl_lookup_state+0x1e>

0000536e <nrf_gpio_pin_write>:
    if (value == 0)
    536e:	b909      	cbnz	r1, 5374 <nrf_gpio_pin_write+0x6>
        nrf_gpio_pin_clear(pin_number);
    5370:	f7fd bd92 	b.w	2e98 <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
    5374:	f7fd bdc2 	b.w	2efc <nrf_gpio_pin_set>

00005378 <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    5378:	b570      	push	{r4, r5, r6, lr}
    537a:	4615      	mov	r5, r2
    537c:	4604      	mov	r4, r0
    537e:	eb00 0681 	add.w	r6, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    5382:	42a6      	cmp	r6, r4
    5384:	d101      	bne.n	538a <pinctrl_configure_pins+0x12>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    5386:	2000      	movs	r0, #0
}
    5388:	bd70      	pop	{r4, r5, r6, pc}
		switch (NRF_GET_FUN(pins[i])) {
    538a:	6823      	ldr	r3, [r4, #0]
    538c:	0c1a      	lsrs	r2, r3, #16
    538e:	2a22      	cmp	r2, #34	; 0x22
    5390:	f200 808e 	bhi.w	54b0 <pinctrl_configure_pins+0x138>
    5394:	e8df f002 	tbb	[pc, r2]
    5398:	43241d12 	.word	0x43241d12
    539c:	8c433929 	.word	0x8c433929
    53a0:	488c8c8c 	.word	0x488c8c8c
    53a4:	8c8c8c4d 	.word	0x8c8c8c4d
    53a8:	8c8c8c8c 	.word	0x8c8c8c8c
    53ac:	5e528c8c 	.word	0x5e528c8c
    53b0:	8c8c6863 	.word	0x8c8c6863
    53b4:	78736d8c 	.word	0x78736d8c
    53b8:	827d      	.short	0x827d
    53ba:	87          	.byte	0x87
    53bb:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
    53bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    53c0:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    53c4:	6820      	ldr	r0, [r4, #0]
    53c6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    53ca:	f7fd fd97 	bl	2efc <nrf_gpio_pin_set>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    53ce:	2201      	movs	r2, #1
    53d0:	e015      	b.n	53fe <pinctrl_configure_pins+0x86>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
    53d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    53d6:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    53da:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    53dc:	2100      	movs	r1, #0
    53de:	e00f      	b.n	5400 <pinctrl_configure_pins+0x88>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
    53e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    53e4:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    53e8:	e7ec      	b.n	53c4 <pinctrl_configure_pins+0x4c>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    53ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    53ee:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    53f2:	6820      	ldr	r0, [r4, #0]
        nrf_gpio_pin_clear(pin_number);
    53f4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    53f8:	f7fd fd4e 	bl	2e98 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    53fc:	2200      	movs	r2, #0
    53fe:	2101      	movs	r1, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    5400:	6820      	ldr	r0, [r4, #0]
    5402:	f7fd fd59 	bl	2eb8 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    5406:	3404      	adds	r4, #4
    5408:	e7bb      	b.n	5382 <pinctrl_configure_pins+0xa>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    540a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    540e:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    5412:	6820      	ldr	r0, [r4, #0]
    5414:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    5418:	f7fd fd3e 	bl	2e98 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    541c:	e7d7      	b.n	53ce <pinctrl_configure_pins+0x56>
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
    541e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5422:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    5426:	e7d8      	b.n	53da <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
    5428:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    542c:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    5430:	e7d3      	b.n	53da <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
    5432:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5436:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
    543a:	e7ce      	b.n	53da <pinctrl_configure_pins+0x62>
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
    543c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5440:	f8c5 3560 	str.w	r3, [r5, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    5444:	6820      	ldr	r0, [r4, #0]
    5446:	f3c0 3140 	ubfx	r1, r0, #13, #1
    544a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    544e:	f7ff ff8e 	bl	536e <nrf_gpio_pin_write>
    5452:	e7bc      	b.n	53ce <pinctrl_configure_pins+0x56>
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
    5454:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5458:	f8c5 3564 	str.w	r3, [r5, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    545c:	e7f2      	b.n	5444 <pinctrl_configure_pins+0xcc>
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
    545e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5462:	f8c5 3568 	str.w	r3, [r5, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    5466:	e7ed      	b.n	5444 <pinctrl_configure_pins+0xcc>
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
    5468:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    546c:	f8c5 356c 	str.w	r3, [r5, #1388]	; 0x56c
    5470:	e7e8      	b.n	5444 <pinctrl_configure_pins+0xcc>
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
    5472:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5476:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    547a:	2201      	movs	r2, #1
    547c:	e7ae      	b.n	53dc <pinctrl_configure_pins+0x64>
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
    547e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5482:	f8c5 3528 	str.w	r3, [r5, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    5486:	e7f8      	b.n	547a <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
    5488:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    548c:	f8c5 3530 	str.w	r3, [r5, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    5490:	e7f3      	b.n	547a <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
    5492:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5496:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    549a:	e7ee      	b.n	547a <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
    549c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    54a0:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    54a4:	e7e9      	b.n	547a <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
    54a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    54aa:	f8c5 353c 	str.w	r3, [r5, #1340]	; 0x53c
    54ae:	e7e4      	b.n	547a <pinctrl_configure_pins+0x102>
		switch (NRF_GET_FUN(pins[i])) {
    54b0:	f06f 0085 	mvn.w	r0, #133	; 0x85
    54b4:	e768      	b.n	5388 <pinctrl_configure_pins+0x10>

000054b6 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    54b6:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    54b8:	2000      	movs	r0, #0
    54ba:	f7fc fe13 	bl	20e4 <sys_arch_reboot>

000054be <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    54be:	f7ff ba3b 	b.w	4938 <nrf_cc3xx_platform_init_no_rng>

000054c2 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    54c2:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    54c4:	f7fc f986 	bl	17d4 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    54c8:	f7fc fa38 	bl	193c <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    54cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    54d0:	f7ff ba32 	b.w	4938 <nrf_cc3xx_platform_init_no_rng>

000054d4 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    54d4:	4700      	bx	r0

000054d6 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    54d6:	f000 ba18 	b.w	590a <z_impl_k_busy_wait>

000054da <nrfx_clock_enable>:
{
    54da:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    54dc:	2000      	movs	r0, #0
    54de:	f7fc fa6f 	bl	19c0 <arch_irq_is_enabled>
    54e2:	b908      	cbnz	r0, 54e8 <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    54e4:	f7fc fa5e 	bl	19a4 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    54e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    54ec:	2200      	movs	r2, #0
    54ee:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    54f2:	bd08      	pop	{r3, pc}

000054f4 <nrfx_clock_start>:
{
    54f4:	b508      	push	{r3, lr}
    switch (domain)
    54f6:	b110      	cbz	r0, 54fe <nrfx_clock_start+0xa>
    54f8:	2801      	cmp	r0, #1
    54fa:	d02c      	beq.n	5556 <nrfx_clock_start+0x62>
}
    54fc:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    54fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5502:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5506:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    550a:	03c8      	lsls	r0, r1, #15
    550c:	d40b      	bmi.n	5526 <nrfx_clock_start+0x32>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    550e:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    5512:	07d9      	lsls	r1, r3, #31
    5514:	d50f      	bpl.n	5536 <nrfx_clock_start+0x42>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    5516:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    551a:	079b      	lsls	r3, r3, #30
    551c:	d408      	bmi.n	5530 <nrfx_clock_start+0x3c>
    p_reg->INTENSET = mask;
    551e:	2302      	movs	r3, #2
    5520:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    5524:	e7ea      	b.n	54fc <nrfx_clock_start+0x8>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    5526:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    552a:	2b01      	cmp	r3, #1
    552c:	d004      	beq.n	5538 <nrfx_clock_start+0x44>
    552e:	b113      	cbz	r3, 5536 <nrfx_clock_start+0x42>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    5530:	2000      	movs	r0, #0
    5532:	f7fd fe31 	bl	3198 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    5536:	2300      	movs	r3, #0
    p_reg->LFCLKSRC = (uint32_t)(source);
    5538:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    553c:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5540:	2300      	movs	r3, #0
    5542:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    5546:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    554a:	2302      	movs	r3, #2
    554c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5550:	2301      	movs	r3, #1
    5552:	6093      	str	r3, [r2, #8]
}
    5554:	e7d2      	b.n	54fc <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5556:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    555a:	2200      	movs	r2, #0
    555c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    5560:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    5564:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5568:	6018      	str	r0, [r3, #0]
}
    556a:	e7c7      	b.n	54fc <nrfx_clock_start+0x8>

0000556c <nrfx_clock_stop>:
    clock_stop(domain);
    556c:	f7fd be14 	b.w	3198 <clock_stop>

00005570 <nrf_gpio_reconfigure>:
{
    5570:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5572:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5574:	a801      	add	r0, sp, #4
{
    5576:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
    557a:	4616      	mov	r6, r2
    557c:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    557e:	f7fd feb3 	bl	32e8 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    5582:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    5584:	f1b6 0c00 	subs.w	ip, r6, #0
    5588:	bf18      	it	ne
    558a:	f04f 0c01 	movne.w	ip, #1
    558e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    5592:	1e0b      	subs	r3, r1, #0
    5594:	bf18      	it	ne
    5596:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    5598:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    559a:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    559e:	bf14      	ite	ne
    55a0:	f04f 0c0c 	movne.w	ip, #12
    55a4:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    55a8:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    55aa:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    55ae:	bf14      	ite	ne
    55b0:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
    55b4:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    55b8:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    55ba:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
    55be:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    55c2:	bf14      	ite	ne
    55c4:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
    55c8:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    55cc:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    55d0:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    55d4:	b101      	cbz	r1, 55d8 <nrf_gpio_reconfigure+0x68>
    55d6:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    55d8:	b10e      	cbz	r6, 55de <nrf_gpio_reconfigure+0x6e>
    55da:	7836      	ldrb	r6, [r6, #0]
    55dc:	0076      	lsls	r6, r6, #1
    55de:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    55e0:	b10d      	cbz	r5, 55e6 <nrf_gpio_reconfigure+0x76>
    55e2:	782d      	ldrb	r5, [r5, #0]
    55e4:	00ad      	lsls	r5, r5, #2
    55e6:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    55e8:	b10c      	cbz	r4, 55ee <nrf_gpio_reconfigure+0x7e>
    55ea:	7824      	ldrb	r4, [r4, #0]
    55ec:	0224      	lsls	r4, r4, #8
    55ee:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    55f0:	b10f      	cbz	r7, 55f6 <nrf_gpio_reconfigure+0x86>
    55f2:	783f      	ldrb	r7, [r7, #0]
    55f4:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    55f6:	430c      	orrs	r4, r1
    55f8:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
    55fa:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    55fe:	b003      	add	sp, #12
    5600:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005602 <nrf_gpio_cfg_sense_set>:
{
    5602:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    5604:	f10d 030f 	add.w	r3, sp, #15
    5608:	9301      	str	r3, [sp, #4]
    560a:	2300      	movs	r3, #0
{
    560c:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    5610:	9300      	str	r3, [sp, #0]
    5612:	461a      	mov	r2, r3
    5614:	4619      	mov	r1, r3
    5616:	f7ff ffab 	bl	5570 <nrf_gpio_reconfigure>
}
    561a:	b005      	add	sp, #20
    561c:	f85d fb04 	ldr.w	pc, [sp], #4

00005620 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    5620:	f7fe b9ce 	b.w	39c0 <_DoInit>

00005624 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    5624:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    5626:	f7ff fffb 	bl	5620 <SEGGER_RTT_Init>

	return 0;
}
    562a:	2000      	movs	r0, #0
    562c:	bd08      	pop	{r3, pc}

0000562e <z_device_state_init>:
}
    562e:	4770      	bx	lr

00005630 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    5630:	b138      	cbz	r0, 5642 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    5632:	68c3      	ldr	r3, [r0, #12]
    5634:	8818      	ldrh	r0, [r3, #0]
    5636:	f3c0 0008 	ubfx	r0, r0, #0, #9
    563a:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    563e:	4258      	negs	r0, r3
    5640:	4158      	adcs	r0, r3
}
    5642:	4770      	bx	lr

00005644 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    5644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5646:	4605      	mov	r5, r0
    5648:	460e      	mov	r6, r1
	__asm__ volatile(
    564a:	f04f 0320 	mov.w	r3, #32
    564e:	f3ef 8711 	mrs	r7, BASEPRI
    5652:	f383 8812 	msr	BASEPRI_MAX, r3
    5656:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    565a:	f7fe ffb1 	bl	45c0 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    565e:	4631      	mov	r1, r6
    5660:	4604      	mov	r4, r0
    5662:	4628      	mov	r0, r5
    5664:	f7ff ff27 	bl	54b6 <k_sys_fatal_error_handler>
	__asm__ volatile(
    5668:	f387 8811 	msr	BASEPRI, r7
    566c:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    5670:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    5672:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5676:	f7fc bc21 	b.w	1ebc <z_impl_k_thread_abort>

0000567a <z_early_memset>:
	(void) memset(dst, c, n);
    567a:	f7ff bcd6 	b.w	502a <memset>

0000567e <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    567e:	f7ff bcc9 	b.w	5014 <memcpy>

00005682 <k_mem_slab_init>:
{
    5682:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    5684:	2400      	movs	r4, #0
    5686:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    5688:	ea41 0402 	orr.w	r4, r1, r2
    568c:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    5690:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
    5694:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    5696:	d10c      	bne.n	56b2 <k_mem_slab_init+0x30>
    5698:	4625      	mov	r5, r4
	for (j = 0U; j < slab->num_blocks; j++) {
    569a:	42a3      	cmp	r3, r4
	slab->free_list = NULL;
    569c:	6145      	str	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    569e:	d103      	bne.n	56a8 <k_mem_slab_init+0x26>
	list->tail = (sys_dnode_t *)list;
    56a0:	e9c0 0000 	strd	r0, r0, [r0]
}
    56a4:	2000      	movs	r0, #0
}
    56a6:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    56a8:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    56aa:	3401      	adds	r4, #1
    56ac:	460d      	mov	r5, r1
		p += slab->block_size;
    56ae:	4411      	add	r1, r2
    56b0:	e7f3      	b.n	569a <k_mem_slab_init+0x18>
		return -EINVAL;
    56b2:	f06f 0015 	mvn.w	r0, #21
	return rc;
    56b6:	e7f6      	b.n	56a6 <k_mem_slab_init+0x24>

000056b8 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    56b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    56ba:	4604      	mov	r4, r0
    56bc:	460d      	mov	r5, r1
	__asm__ volatile(
    56be:	f04f 0320 	mov.w	r3, #32
    56c2:	f3ef 8611 	mrs	r6, BASEPRI
    56c6:	f383 8812 	msr	BASEPRI_MAX, r3
    56ca:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    56ce:	6947      	ldr	r7, [r0, #20]
    56d0:	b977      	cbnz	r7, 56f0 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    56d2:	f000 f8a2 	bl	581a <z_unpend_first_thread>

		if (pending_thread != NULL) {
    56d6:	b158      	cbz	r0, 56f0 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    56d8:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    56da:	6142      	str	r2, [r0, #20]
    56dc:	6787      	str	r7, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    56de:	f000 f88c 	bl	57fa <z_ready_thread>
			z_reschedule(&slab->lock, key);
    56e2:	4631      	mov	r1, r6
    56e4:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    56e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    56ec:	f7fe be2e 	b.w	434c <z_reschedule>
	**(char ***) mem = slab->free_list;
    56f0:	682b      	ldr	r3, [r5, #0]
    56f2:	6962      	ldr	r2, [r4, #20]
    56f4:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    56f6:	682b      	ldr	r3, [r5, #0]
    56f8:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    56fa:	69a3      	ldr	r3, [r4, #24]
    56fc:	3b01      	subs	r3, #1
    56fe:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    5700:	f386 8811 	msr	BASEPRI, r6
    5704:	f3bf 8f6f 	isb	sy
}
    5708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000570a <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    570a:	f3ef 8005 	mrs	r0, IPSR
}
    570e:	3800      	subs	r0, #0
    5710:	bf18      	it	ne
    5712:	2001      	movne	r0, #1
    5714:	4770      	bx	lr

00005716 <z_pm_save_idle_exit>:
{
    5716:	b508      	push	{r3, lr}
	pm_system_resume();
    5718:	f7fb ff4c 	bl	15b4 <pm_system_resume>
}
    571c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    5720:	f7ff be0c 	b.w	533c <sys_clock_idle_exit>

00005724 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    5724:	f990 300e 	ldrsb.w	r3, [r0, #14]
    5728:	428b      	cmp	r3, r1
    572a:	d001      	beq.n	5730 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    572c:	f7fe bdc8 	b.w	42c0 <z_set_prio>
}
    5730:	2000      	movs	r0, #0
    5732:	4770      	bx	lr

00005734 <z_impl_k_mutex_init>:
{
    5734:	4603      	mov	r3, r0
	mutex->owner = NULL;
    5736:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    5738:	e9c3 0002 	strd	r0, r0, [r3, #8]
    573c:	e9c3 3300 	strd	r3, r3, [r3]
}
    5740:	4770      	bx	lr

00005742 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    5742:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    5746:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    5748:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    574a:	2300      	movs	r3, #0
	node->prev = NULL;
    574c:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    5750:	4770      	bx	lr

00005752 <unpend_thread_no_timeout>:
{
    5752:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    5754:	f7ff fff5 	bl	5742 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    5758:	7b43      	ldrb	r3, [r0, #13]
    575a:	f023 0302 	bic.w	r3, r3, #2
    575e:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    5760:	2300      	movs	r3, #0
    5762:	6083      	str	r3, [r0, #8]
}
    5764:	bd08      	pop	{r3, pc}

00005766 <z_thread_timeout>:
{
    5766:	b510      	push	{r4, lr}
    5768:	4601      	mov	r1, r0
	__asm__ volatile(
    576a:	f04f 0320 	mov.w	r3, #32
    576e:	f3ef 8411 	mrs	r4, BASEPRI
    5772:	f383 8812 	msr	BASEPRI_MAX, r3
    5776:	f3bf 8f6f 	isb	sy
		if (!killed) {
    577a:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    577e:	f013 0f28 	tst.w	r3, #40	; 0x28
    5782:	d10d      	bne.n	57a0 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    5784:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    5788:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    578a:	b10b      	cbz	r3, 5790 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    578c:	f7ff ffe1 	bl	5752 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    5790:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    5794:	f023 0314 	bic.w	r3, r3, #20
    5798:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    579c:	f7fe fc96 	bl	40cc <ready_thread>
	__asm__ volatile(
    57a0:	f384 8811 	msr	BASEPRI, r4
    57a4:	f3bf 8f6f 	isb	sy
}
    57a8:	bd10      	pop	{r4, pc}

000057aa <add_to_waitq_locked>:
{
    57aa:	b538      	push	{r3, r4, r5, lr}
    57ac:	4604      	mov	r4, r0
    57ae:	460d      	mov	r5, r1
	unready_thread(thread);
    57b0:	f7fe fcc0 	bl	4134 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    57b4:	7b63      	ldrb	r3, [r4, #13]
    57b6:	f043 0302 	orr.w	r3, r3, #2
    57ba:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    57bc:	b1e5      	cbz	r5, 57f8 <add_to_waitq_locked+0x4e>
	return list->head == list;
    57be:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    57c0:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    57c2:	429d      	cmp	r5, r3
    57c4:	d109      	bne.n	57da <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
    57c6:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    57c8:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    57cc:	601c      	str	r4, [r3, #0]
	list->tail = node;
    57ce:	606c      	str	r4, [r5, #4]
}
    57d0:	e012      	b.n	57f8 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
    57d2:	686a      	ldr	r2, [r5, #4]
    57d4:	4293      	cmp	r3, r2
    57d6:	d0f6      	beq.n	57c6 <add_to_waitq_locked+0x1c>
    57d8:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    57da:	2b00      	cmp	r3, #0
    57dc:	d0f3      	beq.n	57c6 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
    57de:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    57e2:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    57e6:	428a      	cmp	r2, r1
    57e8:	d0f3      	beq.n	57d2 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
    57ea:	4291      	cmp	r1, r2
    57ec:	ddf1      	ble.n	57d2 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
    57ee:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    57f0:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    57f4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    57f6:	605c      	str	r4, [r3, #4]
}
    57f8:	bd38      	pop	{r3, r4, r5, pc}

000057fa <z_ready_thread>:
{
    57fa:	b510      	push	{r4, lr}
	__asm__ volatile(
    57fc:	f04f 0320 	mov.w	r3, #32
    5800:	f3ef 8411 	mrs	r4, BASEPRI
    5804:	f383 8812 	msr	BASEPRI_MAX, r3
    5808:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    580c:	f7fe fc5e 	bl	40cc <ready_thread>
	__asm__ volatile(
    5810:	f384 8811 	msr	BASEPRI, r4
    5814:	f3bf 8f6f 	isb	sy
}
    5818:	bd10      	pop	{r4, pc}

0000581a <z_unpend_first_thread>:
{
    581a:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    581c:	f04f 0320 	mov.w	r3, #32
    5820:	f3ef 8511 	mrs	r5, BASEPRI
    5824:	f383 8812 	msr	BASEPRI_MAX, r3
    5828:	f3bf 8f6f 	isb	sy
	return list->head == list;
    582c:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    582e:	42a0      	cmp	r0, r4
    5830:	d00d      	beq.n	584e <z_unpend_first_thread+0x34>
		if (thread != NULL) {
    5832:	b134      	cbz	r4, 5842 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
    5834:	4620      	mov	r0, r4
    5836:	f7ff ff8c 	bl	5752 <unpend_thread_no_timeout>
    583a:	f104 0018 	add.w	r0, r4, #24
    583e:	f000 f81e 	bl	587e <z_abort_timeout>
	__asm__ volatile(
    5842:	f385 8811 	msr	BASEPRI, r5
    5846:	f3bf 8f6f 	isb	sy
}
    584a:	4620      	mov	r0, r4
    584c:	bd38      	pop	{r3, r4, r5, pc}
    584e:	2400      	movs	r4, #0
    5850:	e7f7      	b.n	5842 <z_unpend_first_thread+0x28>

00005852 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    5852:	4603      	mov	r3, r0
    5854:	b920      	cbnz	r0, 5860 <z_reschedule_irqlock+0xe>
    5856:	f3ef 8205 	mrs	r2, IPSR
    585a:	b90a      	cbnz	r2, 5860 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    585c:	f7fc b8f6 	b.w	1a4c <arch_swap>
    5860:	f383 8811 	msr	BASEPRI, r3
    5864:	f3bf 8f6f 	isb	sy
}
    5868:	4770      	bx	lr

0000586a <z_reschedule_unlocked>:
	__asm__ volatile(
    586a:	f04f 0320 	mov.w	r3, #32
    586e:	f3ef 8011 	mrs	r0, BASEPRI
    5872:	f383 8812 	msr	BASEPRI_MAX, r3
    5876:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    587a:	f7ff bfea 	b.w	5852 <z_reschedule_irqlock>

0000587e <z_abort_timeout>:
{
    587e:	b510      	push	{r4, lr}
    5880:	f04f 0220 	mov.w	r2, #32
    5884:	f3ef 8411 	mrs	r4, BASEPRI
    5888:	f382 8812 	msr	BASEPRI_MAX, r2
    588c:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    5890:	6803      	ldr	r3, [r0, #0]
    5892:	b13b      	cbz	r3, 58a4 <z_abort_timeout+0x26>
			remove_timeout(to);
    5894:	f7fe ff38 	bl	4708 <remove_timeout>
			ret = 0;
    5898:	2000      	movs	r0, #0
	__asm__ volatile(
    589a:	f384 8811 	msr	BASEPRI, r4
    589e:	f3bf 8f6f 	isb	sy
}
    58a2:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    58a4:	f06f 0015 	mvn.w	r0, #21
    58a8:	e7f7      	b.n	589a <z_abort_timeout+0x1c>

000058aa <z_get_next_timeout_expiry>:
{
    58aa:	b510      	push	{r4, lr}
	__asm__ volatile(
    58ac:	f04f 0320 	mov.w	r3, #32
    58b0:	f3ef 8411 	mrs	r4, BASEPRI
    58b4:	f383 8812 	msr	BASEPRI_MAX, r3
    58b8:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    58bc:	f7fe fefc 	bl	46b8 <next_timeout>
	__asm__ volatile(
    58c0:	f384 8811 	msr	BASEPRI, r4
    58c4:	f3bf 8f6f 	isb	sy
}
    58c8:	bd10      	pop	{r4, pc}

000058ca <z_set_timeout_expiry>:
{
    58ca:	b570      	push	{r4, r5, r6, lr}
    58cc:	4604      	mov	r4, r0
    58ce:	460d      	mov	r5, r1
	__asm__ volatile(
    58d0:	f04f 0320 	mov.w	r3, #32
    58d4:	f3ef 8611 	mrs	r6, BASEPRI
    58d8:	f383 8812 	msr	BASEPRI_MAX, r3
    58dc:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    58e0:	f7fe feea 	bl	46b8 <next_timeout>
			      || (ticks <= next_to);
    58e4:	2801      	cmp	r0, #1
    58e6:	dd07      	ble.n	58f8 <z_set_timeout_expiry+0x2e>
    58e8:	42a0      	cmp	r0, r4
    58ea:	db05      	blt.n	58f8 <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    58ec:	42a0      	cmp	r0, r4
    58ee:	4629      	mov	r1, r5
    58f0:	bfa8      	it	ge
    58f2:	4620      	movge	r0, r4
    58f4:	f7fd fa94 	bl	2e20 <sys_clock_set_timeout>
	__asm__ volatile(
    58f8:	f386 8811 	msr	BASEPRI, r6
    58fc:	f3bf 8f6f 	isb	sy
}
    5900:	bd70      	pop	{r4, r5, r6, pc}

00005902 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    5902:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    5904:	f7fe fff4 	bl	48f0 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    5908:	bd08      	pop	{r3, pc}

0000590a <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    590a:	b108      	cbz	r0, 5910 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    590c:	f7fc bc00 	b.w	2110 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    5910:	4770      	bx	lr

00005912 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    5912:	4770      	bx	lr

00005914 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    5914:	f7fd bb1c 	b.w	2f50 <SystemInit>
